"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/chat-stream";
exports.ids = ["pages/api/chat-stream"];
exports.modules = {

/***/ "dotenv/config":
/*!********************************!*\
  !*** external "dotenv/config" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("dotenv/config");

/***/ }),

/***/ "google-auth-library":
/*!**************************************!*\
  !*** external "google-auth-library" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("google-auth-library");

/***/ }),

/***/ "googleapis":
/*!*****************************!*\
  !*** external "googleapis" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("googleapis");

/***/ }),

/***/ "ioredis":
/*!**************************!*\
  !*** external "ioredis" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("ioredis");

/***/ }),

/***/ "next-auth":
/*!****************************!*\
  !*** external "next-auth" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("next-auth");

/***/ }),

/***/ "next-auth/next":
/*!*********************************!*\
  !*** external "next-auth/next" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("next-auth/next");

/***/ }),

/***/ "next-auth/providers/google":
/*!*********************************************!*\
  !*** external "next-auth/providers/google" ***!
  \*********************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/google");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "node-cache":
/*!*****************************!*\
  !*** external "node-cache" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node-cache");

/***/ }),

/***/ "luxon":
/*!************************!*\
  !*** external "luxon" ***!
  \************************/
/***/ ((module) => {

module.exports = import("luxon");;

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "sequelize":
/*!****************************!*\
  !*** external "sequelize" ***!
  \****************************/
/***/ ((module) => {

module.exports = import("sequelize");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat-stream&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fchat-stream.js&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat-stream&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fchat-stream.js&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_chat_stream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/chat-stream.js */ \"(api)/./pages/api/chat-stream.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_chat_stream_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_chat_stream_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_chat_stream_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_chat_stream_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/chat-stream\",\n        pathname: \"/api/chat-stream\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_chat_stream_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmNoYXQtc3RyZWFtJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZjaGF0LXN0cmVhbS5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUN1RDtBQUN2RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsc0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHNEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2djYWxlbmRhcmFwcC8/NzRiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2NoYXQtc3RyZWFtLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvY2hhdC1zdHJlYW1cIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jaGF0LXN0cmVhbVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat-stream&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fchat-stream.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./googleCalendar.js":
/*!***************************!*\
  !*** ./googleCalendar.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { google } = __webpack_require__(/*! googleapis */ \"googleapis\");\nconst { OAuth2Client } = __webpack_require__(/*! google-auth-library */ \"google-auth-library\");\n/**\n * Creates and configures an OAuth2Client with the provided tokens\n * @param {Object} tokens - The tokens object containing access_token and optionally refresh_token\n * @returns {OAuth2Client} - Configured OAuth2Client instance\n */ function createOAuth2Client(tokens) {\n    try {\n        const credentials = __webpack_require__(/*! ./credentials.json */ \"(api)/./credentials.json\");\n        const { client_secret, client_id, redirect_uris } = credentials.web;\n        const oauth2Client = new OAuth2Client(client_id, client_secret, redirect_uris[0]);\n        // Handle both full tokens object and just access_token\n        if (typeof tokens === \"object\" && tokens !== null) {\n            if (tokens.access_token) {\n                // If it's just the access_token from NextAuth session\n                oauth2Client.setCredentials({\n                    access_token: tokens.access_token,\n                    refresh_token: tokens.refresh_token,\n                    token_type: \"Bearer\"\n                });\n            } else {\n                // If it's a full tokens object\n                oauth2Client.setCredentials(tokens);\n            }\n        } else {\n            console.error(\"Invalid tokens format:\", tokens);\n            throw new Error(\"Invalid tokens format\");\n        }\n        return oauth2Client;\n    } catch (error) {\n        console.error(\"Error creating OAuth2Client:\", error);\n        throw error;\n    }\n}\n/**\n * Get calendar events for a specific date range\n * @param {Object} tokens - User's OAuth tokens\n * @param {Date} start_date - Start date for events\n * @param {Date} end_date - End date for events\n * @returns {Array} - List of calendar events\n */ async function getCalendarEvents(tokens, start_date, end_date) {\n    try {\n        const oauth2Client = createOAuth2Client(tokens);\n        const calendar = google.calendar({\n            version: \"v3\",\n            auth: oauth2Client\n        });\n        const res = await calendar.events.list({\n            calendarId: \"primary\",\n            timeMin: start_date.toISOString(),\n            timeMax: end_date.toISOString(),\n            singleEvents: true,\n            orderBy: \"startTime\"\n        });\n        return res.data.items || [];\n    } catch (error) {\n        console.error(\"Error fetching events:\", error);\n        return [];\n    }\n}\n/**\n * Add a new calendar event\n * @param {Object} tokens - User's OAuth tokens\n * @param {string} summary - Event title\n * @param {string} start - Event start time\n * @param {string} end - Event end time\n * @param {string} description - Event description\n * @param {string} location - Event location\n * @param {Array} reminders - Optional reminders in minutes\n * @returns {Object} - Created event data\n */ async function addCalendarEvent(tokens, summary, start, end, description, location, reminders) {\n    const oauth2Client = createOAuth2Client(tokens);\n    const calendar = google.calendar({\n        version: \"v3\",\n        auth: oauth2Client\n    });\n    const event = {\n        summary,\n        description,\n        location,\n        start: {\n            dateTime: start\n        },\n        end: {\n            dateTime: end\n        }\n    };\n    // Add reminders if provided\n    if (reminders && Array.isArray(reminders) && reminders.length > 0) {\n        event.reminders = {\n            useDefault: false,\n            overrides: reminders.map((minutes)=>({\n                    method: \"popup\",\n                    minutes: minutes\n                }))\n        };\n    }\n    try {\n        const res = await calendar.events.insert({\n            calendarId: \"primary\",\n            resource: event\n        });\n        return res.data;\n    } catch (error) {\n        console.error(\"Error adding event:\", error);\n        throw error;\n    }\n}\n/**\n * Delete a calendar event\n * @param {Object} tokens - User's OAuth tokens\n * @param {string} eventId - ID of the event to delete \n * @param {string} calendarId - Calendar ID (defaults to 'primary')\n * @returns {Object} - Deleted event summary\n */ async function deleteCalendarEvent(tokens, eventId, calendarId = \"primary\") {\n    // Validate inputs\n    if (!tokens) {\n        throw new Error(\"OAuth tokens are required\");\n    }\n    if (!eventId) {\n        throw new Error(\"Event ID is required\");\n    }\n    const oauth2Client = createOAuth2Client(tokens);\n    const calendar = google.calendar({\n        version: \"v3\",\n        auth: oauth2Client\n    });\n    try {\n        // First get the event to return its summary after deletion\n        let eventSummary = null;\n        try {\n            const event = await calendar.events.get({\n                calendarId: calendarId,\n                eventId: eventId\n            });\n            eventSummary = event.data.summary;\n        } catch (getError) {\n            console.warn(`Could not retrieve event details before deletion: ${getError.message}`);\n        }\n        await calendar.events.delete({\n            calendarId: calendarId,\n            eventId: eventId\n        });\n        return {\n            success: true,\n            summary: eventSummary,\n            eventId: eventId\n        };\n    } catch (error) {\n        console.error(`Error deleting event ${eventId}:`, error.message);\n        return {\n            success: false,\n            error: error.message,\n            eventId: eventId\n        };\n    }\n}\n/**\n * Update a calendar event\n * @param {Object} tokens - User's OAuth tokens\n * @param {string} eventId - ID of the event to update\n * @param {Object} updates - Object containing fields to update\n * @returns {Object} - Updated event data\n */ async function updateCalendarEvent(tokens, eventId, updates) {\n    const oauth2Client = createOAuth2Client(tokens);\n    const calendar = google.calendar({\n        version: \"v3\",\n        auth: oauth2Client\n    });\n    try {\n        // First get the current event\n        const currentEvent = await calendar.events.get({\n            calendarId: \"primary\",\n            eventId: eventId\n        });\n        // Prepare the update payload\n        const updatedEvent = {\n            ...currentEvent.data\n        };\n        if (updates.summary) updatedEvent.summary = updates.summary;\n        if (updates.description) updatedEvent.description = updates.description;\n        if (updates.location) updatedEvent.location = updates.location;\n        if (updates.start) {\n            updatedEvent.start = {\n                dateTime: updates.start,\n                timeZone: currentEvent.data.start.timeZone\n            };\n        }\n        if (updates.end) {\n            updatedEvent.end = {\n                dateTime: updates.end,\n                timeZone: currentEvent.data.end.timeZone\n            };\n        }\n        // Update the event\n        const res = await calendar.events.update({\n            calendarId: \"primary\",\n            eventId: eventId,\n            resource: updatedEvent\n        });\n        return res.data;\n    } catch (error) {\n        console.error(\"Error updating event:\", error);\n        throw error;\n    }\n}\nmodule.exports = {\n    createOAuth2Client,\n    getCalendarEvents,\n    addCalendarEvent,\n    deleteCalendarEvent,\n    updateCalendarEvent\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./googleCalendar.js\n");

/***/ }),

/***/ "(api)/./lib/chatbot.js":
/*!************************!*\
  !*** ./lib/chatbot.js ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ chat),\n/* harmony export */   getConversationsByUserId: () => (/* reexport safe */ _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.getConversationsByUserId),\n/* harmony export */   listTodaysEvents: () => (/* reexport safe */ _tools_eventHelpers_js__WEBPACK_IMPORTED_MODULE_6__.listTodaysEvents),\n/* harmony export */   suggestEventTime: () => (/* reexport safe */ _tools_eventHelpers_js__WEBPACK_IMPORTED_MODULE_6__.suggestEventTime)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! luxon */ \"luxon\");\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node-cache */ \"node-cache\");\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(node_cache__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dotenv/config */ \"dotenv/config\");\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(dotenv_config__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _data_prompts_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./data/prompts.js */ \"(api)/./lib/data/prompts.js\");\n/* harmony import */ var _tools_schedulingUtils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tools/schedulingUtils.js */ \"(api)/./lib/tools/schedulingUtils.js\");\n/* harmony import */ var _tools_eventHelpers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tools/eventHelpers.js */ \"(api)/./lib/tools/eventHelpers.js\");\n/* harmony import */ var _tools_toolIndex_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tools/toolIndex.js */ \"(api)/./lib/tools/toolIndex.js\");\n/* harmony import */ var _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./postgresClient.js */ \"(api)/./lib/postgresClient.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__, luxon__WEBPACK_IMPORTED_MODULE_1__, _tools_schedulingUtils_js__WEBPACK_IMPORTED_MODULE_5__, _tools_eventHelpers_js__WEBPACK_IMPORTED_MODULE_6__, _tools_toolIndex_js__WEBPACK_IMPORTED_MODULE_7__, _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__]);\n([openai__WEBPACK_IMPORTED_MODULE_0__, luxon__WEBPACK_IMPORTED_MODULE_1__, _tools_schedulingUtils_js__WEBPACK_IMPORTED_MODULE_5__, _tools_eventHelpers_js__WEBPACK_IMPORTED_MODULE_6__, _tools_toolIndex_js__WEBPACK_IMPORTED_MODULE_7__, _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// lib/chatbot.js\n// --- IMPORTS ---\n\n\n\n\n// Local Modules\n// Import system prompt\n\n\n\n\n\n// Weather client function (if used)\n// import { getWeatherData } from './weatherClient.js'; // Example path\n// Google APIs library (needed for direct calls in tool functions like delete/update)\n// **FIX:** Use import instead of require for consistency if possible (depends on project setup)\n// If using ES modules: import { google } from 'googleapis';\n// If require is necessary:\nconst { google } = __webpack_require__(/*! googleapis */ \"googleapis\"); // Keep require if necessary for googleapis\n// --- Database Initialization ---\n// (Keep the getDatabaseInitPromise function as is)\nlet dbInitPromise = null;\n// Initialize OpenAI client\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n// --- Helper Functions (Formatting & Time) ---\nfunction formatEventTime(eventTime) {\n    try {\n        const dt = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(eventTime);\n        if (dt.isValid) {\n            return dt.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.DATETIME_FULL);\n        }\n        const dateOnly = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(eventTime, {\n            zone: \"utc\"\n        });\n        if (dateOnly.isValid) {\n            return dateOnly.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.DATE_FULL) + \" (All day)\";\n        }\n        return eventTime;\n    } catch (e) {\n        console.warn(\"Error formatting event time:\", eventTime, e);\n        return String(eventTime); // Ensure returns string\n    }\n}\nfunction formatCalendarEvents(events) {\n    if (!events) return \"No events found or an error occurred.\";\n    if (!Array.isArray(events)) return \"An error occurred processing events.\";\n    if (events.length === 0) return \"No events found for the specified time period.\";\n    return events.map((event)=>{\n        try {\n            const start = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(event.start?.dateTime || event.start?.date);\n            const end = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(event.end?.dateTime || event.end?.date);\n            if (!start.isValid || !end.isValid) return `❓ Invalid date found for event: ${event.summary || event.id}`;\n            const isAllDay = !event.start?.dateTime;\n            // Include the event ID in the formatted output (hidden with a zero-width space for reference)\n            let formattedEvent = `📅 ${event.summary || \"(No Title)\"} [ID:​${event.id}]\\n`;\n            formattedEvent += `   📆 ${start.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.DATE_FULL)}\\n`;\n            if (!isAllDay) {\n                formattedEvent += `   🕒 ${start.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.TIME_SIMPLE)} - ${end.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.TIME_SIMPLE)}\\n`;\n            } else {\n                formattedEvent += `   🕒 All Day\\n`;\n            }\n            if (event.description) formattedEvent += `   📝 ${event.description}\\n`;\n            if (event.location) formattedEvent += `   📍 ${event.location}\\n`;\n            if (event.reminders?.useDefault === false && Array.isArray(event.reminders.overrides)) {\n                formattedEvent += `   🔔 Reminders: ${event.reminders.overrides.map((r)=>`${r.minutes} min`).join(\", \")}\\n`;\n            }\n            return formattedEvent.trim(); // Trim each event string\n        } catch (mapError) {\n            console.error(\"Error mapping event:\", event, mapError);\n            return `❓ Error processing event: ${event.summary || event.id}`;\n        }\n    }).join(\"\\n\\n\"); // Add space between events\n}\n// --- Formatting Tool Responses for the LLM ---\nfunction formatToolResponse(functionName, result) {\n    try {\n        // Explicitly handle null/undefined results first\n        if (result == null) {\n            console.warn(`Tool ${functionName} returned null or undefined.`);\n            return `Tool ${functionName} did not return a result. (Status: FAILED)`;\n        }\n        // Handle known error shapes returned by tool functions\n        if (typeof result === \"string\" && result.toLowerCase().startsWith(\"error:\")) return `${result} (Status: FAILED)`;\n        if (typeof result === \"object\" && result.error) return `Error executing ${functionName}: ${result.error} (Status: FAILED)`;\n        if (typeof result === \"object\" && result.success === false) return `Tool ${functionName} failed: ${result.message || \"No details.\"} (Status: FAILED)`;\n        // --- Format successful results ---\n        switch(functionName){\n            case \"saveUserPreference\":\n                return result.success ? `✅ Pref saved: ${result.message} (Status: SUCCESS)` : `❌ Pref fail: ${result.message} (Status: FAILED)`;\n            case \"addCalendarEvents\":\n                if (!Array.isArray(result)) return \"Error: Invalid response format from addCalendarEvents. (Status: FAILED)\";\n                if (result.length === 0) return \"No events were processed. (Status: NEUTRAL)\";\n                return result.map((item)=>{\n                    if (!item) return \"❓ Invalid item in result array. (Status: FAILED)\";\n                    if (item.error) {\n                        const summary = item.summary || \"?\";\n                        if (item.conflict) {\n                            // Include suggestions if available\n                            const suggestionText = item.suggestions && item.suggestions.length > 0 ? ` Suggested slots: ${item.suggestions.map((s)=>`${luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(s.start).toFormat(\"h:mma\")} - ${luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(s.end).toFormat(\"h:mma\")}`).join(\", \")}` : \"\";\n                            return `⚠️ Conflict detected for event \"${summary}\".${suggestionText} (Status: CONFLICT)`;\n                        } else {\n                            return `❌ Failed to add event \"${summary}\": ${item.error} (Status: FAILED)`;\n                        }\n                    } else if (item.id && item.summary && (item.start?.dateTime || item.start?.date)) {\n                        try {\n                            const startStr = formatEventTime(item.start.dateTime || item.start.date); // Use existing helper\n                            return `✅ Event added: \"${item.summary}\" starting ${startStr}. (ID: ${item.id}) (Status: SUCCESS)`;\n                        } catch (e) {\n                            console.error(\"Error formatting success message for added event:\", item, e);\n                            return `✅ Event added: \"${item.summary}\" (details unavailable). (ID: ${item.id}) (Status: SUCCESS)`;\n                        }\n                    } else {\n                        console.warn(\"Unexpected item shape in addCalendarEvents result:\", item);\n                        return `❓ Unknown outcome for an event attempt. (Status: UNKNOWN)`;\n                    }\n                }).join(\"\\n\");\n            case \"getCalendarEvents\":\n                if (typeof result === \"string\") return `🗓️ Events: ${result} (Status: ${result.toLowerCase().startsWith(\"error\") ? \"FAILED\" : \"SUCCESS\"})`;\n                if (!Array.isArray(result)) return \"Error: Invalid getCalendarEvents response. (Status: FAILED)\";\n                return result.length === 0 ? \"\\uD83D\\uDDD3️ No events found. (Status: SUCCESS)\" : `🗓️ Found ${result.length} event(s):\\n\\n${formatCalendarEvents(result)} (Status: SUCCESS)`;\n            case \"deleteCalendarEvent\":\n                return result.success ? `🗑️ Event \"${result.summary || result.eventId}\" deleted. (Status: SUCCESS)` // Use eventId if summary wasn't fetched/returned\n                 : `❌ Failed to delete event ${result.eventId || \"?\"}: ${result.error || result.message || \"?\"} (Status: FAILED)`;\n            case \"updateCalendarEvent\":\n                // Check if result has an ID, indicating success from googleCalendar update function\n                if (result && result.id) {\n                    return `✏️ Event \"${result.summary || eventId}\" updated. (ID: ${result.id}) (Status: SUCCESS)`;\n                } else {\n                    // Handle potential error objects passed back\n                    const errorMsg = result?.error || result?.message || JSON.stringify(result);\n                    return `❌ Failed to update event: ${errorMsg} (Status: FAILED)`;\n                }\n            case \"findAvailableSlots\":\n                if (!Array.isArray(result)) return \"Error: Invalid findAvailableSlots response. (Status: FAILED)\";\n                if (result.length === 0) return `🕒 No available slots found matching criteria. (Status: SUCCESS)`;\n                // Format slots with success status\n                const formattedSlots = result.map((slot)=>`${luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(slot.start).toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.DATETIME_SHORT)} - ${luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(slot.end).toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.TIME_SIMPLE)}`).join(\"\\n\");\n                return `🕒 Found ${result.length} available slot(s):\\n\\n${formattedSlots}\\n\\n(Status: SUCCESS)`;\n            case \"getWeatherForecast\":\n                return `🌤️ Weather for ${result.location} on ${result.date}: ${result.forecast || \"N/A\"} (Status: ${result.forecast && !result.forecast.includes(\"unavailable\") ? \"SUCCESS\" : \"PARTIAL\"})`;\n            case \"deleteCalendarEventsByQuery\":\n                return result.success ? `🗑️ ${result.message} (Deleted Count: ${result.deletedCount}) (Status: SUCCESS)` : `❌ Failed bulk delete: ${result.message || result.error || \"?\"} (Status: FAILED)`;\n            default:\n                // Safely stringify other results with status indicators\n                if (typeof result === \"object\" && result !== null) {\n                    const status = result.success === true ? \"SUCCESS\" : result.success === false ? \"FAILED\" : \"UNKNOWN\";\n                    return `${JSON.stringify(result)} (Status: ${status})`;\n                } else {\n                    return `${String(result)} (Status: UNKNOWN)`;\n                }\n        }\n    } catch (formatError) {\n        console.error(`CRITICAL: Error *within* formatToolResponse for ${functionName}:`, formatError, \"Raw result:\", result);\n        // Return a guaranteed string error message\n        return `Internal Error: Failed to format the result for ${functionName}. (Status: ERROR)`;\n    }\n}\n// Helper function to process tool calls\nasync function processToolCalls(toolCalls, messages, conversationId, userId, accessToken) {\n    try {\n        console.log(`Processing ${toolCalls.length} tool calls`);\n        // Use Promise.allSettled for robustness\n        const toolPromises = toolCalls.map(async (toolCall)=>{\n            const toolCallId = toolCall.id;\n            const functionName = toolCall.function?.name;\n            let toolResponseContent = \"\";\n            try {\n                // 1. Basic Validation\n                if (!toolCallId || toolCall.type !== \"function\" || !functionName) {\n                    throw new Error(`Invalid tool call structure received: ${JSON.stringify(toolCall)}`);\n                }\n                if (!_tools_toolIndex_js__WEBPACK_IMPORTED_MODULE_7__.toolFunctions[functionName]) {\n                    throw new Error(`Tool function \"${functionName}\" is not available.`);\n                }\n                // 2. Parse Arguments\n                let parsedArgs = {};\n                try {\n                    parsedArgs = JSON.parse(toolCall.function.arguments || \"{}\");\n                } catch (parseError) {\n                    throw new Error(`Invalid JSON arguments for ${functionName}. Args: ${toolCall.function.arguments}. Error: ${parseError.message}`);\n                }\n                // 3. Execute Tool Function\n                console.log(`Executing tool: ${functionName} (ID: ${toolCallId}) with args:`, parsedArgs);\n                const result = await _tools_toolIndex_js__WEBPACK_IMPORTED_MODULE_7__.toolFunctions[functionName](parsedArgs, userId, accessToken);\n                console.log(`Tool ${functionName} (ID: ${toolCallId}) raw result:`, result);\n                // 4. Format Result\n                toolResponseContent = formatToolResponse(functionName, result);\n                console.log(`Tool ${functionName} (ID: ${toolCallId}) formatted response:`, toolResponseContent);\n                // Add a success indicator to the tool response for context tracking\n                let successIndicator = \"\";\n                if (functionName === \"deleteCalendarEvent\" && result.success) {\n                    successIndicator = \"\\n\\n[✅ Event successfully deleted]\";\n                } else if (functionName === \"addCalendarEvent\" && result.id) {\n                    successIndicator = \"\\n\\n[✅ Event successfully added]\";\n                } else if (functionName === \"updateCalendarEvent\" && result.id) {\n                    successIndicator = \"\\n\\n[✅ Event successfully updated]\";\n                }\n                // Add success indicator to the response if applicable\n                return {\n                    status: \"fulfilled\",\n                    value: {\n                        role: \"tool\",\n                        content: toolResponseContent + successIndicator,\n                        tool_call_id: toolCallId\n                    }\n                };\n            } catch (error) {\n                console.error(`ERROR processing tool call ${toolCallId} (${functionName || \"?\"}):`, error);\n                toolResponseContent = `Error processing tool ${functionName || \"?\"}: ${error.message || error}`;\n                return {\n                    status: \"rejected\",\n                    reason: error,\n                    value: {\n                        role: \"tool\",\n                        content: toolResponseContent,\n                        tool_call_id: toolCallId\n                    }\n                };\n            }\n        });\n        const settledToolResults = await Promise.allSettled(toolPromises);\n        const toolResponses = settledToolResults.map((settledResult)=>{\n            if (settledResult.status === \"fulfilled\") {\n                return settledResult.value.value;\n            } else {\n                return settledResult.reason.value;\n            }\n        }).filter(Boolean);\n        // Add tool responses to history\n        messages.push(...toolResponses);\n        // Store tool responses in DB (best effort, loop through results)\n        if (conversationId) {\n            try {\n                // Use Promise.all to store all tool responses in parallel\n                await Promise.all(toolResponses.map((toolMsg)=>(0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.addMessageToConversation)(conversationId, \"tool\", toolMsg.content, {\n                        tool_call_id: toolMsg.tool_call_id\n                    }).catch((dbError)=>{\n                        console.error(`DB Error storing tool response ${toolMsg.tool_call_id}:`, dbError);\n                        // Don't throw, allow other messages to be stored\n                        return null;\n                    })));\n                console.log(`Stored ${toolResponses.length} tool responses in database`);\n            } catch (batchError) {\n                console.error(`Error in batch storing tool responses:`, batchError);\n            // Individual errors are already caught in the map function\n            // This catch is for errors outside the individual promises\n            }\n        }\n        return toolResponses;\n    } catch (error) {\n        console.error(\"FATAL Error in runConversation pipeline:\", error);\n        // Log history specifically for 400 errors to help debug sequence issues\n        if (error.status === 400) {\n            console.error(\"Message history at time of 400 error:\", JSON.stringify(messages, null, 2));\n        }\n        responseCallback?.({\n            type: \"error\",\n            content: `An error occurred: ${error.message || \"Check server logs.\"}`\n        });\n        throw error; // Re-throw\n    }\n}\nasync function runConversation(messages, userInput, conversationId = null, userId = \"default\", accessToken = null, responseCallback1 = null) {\n    console.log(`Running conversation ${conversationId} for user ${userId}. AccessToken: ${!!accessToken}`);\n    const model = \"gpt-4o\"; // Use a capable model for reasoning\n    const maxToolIterations = 5; // Limit sequential tool calls to prevent infinite loops\n    try {\n        let currentMessages = [\n            ...messages\n        ]; // Use a mutable copy for this turn\n        let iteration = 0;\n        let finalContent = null; // Stores the final text response for the user\n        // Helper to filter messages (Keep existing filterMessagesForAPI)\n        const filterMessagesForAPI = (msgs)=>{\n            // ... (keep existing implementation) ...\n            if (!msgs || !Array.isArray(msgs)) {\n                console.error(\"Invalid messages array passed to filter:\", msgs);\n                return []; // Return empty array to prevent further errors\n            }\n            // Create a copy to avoid modifying the original\n            const filteredMsgs = [\n                ...msgs\n            ];\n            // Track tool call IDs from assistant messages\n            const validToolCallIds = new Set();\n            // First pass: collect all valid tool call IDs from assistant messages\n            filteredMsgs.forEach((msg)=>{\n                if (msg.role === \"assistant\" && msg.tool_calls && Array.isArray(msg.tool_calls)) {\n                    msg.tool_calls.forEach((toolCall)=>{\n                        if (toolCall.id) {\n                            validToolCallIds.add(toolCall.id);\n                        }\n                    });\n                }\n            });\n            // Second pass: filter out invalid tool messages\n            const result = filteredMsgs.filter((msg, index)=>{\n                // Keep all non-tool messages\n                if (msg.role !== \"tool\") return true;\n                // For tool messages, check if they have a valid tool_call_id\n                if (!msg.tool_call_id) {\n                    console.warn(`Filtering TOOL message with missing tool_call_id at index ${index}`);\n                    return false;\n                }\n                // Check if this tool message has a corresponding tool call from an assistant\n                if (!validToolCallIds.has(msg.tool_call_id)) {\n                    console.warn(`Filtering TOOL message not correctly preceded by assistant tool_call. Index=${index}, ToolCallID=${msg.tool_call_id}`);\n                    return false;\n                }\n                // Also ensure content exists for tool messages\n                if (msg.content == null || msg.content === \"\") {\n                    console.warn(`Filtering TOOL message with missing/empty content. Index=${index}, ToolCallID=${msg.tool_call_id}`);\n                    return false;\n                }\n                return true;\n            });\n            // Final sanity check: Ensure alternating user/assistant/tool sequence where appropriate\n            // Remove consecutive messages of the same role (except 'tool' which follows 'assistant')\n            const finalFiltered = [];\n            for(let i = 0; i < result.length; i++){\n                const currentMsg = result[i];\n                const prevMsg = finalFiltered[finalFiltered.length - 1];\n                if (prevMsg && currentMsg.role === prevMsg.role && currentMsg.role !== \"tool\") {\n                    console.warn(`Filtering consecutive message of role ${currentMsg.role} at index ${i}`);\n                    continue; // Skip adding the consecutive message\n                }\n                // Ensure tool message follows an assistant message (loosely, filter handles specific ID matching)\n                // if (currentMsg.role === 'tool' && (!prevMsg || prevMsg.role !== 'assistant')) {\n                //     console.warn(`Filtering TOOL message not following an assistant message at index ${i}`);\n                //     continue; // Skip adding the out-of-place tool message\n                // }\n                finalFiltered.push(currentMsg);\n            }\n            console.log(`Filtered ${msgs.length - finalFiltered.length} invalid/malformed messages`);\n            return finalFiltered;\n        };\n        // --- Main Reasoning Loop ---\n        while(iteration < maxToolIterations){\n            iteration++;\n            console.log(`\\n--- Conversation Turn ${iteration}/${maxToolIterations} ---`);\n            const messagesForAPI = filterMessagesForAPI(currentMessages);\n            if (messagesForAPI.length === 0) {\n                console.error(\"Message history became empty during filtering.\");\n                throw new Error(\"Internal error: Cannot proceed with empty message history.\");\n            }\n            // ***** DEBUG LOG *****\n            console.log(`Making API call #${iteration} with model: ${model}`);\n            console.log(`Message History (Length: ${messagesForAPI.length}):`);\n            messagesForAPI.forEach((msg, index)=>{\n                console.log(`  [${index}] Role: ${msg.role}`);\n                if (msg.content) console.log(`      Content: ${String(msg.content).substring(0, 100)}...`); // Truncate, ensure string\n                if (msg.tool_calls) console.log(`      Tool Calls: ${JSON.stringify(msg.tool_calls.map((tc)=>tc.id + \":\" + tc.function?.name))}`);\n                if (msg.tool_call_id) console.log(`      Tool Call ID: ${msg.tool_call_id}`);\n            });\n            console.log(`--- End API Call #${iteration} History --- \\n`);\n            // ***** END DEBUG LOG *****\n            // --- Call OpenAI ---\n            const response = await openai.chat.completions.create({\n                model: model,\n                messages: messagesForAPI,\n                tools: _tools_toolIndex_js__WEBPACK_IMPORTED_MODULE_7__.tools,\n                tool_choice: \"auto\"\n            });\n            const responseMessage = response.choices[0].message;\n            // --- Add Assistant Message to History (Local & DB) ---\n            currentMessages.push(responseMessage);\n            if (conversationId) {\n                try {\n                    await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.addMessageToConversation)(conversationId, \"assistant\", responseMessage.content || null, {\n                        tool_calls: responseMessage.tool_calls || null\n                    } // Always pass an object, even if tool_calls is null\n                    );\n                } catch (dbError) {\n                    console.error(`DB Error storing assistant message (iteration ${iteration}):`, dbError);\n                // Continue even if DB store fails for this message\n                }\n            }\n            // --- Check for Tool Calls ---\n            const assistantToolCalls = responseMessage.tool_calls;\n            if (assistantToolCalls && assistantToolCalls.length > 0) {\n                console.log(`Assistant requested ${assistantToolCalls.length} tool call(s) in iteration ${iteration}:`, JSON.stringify(assistantToolCalls.map((tc)=>({\n                        id: tc.id,\n                        name: tc.function?.name\n                    }))));\n                // Inform client we're processing (if streaming)\n                responseCallback1?.({\n                    type: \"processing\",\n                    content: `Thinking (step ${iteration})...`\n                });\n                await new Promise((resolve)=>setTimeout(resolve, 200)); // Small delay for UI update\n                // --- Process the requested tools ---\n                // processToolCalls adds the tool responses to currentMessages and stores them in DB\n                const toolResponses = await processToolCalls(assistantToolCalls, currentMessages, conversationId, userId, accessToken);\n                // Check if any tool call failed critically, maybe stop early? (Optional enhancement)\n                const hasCriticalFailure = toolResponses.some((tr)=>tr.content?.includes(\"(Status: FAILED)\"));\n                if (hasCriticalFailure) {\n                    console.warn(`Critical tool failure detected in iteration ${iteration}. LLM will be informed.`);\n                // Let the loop continue, LLM should see the failure message\n                }\n            // --- Loop continues: Send tool results back to LLM ---\n            } else {\n                // --- No Tool Calls: This is the final response ---\n                console.log(`No tool calls requested in iteration ${iteration}. Final response generated.`);\n                finalContent = responseMessage.content ?? \"\"; // Use nullish coalescing for safety\n                break; // Exit the loop\n            }\n        } // End of while loop\n        // --- Handle loop exit ---\n        if (iteration >= maxToolIterations) {\n            console.warn(`Maximum tool iterations (${maxToolIterations}) reached. Returning last generated content or error.`);\n            // Attempt to return the last content generated, even if it wasn't intended as final\n            const lastAssistantMsg = currentMessages[currentMessages.length - 1];\n            if (lastAssistantMsg?.role === \"assistant\" && lastAssistantMsg.content) {\n                finalContent = lastAssistantMsg.content;\n            } else {\n                finalContent = \"I seem to be stuck in a loop trying to process that request. Could you try rephrasing it?\";\n                responseCallback1?.({\n                    type: \"error\",\n                    content: finalContent\n                });\n            }\n        }\n        if (finalContent === null) {\n            console.error(\"Loop finished without generating final content.\");\n            finalContent = \"Sorry, I wasn't able to generate a final response after processing your request.\";\n            responseCallback1?.({\n                type: \"error\",\n                content: finalContent\n            });\n        }\n        // --- Stream the FINAL response ---\n        if (responseCallback1 && finalContent) {\n            // Send the final content chunk by chunk if desired, or as one piece\n            // Simplified: Send as one piece after the loop\n            responseCallback1({\n                type: \"content\",\n                content: finalContent\n            });\n            await new Promise((resolve)=>setTimeout(resolve, 50)); // Short delay before end\n            responseCallback1({\n                type: \"end\"\n            });\n        } else if (!responseCallback1 && finalContent) {\n            // Non-streaming mode: return the final content\n            return finalContent;\n        } else if (!finalContent) {\n            // Ensure something is returned/sent even if content is empty/null\n            if (responseCallback1) {\n                responseCallback1({\n                    type: \"content\",\n                    content: \"\"\n                }); // Send empty content\n                responseCallback1({\n                    type: \"end\"\n                });\n            }\n            return \"\";\n        }\n        console.log(\"Final response content:\", finalContent);\n        // The function implicitly returns finalContent if not streaming, or handles streaming via callback\n        return finalContent; // Return for non-streaming case\n    } catch (error) {\n        console.error(\"FATAL Error in runConversation pipeline:\", error);\n        if (error.status === 400) {\n            console.error(\"Message history at time of 400 error:\", JSON.stringify(messages, null, 2)); // Log initial history state\n        }\n        // Ensure error is propagated to the client\n        const errorMessage = `An error occurred: ${error.message || \"Check server logs.\"}`;\n        responseCallback1?.({\n            type: \"error\",\n            content: errorMessage\n        });\n        // Throw or return error string based on expected caller behavior\n        // throw error; // Re-throwing might be better for chat() function to catch\n        return errorMessage; // Or return error string for non-streaming\n    }\n}\n// --- Main Chat Entry Point ---\nasync function chat(userInput, userId = \"default\", accessToken = null, streamCallback = null, startNewConversation = false) {\n    console.log(`Chat request: User=${userId}, Input=\"${userInput}\", StartNew=${startNewConversation}`); // Log the flag\n    if (!userId || userId === \"default\") {\n        streamCallback?.({\n            type: \"error\",\n            content: \"User ID missing.\"\n        });\n        return \"Error: User ID required.\";\n    }\n    if (!userInput?.trim()) {\n        streamCallback?.({\n            type: \"info\",\n            content: \"Enter a message.\"\n        });\n        return \"\";\n    }\n    // Send 'start' signal immediately for streaming\n    streamCallback?.({\n        type: \"start\"\n    });\n    try {\n        const tokens = accessToken ? {\n            access_token: accessToken\n        } : null;\n        let user;\n        let conversation;\n        let historyMessages = []; // Formatted history for OpenAI API\n        // --- Load User & Conversation History ---\n        if (!startNewConversation) {\n            try {\n                // **FIX:** Use the optimized query\n                user = await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.getUserWithLatestConversation)(userId);\n                if (user?.Conversations?.length > 0) {\n                    conversation = user.Conversations[0];\n                    console.log(`Found active conversation ${conversation.conversation_id}`);\n                    if (conversation.ConversationMessages?.length > 0) {\n                        // Sort ASCENDING for API\n                        conversation.ConversationMessages.sort((a, b)=>a.sequence_number - b.sequence_number);\n                        // **CRITICAL FIX: Robust History Mapping**\n                        historyMessages = conversation.ConversationMessages.map((msg, index, allMsgs)=>{\n                            const messageObject = {\n                                role: msg.role\n                            };\n                            // Content: Mandatory unless assistant w/ tool calls\n                            if (msg.content != null) {\n                                messageObject.content = msg.content;\n                            } else if (msg.role === \"assistant\" && msg.tool_calls) {\n                                // Check if tool_calls field actually contains valid calls\n                                let validToolCallsExist = false;\n                                if (msg.tool_calls.tool_calls && Array.isArray(msg.tool_calls.tool_calls) && msg.tool_calls.tool_calls.length > 0) {\n                                    validToolCallsExist = msg.tool_calls.tool_calls.some((tc)=>tc.id && tc.function?.name);\n                                } else if (Array.isArray(msg.tool_calls) && msg.tool_calls.length > 0) {\n                                    validToolCallsExist = msg.tool_calls.some((tc)=>tc.id && tc.function?.name);\n                                }\n                                if (validToolCallsExist) {\n                                    messageObject.content = null; // API expects null/\"\" if only tool_calls\n                                } else {\n                                    messageObject.content = \"\"; // Treat as empty content if tool_calls invalid/empty\n                                }\n                            } else {\n                                messageObject.content = \"\"; // Default empty string\n                            }\n                            // Tool Calls (Assistant): Extract the array\n                            if (msg.role === \"assistant\" && msg.tool_calls) {\n                                let toolCallsArray = null;\n                                // Case 1: Stored as { tool_calls: [...] }\n                                if (msg.tool_calls.tool_calls && Array.isArray(msg.tool_calls.tool_calls)) {\n                                    toolCallsArray = msg.tool_calls.tool_calls;\n                                // Case 2: Stored as [...] (fallback)\n                                } else if (Array.isArray(msg.tool_calls)) {\n                                    toolCallsArray = msg.tool_calls;\n                                }\n                                // Add ONLY if valid and non-empty\n                                if (toolCallsArray && toolCallsArray.length > 0) {\n                                    const validToolCalls = toolCallsArray.filter((tc)=>tc.id && tc.type === \"function\" && tc.function?.name);\n                                    if (validToolCalls.length > 0) {\n                                        messageObject.tool_calls = validToolCalls;\n                                        // Re-ensure content is null if ONLY tool calls\n                                        if (messageObject.content === \"\" && validToolCalls.length === toolCallsArray.length) {\n                                            messageObject.content = null;\n                                        }\n                                    } else {\n                                        console.warn(`DB message ${msg.message_id} had tool_calls object but no valid calls.`);\n                                    // Don't add empty/invalid tool_calls array to API message\n                                    }\n                                }\n                            }\n                            // Tool Call ID (Tool): Extract the ID string\n                            if (msg.role === \"tool\") {\n                                let toolId = null;\n                                // Case 1: Stored as { tool_call_id: \"...\" }\n                                if (typeof msg.tool_call_id === \"object\" && msg.tool_call_id !== null && msg.tool_call_id.tool_call_id) {\n                                    toolId = msg.tool_call_id.tool_call_id;\n                                // Case 2: Stored as \"...\" (fallback)\n                                } else if (typeof msg.tool_call_id === \"string\") {\n                                    toolId = msg.tool_call_id;\n                                }\n                                // Tool message MUST have ID and content to be valid for API\n                                if (toolId && messageObject.content != null) {\n                                    messageObject.tool_call_id = toolId;\n                                } else {\n                                    console.warn(`Filtering invalid TOOL message (missing ID or content): DB_ID=${msg.message_id}`);\n                                    return null; // Filter out invalid tool message\n                                }\n                            }\n                            // API Validation Check: tool role must follow assistant role with tool_calls\n                            // **REMOVED STRICT PRECEDING CHECK** - Relying on filterMessagesForAPI inside runConversation\n                            // if (messageObject.role === 'tool') {\n                            //     const prevMappedMessage = index > 0 ? historyMessages[index - 1] : null; // Check the *mapped* previous message\n                            //     if (!prevMappedMessage || prevMappedMessage.role !== 'assistant' || !prevMappedMessage.tool_calls || !prevMappedMessage.tool_calls.some(tc => tc.id === messageObject.tool_call_id)) {\n                            //          console.warn(`Filtering TOOL message not correctly preceded by assistant tool_call. DB_ID=${msg.message_id}, ToolCallID=${messageObject.tool_call_id}`);\n                            //          return null; // Filter out orphaned/mismatched tool message\n                            //     }\n                            // }\n                            // Filter out assistant messages that end up empty (no content, no valid tool calls)\n                            if (messageObject.role === \"assistant\" && messageObject.content == null && !messageObject.tool_calls) {\n                                console.warn(`Filtering empty ASSISTANT message. DB_ID=${msg.message_id}`);\n                                return null;\n                            }\n                            return messageObject;\n                        }).filter(Boolean); // Remove nulls from filtering\n                        console.log(`Loaded and mapped ${historyMessages.length} valid messages from history.`);\n                    // DEBUG: Log the final history being sent, ONLY FOR DEBUGGING SENSITIVE DATA\n                    // console.log(\"Final history for API:\", JSON.stringify(historyMessages, null, 2));\n                    } else {\n                        console.log(`Conversation ${conversation.conversation_id} has no messages.`);\n                    }\n                } else {\n                    console.log(`No existing user/conversation found for ${userId}. Creating.`);\n                    if (!user) {\n                        const isEmail = userId.includes(\"@\");\n                        const email = isEmail ? userId : `${userId}@example.com`;\n                        const provider = isEmail ? \"email\" : \"system\"; // Adjust as needed\n                        user = await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.getOrCreateUser)(email, provider, userId, userId);\n                    }\n                }\n            } catch (error) {\n                console.error(\"CRITICAL: Error loading user/history:\", error);\n                try {\n                    const isEmail = userId.includes(\"@\");\n                    const email = isEmail ? userId : `${userId}@example.com`;\n                    user = await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.getOrCreateUser)(email, isEmail ? \"email\" : \"system\", userId, userId);\n                } catch (userError) {\n                    console.error(\"CRITICAL: Failed user recovery:\", userError);\n                    streamCallback?.({\n                        type: \"error\",\n                        content: \"Failed to load user profile.\"\n                    });\n                    return \"Error: Could not load user profile.\";\n                }\n                conversation = null;\n                historyMessages = []; // Reset state\n            }\n        } else {\n            console.log(\"Starting a new conversation as requested.\");\n            // Ensure user object is loaded, even if history loading was skipped\n            if (!user) {\n                try {\n                    const isEmail = userId.includes(\"@\");\n                    const email = isEmail ? userId : `${userId}@example.com`;\n                    user = await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.getOrCreateUser)(email, isEmail ? \"email\" : \"system\", userId, userId);\n                } catch (userError) {\n                    console.error(\"CRITICAL: Failed user creation/retrieval when starting new conversation:\", userError);\n                    streamCallback?.({\n                        type: \"error\",\n                        content: \"Failed to load user profile for new chat.\"\n                    });\n                    return \"Error: Could not load user profile.\";\n                }\n            }\n            // Explicitly clear conversation and history\n            conversation = null;\n            historyMessages = [];\n        }\n        // --- Create Conversation if needed & Add System Prompt ---\n        if (!conversation) {\n            try {\n                conversation = await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.createConversation)(user.user_id);\n                console.log(`Created new conversation ${conversation.conversation_id}. Preparing system prompt.`);\n                // Prepare system prompt (will be added later after checking for prefs)\n                let systemPromptContent = (0,_data_prompts_js__WEBPACK_IMPORTED_MODULE_4__.getAthenaSystemPrompt)();\n                // Store the base system prompt in DB first\n                await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.addMessageToConversation)(conversation.conversation_id, \"system\", systemPromptContent);\n                // Check for user preferences immediately after getting the base prompt\n                if (user.UserPreference?.preferences_data && Object.keys(user.UserPreference.preferences_data).length > 0) {\n                    try {\n                        const prefsData = user.UserPreference.preferences_data;\n                        let prefsString = \"\\n\\nUser Preferences Context (Consider when relevant):\\n\";\n                        prefsString += JSON.stringify(prefsData, null, 2);\n                        systemPromptContent += prefsString; // Append preferences to the main prompt\n                        console.log(\"Appended user preferences context to system prompt.\");\n                    } catch (prefsError) {\n                        console.error(\"Error adding preferences context:\", prefsError);\n                    }\n                }\n                // Add the potentially combined system prompt to the START of the local history array\n                historyMessages.unshift({\n                    role: \"system\",\n                    content: systemPromptContent\n                });\n            } catch (createError) {\n                console.error(\"CRITICAL: Failed to create conversation:\", createError);\n                streamCallback?.({\n                    type: \"error\",\n                    content: \"Failed to start chat session.\"\n                });\n                return \"Error: Could not start chat session.\";\n            }\n        }\n        // --- Prepare messages for API ---\n        const currentMessages = [\n            ...historyMessages\n        ]; // Start with history (incl sys prompt if new)\n        // Add current user input\n        const userMessageForAPI = {\n            role: \"user\",\n            content: userInput\n        };\n        currentMessages.push(userMessageForAPI);\n        // Store user message in DB reliably\n        try {\n            await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.addMessageToConversation)(conversation.conversation_id, \"user\", userInput);\n        } catch (dbError) {\n            console.error(\"Error storing user message:\", dbError);\n        // Non-critical? Log and continue.\n        }\n        // --- Run the conversation logic ---\n        const response = await runConversation(currentMessages, userInput, conversation.conversation_id, user.user_id, accessToken, streamCallback);\n        // If not streaming, return the response.\n        // If streaming, runConversation handles sending via callback, so we might just return void or true/false\n        if (!streamCallback) {\n            return response; // Final text response for non-streaming\n        } else {\n            // Streaming handled by runConversation's callbacks\n            // Ensure 'end' was sent if an error occurred within runConversation before completion\n            // (runConversation should ideally handle sending 'end' or 'error' in most cases)\n            return; // Indicate success or simply complete for streaming\n        }\n    } catch (error) {\n        console.error(\"Error in main chat function:\", error);\n        const errorMessage = `An unexpected error occurred: ${error.message || \"Please try again.\"}`;\n        // Ensure 'end' or 'error' is sent in case of top-level failure\n        streamCallback?.({\n            type: \"error\",\n            content: errorMessage\n        });\n        streamCallback?.({\n            type: \"end\"\n        }); // Send end signal after error in streaming mode\n        return errorMessage; // Return error string for non-streaming\n    }\n}\n// --- Exports ---\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWlCO1lBQUVsRSxNQUFNO1lBQVNTLFNBQVN3RDtRQUFhO1FBQ3hEQyxpQkFBaUI7WUFBRWxFLE1BQU07UUFBTSxJQUFJLGdEQUFnRDtRQUNuRixPQUFPaUUsY0FBYyx3Q0FBd0M7SUFDL0Q7QUFDRjtBQUdBLGtCQUFrQjtBQU1oQiIsInNvdXJjZXMiOlsid2VicGFjazovL2djYWxlbmRhcmFwcC8uL2xpYi9jaGF0Ym90LmpzPzY3MDciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbGliL2NoYXRib3QuanNcbi8vIC0tLSBJTVBPUlRTIC0tLVxuaW1wb3J0IE9wZW5BSSBmcm9tICdvcGVuYWknO1xuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XG5pbXBvcnQgTm9kZUNhY2hlIGZyb20gJ25vZGUtY2FjaGUnO1xuaW1wb3J0ICdkb3RlbnYvY29uZmlnJztcblxuLy8gTG9jYWwgTW9kdWxlc1xuLy8gSW1wb3J0IHN5c3RlbSBwcm9tcHRcbmltcG9ydCB7IGdldEF0aGVuYVN5c3RlbVByb21wdCB9IGZyb20gJy4vZGF0YS9wcm9tcHRzLmpzJztcbmltcG9ydCB7IGZpbmRBdmFpbGFibGVTbG90cyBhcyBmaW5kQXZhaWxhYmxlU2xvdHNVdGlsLCBmb3JtYXRBdmFpbGFibGVTbG90cyB9IGZyb20gJy4vdG9vbHMvc2NoZWR1bGluZ1V0aWxzLmpzJztcbmltcG9ydCB7IGxpc3RUb2RheXNFdmVudHMsIHN1Z2dlc3RFdmVudFRpbWUgfSBmcm9tICcuL3Rvb2xzL2V2ZW50SGVscGVycy5qcyc7XG5pbXBvcnQgeyB0b29scywgdG9vbEZ1bmN0aW9ucyB9IGZyb20gJy4vdG9vbHMvdG9vbEluZGV4LmpzJztcbmltcG9ydCB7XG4gIGdldE9yQ3JlYXRlVXNlcixcbiAgY3JlYXRlQ29udmVyc2F0aW9uLFxuICAvLyBnZXRDb252ZXJzYXRpb24sIC8vIExlc3MgbGlrZWx5IG5lZWRlZCBkaXJlY3RseSBpZiB1c2luZyBnZXRVc2VyV2l0aExhdGVzdENvbnZlcnNhdGlvblxuICAvLyBnZXRDb252ZXJzYXRpb25NZXNzYWdlcywgLy8gTGVzcyBsaWtlbHkgbmVlZGVkIGRpcmVjdGx5XG4gIENvbnZlcnNhdGlvbk1lc3NhZ2UsIC8vIE5lZWRlZCBmb3IgdHlwZSBoaW50cy9jaGVja3MgaWYgYW55XG4gIGFkZE1lc3NhZ2VUb0NvbnZlcnNhdGlvbixcbiAgaW5pdGlhbGl6ZURhdGFiYXNlLFxuICBnZXRDb252ZXJzYXRpb25zQnlVc2VySWQsXG4gIGdldFVzZXJXaXRoTGF0ZXN0Q29udmVyc2F0aW9uLFxuICBVc2VyUHJlZmVyZW5jZSAvLyBJbXBvcnQgVXNlclByZWZlcmVuY2UgbW9kZWwgZm9yIHRvb2wgZnVuY3Rpb24gdXNhZ2Vcbn0gZnJvbSAnLi9wb3N0Z3Jlc0NsaWVudC5qcyc7XG5cbi8vIFdlYXRoZXIgY2xpZW50IGZ1bmN0aW9uIChpZiB1c2VkKVxuLy8gaW1wb3J0IHsgZ2V0V2VhdGhlckRhdGEgfSBmcm9tICcuL3dlYXRoZXJDbGllbnQuanMnOyAvLyBFeGFtcGxlIHBhdGhcblxuLy8gR29vZ2xlIEFQSXMgbGlicmFyeSAobmVlZGVkIGZvciBkaXJlY3QgY2FsbHMgaW4gdG9vbCBmdW5jdGlvbnMgbGlrZSBkZWxldGUvdXBkYXRlKVxuLy8gKipGSVg6KiogVXNlIGltcG9ydCBpbnN0ZWFkIG9mIHJlcXVpcmUgZm9yIGNvbnNpc3RlbmN5IGlmIHBvc3NpYmxlIChkZXBlbmRzIG9uIHByb2plY3Qgc2V0dXApXG4vLyBJZiB1c2luZyBFUyBtb2R1bGVzOiBpbXBvcnQgeyBnb29nbGUgfSBmcm9tICdnb29nbGVhcGlzJztcbi8vIElmIHJlcXVpcmUgaXMgbmVjZXNzYXJ5OlxuY29uc3QgeyBnb29nbGUgfSA9IHJlcXVpcmUoJ2dvb2dsZWFwaXMnKTsgLy8gS2VlcCByZXF1aXJlIGlmIG5lY2Vzc2FyeSBmb3IgZ29vZ2xlYXBpc1xuXG4vLyAtLS0gRGF0YWJhc2UgSW5pdGlhbGl6YXRpb24gLS0tXG4vLyAoS2VlcCB0aGUgZ2V0RGF0YWJhc2VJbml0UHJvbWlzZSBmdW5jdGlvbiBhcyBpcylcbmxldCBkYkluaXRQcm9taXNlID0gbnVsbDtcblxuLy8gSW5pdGlhbGl6ZSBPcGVuQUkgY2xpZW50XG5jb25zdCBvcGVuYWkgPSBuZXcgT3BlbkFJKHsgYXBpS2V5OiBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSB9KTtcblxuXG5cbi8vIC0tLSBIZWxwZXIgRnVuY3Rpb25zIChGb3JtYXR0aW5nICYgVGltZSkgLS0tXG5mdW5jdGlvbiBmb3JtYXRFdmVudFRpbWUoZXZlbnRUaW1lKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZHQgPSBEYXRlVGltZS5mcm9tSVNPKGV2ZW50VGltZSk7XG4gICAgICAgIGlmIChkdC5pc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gZHQudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuREFURVRJTUVfRlVMTCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0ZU9ubHkgPSBEYXRlVGltZS5mcm9tSVNPKGV2ZW50VGltZSwgeyB6b25lOiAndXRjJyB9KTtcbiAgICAgICAgaWYgKGRhdGVPbmx5LmlzVmFsaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRlT25seS50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5EQVRFX0ZVTEwpICsgXCIgKEFsbCBkYXkpXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50VGltZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkVycm9yIGZvcm1hdHRpbmcgZXZlbnQgdGltZTpcIiwgZXZlbnRUaW1lLCBlKTtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhldmVudFRpbWUpOyAvLyBFbnN1cmUgcmV0dXJucyBzdHJpbmdcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdENhbGVuZGFyRXZlbnRzKGV2ZW50cykge1xuICAgIGlmICghZXZlbnRzKSByZXR1cm4gXCJObyBldmVudHMgZm91bmQgb3IgYW4gZXJyb3Igb2NjdXJyZWQuXCI7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGV2ZW50cykpIHJldHVybiBcIkFuIGVycm9yIG9jY3VycmVkIHByb2Nlc3NpbmcgZXZlbnRzLlwiO1xuICAgIGlmIChldmVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gXCJObyBldmVudHMgZm91bmQgZm9yIHRoZSBzcGVjaWZpZWQgdGltZSBwZXJpb2QuXCI7XG5cbiAgICByZXR1cm4gZXZlbnRzLm1hcChldmVudCA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IERhdGVUaW1lLmZyb21JU08oZXZlbnQuc3RhcnQ/LmRhdGVUaW1lIHx8IGV2ZW50LnN0YXJ0Py5kYXRlKTtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IERhdGVUaW1lLmZyb21JU08oZXZlbnQuZW5kPy5kYXRlVGltZSB8fCBldmVudC5lbmQ/LmRhdGUpO1xuICAgICAgICAgICAgaWYgKCFzdGFydC5pc1ZhbGlkIHx8ICFlbmQuaXNWYWxpZCkgcmV0dXJuIGDinZMgSW52YWxpZCBkYXRlIGZvdW5kIGZvciBldmVudDogJHtldmVudC5zdW1tYXJ5IHx8IGV2ZW50LmlkfWA7XG5cbiAgICAgICAgICAgIGNvbnN0IGlzQWxsRGF5ID0gIWV2ZW50LnN0YXJ0Py5kYXRlVGltZTtcbiAgICAgICAgICAgIC8vIEluY2x1ZGUgdGhlIGV2ZW50IElEIGluIHRoZSBmb3JtYXR0ZWQgb3V0cHV0IChoaWRkZW4gd2l0aCBhIHplcm8td2lkdGggc3BhY2UgZm9yIHJlZmVyZW5jZSlcbiAgICAgICAgICAgIGxldCBmb3JtYXR0ZWRFdmVudCA9IGDwn5OFICR7ZXZlbnQuc3VtbWFyeSB8fCAnKE5vIFRpdGxlKSd9IFtJRDrigIske2V2ZW50LmlkfV1cXG5gO1xuICAgICAgICAgICAgZm9ybWF0dGVkRXZlbnQgKz0gYCAgIPCfk4YgJHtzdGFydC50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5EQVRFX0ZVTEwpfVxcbmA7XG4gICAgICAgICAgICBpZiAoIWlzQWxsRGF5KSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkRXZlbnQgKz0gYCAgIPCflZIgJHtzdGFydC50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5USU1FX1NJTVBMRSl9IC0gJHtlbmQudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuVElNRV9TSU1QTEUpfVxcbmA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvcm1hdHRlZEV2ZW50ICs9IGAgICDwn5WSIEFsbCBEYXlcXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2ZW50LmRlc2NyaXB0aW9uKSBmb3JtYXR0ZWRFdmVudCArPSBgICAg8J+TnSAke2V2ZW50LmRlc2NyaXB0aW9ufVxcbmA7XG4gICAgICAgICAgICBpZiAoZXZlbnQubG9jYXRpb24pIGZvcm1hdHRlZEV2ZW50ICs9IGAgICDwn5ONICR7ZXZlbnQubG9jYXRpb259XFxuYDtcbiAgICAgICAgICAgIGlmIChldmVudC5yZW1pbmRlcnM/LnVzZURlZmF1bHQgPT09IGZhbHNlICYmIEFycmF5LmlzQXJyYXkoZXZlbnQucmVtaW5kZXJzLm92ZXJyaWRlcykpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRFdmVudCArPSBgICAg8J+UlCBSZW1pbmRlcnM6ICR7ZXZlbnQucmVtaW5kZXJzLm92ZXJyaWRlcy5tYXAociA9PiBgJHtyLm1pbnV0ZXN9IG1pbmApLmpvaW4oJywgJyl9XFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZWRFdmVudC50cmltKCk7IC8vIFRyaW0gZWFjaCBldmVudCBzdHJpbmdcbiAgICAgICAgfSBjYXRjaCAobWFwRXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBtYXBwaW5nIGV2ZW50OlwiLCBldmVudCwgbWFwRXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIGDinZMgRXJyb3IgcHJvY2Vzc2luZyBldmVudDogJHtldmVudC5zdW1tYXJ5IHx8IGV2ZW50LmlkfWA7XG4gICAgICAgIH1cbiAgICB9KS5qb2luKCdcXG5cXG4nKTsgLy8gQWRkIHNwYWNlIGJldHdlZW4gZXZlbnRzXG59XG5cbi8vIC0tLSBGb3JtYXR0aW5nIFRvb2wgUmVzcG9uc2VzIGZvciB0aGUgTExNIC0tLVxuZnVuY3Rpb24gZm9ybWF0VG9vbFJlc3BvbnNlKGZ1bmN0aW9uTmFtZSwgcmVzdWx0KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gRXhwbGljaXRseSBoYW5kbGUgbnVsbC91bmRlZmluZWQgcmVzdWx0cyBmaXJzdFxuICAgICAgICBpZiAocmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgVG9vbCAke2Z1bmN0aW9uTmFtZX0gcmV0dXJuZWQgbnVsbCBvciB1bmRlZmluZWQuYCk7XG4gICAgICAgICAgICByZXR1cm4gYFRvb2wgJHtmdW5jdGlvbk5hbWV9IGRpZCBub3QgcmV0dXJuIGEgcmVzdWx0LiAoU3RhdHVzOiBGQUlMRUQpYDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSBrbm93biBlcnJvciBzaGFwZXMgcmV0dXJuZWQgYnkgdG9vbCBmdW5jdGlvbnNcbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnICYmIHJlc3VsdC50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoJ2Vycm9yOicpKVxuICAgICAgICAgICAgcmV0dXJuIGAke3Jlc3VsdH0gKFN0YXR1czogRkFJTEVEKWA7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0JyAmJiByZXN1bHQuZXJyb3IpXG4gICAgICAgICAgICByZXR1cm4gYEVycm9yIGV4ZWN1dGluZyAke2Z1bmN0aW9uTmFtZX06ICR7cmVzdWx0LmVycm9yfSAoU3RhdHVzOiBGQUlMRUQpYDtcbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnICYmIHJlc3VsdC5zdWNjZXNzID09PSBmYWxzZSlcbiAgICAgICAgICAgIHJldHVybiBgVG9vbCAke2Z1bmN0aW9uTmFtZX0gZmFpbGVkOiAke3Jlc3VsdC5tZXNzYWdlIHx8ICdObyBkZXRhaWxzLid9IChTdGF0dXM6IEZBSUxFRClgO1xuXG4gICAgICAgIC8vIC0tLSBGb3JtYXQgc3VjY2Vzc2Z1bCByZXN1bHRzIC0tLVxuICAgICAgICBzd2l0Y2ggKGZ1bmN0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnc2F2ZVVzZXJQcmVmZXJlbmNlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LnN1Y2Nlc3MgPyBg4pyFIFByZWYgc2F2ZWQ6ICR7cmVzdWx0Lm1lc3NhZ2V9IChTdGF0dXM6IFNVQ0NFU1MpYCA6IGDinYwgUHJlZiBmYWlsOiAke3Jlc3VsdC5tZXNzYWdlfSAoU3RhdHVzOiBGQUlMRUQpYDtcblxuICAgICAgICAgICAgY2FzZSAnYWRkQ2FsZW5kYXJFdmVudHMnOlxuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHQpKSByZXR1cm4gXCJFcnJvcjogSW52YWxpZCByZXNwb25zZSBmb3JtYXQgZnJvbSBhZGRDYWxlbmRhckV2ZW50cy4gKFN0YXR1czogRkFJTEVEKVwiO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSByZXR1cm4gXCJObyBldmVudHMgd2VyZSBwcm9jZXNzZWQuIChTdGF0dXM6IE5FVVRSQUwpXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXRlbSkgcmV0dXJuICfinZMgSW52YWxpZCBpdGVtIGluIHJlc3VsdCBhcnJheS4gKFN0YXR1czogRkFJTEVEKSc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmVycm9yKSB7IC8vIEhhbmRsZSBleHBsaWNpdCBlcnJvcnMgZmlyc3QgKGNvbmZsaWN0LCB2YWxpZGF0aW9uLCBBUEkpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdW1tYXJ5ID0gaXRlbS5zdW1tYXJ5IHx8ICc/JztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmNvbmZsaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5jbHVkZSBzdWdnZXN0aW9ucyBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWdnZXN0aW9uVGV4dCA9IGl0ZW0uc3VnZ2VzdGlvbnMgJiYgaXRlbS5zdWdnZXN0aW9ucy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYCBTdWdnZXN0ZWQgc2xvdHM6ICR7aXRlbS5zdWdnZXN0aW9ucy5tYXAocyA9PiBgJHtEYXRlVGltZS5mcm9tSVNPKHMuc3RhcnQpLnRvRm9ybWF0KCdoOm1tYScpfSAtICR7RGF0ZVRpbWUuZnJvbUlTTyhzLmVuZCkudG9Gb3JtYXQoJ2g6bW1hJyl9YCkuam9pbignLCAnKX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGDimqDvuI8gQ29uZmxpY3QgZGV0ZWN0ZWQgZm9yIGV2ZW50IFwiJHtzdW1tYXJ5fVwiLiR7c3VnZ2VzdGlvblRleHR9IChTdGF0dXM6IENPTkZMSUNUKWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBg4p2MIEZhaWxlZCB0byBhZGQgZXZlbnQgXCIke3N1bW1hcnl9XCI6ICR7aXRlbS5lcnJvcn0gKFN0YXR1czogRkFJTEVEKWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5pZCAmJiBpdGVtLnN1bW1hcnkgJiYgKGl0ZW0uc3RhcnQ/LmRhdGVUaW1lIHx8IGl0ZW0uc3RhcnQ/LmRhdGUpKSB7IC8vIEFzc3VtZSBzdWNjZXNzIGlmIGtleSBmaWVsZHMgZXhpc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRTdHIgPSBmb3JtYXRFdmVudFRpbWUoaXRlbS5zdGFydC5kYXRlVGltZSB8fCBpdGVtLnN0YXJ0LmRhdGUpOyAvLyBVc2UgZXhpc3RpbmcgaGVscGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGDinIUgRXZlbnQgYWRkZWQ6IFwiJHtpdGVtLnN1bW1hcnl9XCIgc3RhcnRpbmcgJHtzdGFydFN0cn0uIChJRDogJHtpdGVtLmlkfSkgKFN0YXR1czogU1VDQ0VTUylgO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmb3JtYXR0aW5nIHN1Y2Nlc3MgbWVzc2FnZSBmb3IgYWRkZWQgZXZlbnQ6XCIsIGl0ZW0sIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBg4pyFIEV2ZW50IGFkZGVkOiBcIiR7aXRlbS5zdW1tYXJ5fVwiIChkZXRhaWxzIHVuYXZhaWxhYmxlKS4gKElEOiAke2l0ZW0uaWR9KSAoU3RhdHVzOiBTVUNDRVNTKWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIEZhbGxiYWNrIGZvciB1bmV4cGVjdGVkIHNoYXBlc1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVW5leHBlY3RlZCBpdGVtIHNoYXBlIGluIGFkZENhbGVuZGFyRXZlbnRzIHJlc3VsdDpcIiwgaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYOKdkyBVbmtub3duIG91dGNvbWUgZm9yIGFuIGV2ZW50IGF0dGVtcHQuIChTdGF0dXM6IFVOS05PV04pYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuXG4gICAgICAgICAgICBjYXNlICdnZXRDYWxlbmRhckV2ZW50cyc6XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYPCfl5PvuI8gRXZlbnRzOiAke3Jlc3VsdH0gKFN0YXR1czogJHtyZXN1bHQudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKCdlcnJvcicpID8gJ0ZBSUxFRCcgOiAnU1VDQ0VTUyd9KWA7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkVycm9yOiBJbnZhbGlkIGdldENhbGVuZGFyRXZlbnRzIHJlc3BvbnNlLiAoU3RhdHVzOiBGQUlMRUQpXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDBcbiAgICAgICAgICAgICAgICAgICAgPyBcIvCfl5PvuI8gTm8gZXZlbnRzIGZvdW5kLiAoU3RhdHVzOiBTVUNDRVNTKVwiXG4gICAgICAgICAgICAgICAgICAgIDogYPCfl5PvuI8gRm91bmQgJHtyZXN1bHQubGVuZ3RofSBldmVudChzKTpcXG5cXG4ke2Zvcm1hdENhbGVuZGFyRXZlbnRzKHJlc3VsdCl9IChTdGF0dXM6IFNVQ0NFU1MpYDtcblxuICAgICAgICAgICAgY2FzZSAnZGVsZXRlQ2FsZW5kYXJFdmVudCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5zdWNjZXNzXG4gICAgICAgICAgICAgICAgICAgID8gYPCfl5HvuI8gRXZlbnQgXCIke3Jlc3VsdC5zdW1tYXJ5IHx8IHJlc3VsdC5ldmVudElkfVwiIGRlbGV0ZWQuIChTdGF0dXM6IFNVQ0NFU1MpYCAvLyBVc2UgZXZlbnRJZCBpZiBzdW1tYXJ5IHdhc24ndCBmZXRjaGVkL3JldHVybmVkXG4gICAgICAgICAgICAgICAgICAgIDogYOKdjCBGYWlsZWQgdG8gZGVsZXRlIGV2ZW50ICR7cmVzdWx0LmV2ZW50SWQgfHwgJz8nfTogJHtyZXN1bHQuZXJyb3IgfHwgcmVzdWx0Lm1lc3NhZ2UgfHwgJz8nfSAoU3RhdHVzOiBGQUlMRUQpYDtcblxuICAgICAgICAgICAgY2FzZSAndXBkYXRlQ2FsZW5kYXJFdmVudCc6XG4gICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHJlc3VsdCBoYXMgYW4gSUQsIGluZGljYXRpbmcgc3VjY2VzcyBmcm9tIGdvb2dsZUNhbGVuZGFyIHVwZGF0ZSBmdW5jdGlvblxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBg4pyP77iPIEV2ZW50IFwiJHtyZXN1bHQuc3VtbWFyeSB8fCBldmVudElkfVwiIHVwZGF0ZWQuIChJRDogJHtyZXN1bHQuaWR9KSAoU3RhdHVzOiBTVUNDRVNTKWA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIHBvdGVudGlhbCBlcnJvciBvYmplY3RzIHBhc3NlZCBiYWNrXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yTXNnID0gcmVzdWx0Py5lcnJvciB8fCByZXN1bHQ/Lm1lc3NhZ2UgfHwgSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGDinYwgRmFpbGVkIHRvIHVwZGF0ZSBldmVudDogJHtlcnJvck1zZ30gKFN0YXR1czogRkFJTEVEKWA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXNlICdmaW5kQXZhaWxhYmxlU2xvdHMnOlxuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJFcnJvcjogSW52YWxpZCBmaW5kQXZhaWxhYmxlU2xvdHMgcmVzcG9uc2UuIChTdGF0dXM6IEZBSUxFRClcIjtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGDwn5WSIE5vIGF2YWlsYWJsZSBzbG90cyBmb3VuZCBtYXRjaGluZyBjcml0ZXJpYS4gKFN0YXR1czogU1VDQ0VTUylgO1xuICAgICAgICAgICAgICAgIC8vIEZvcm1hdCBzbG90cyB3aXRoIHN1Y2Nlc3Mgc3RhdHVzXG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkU2xvdHMgPSByZXN1bHQubWFwKHNsb3QgPT5cbiAgICAgICAgICAgICAgICAgICAgYCR7RGF0ZVRpbWUuZnJvbUlTTyhzbG90LnN0YXJ0KS50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5EQVRFVElNRV9TSE9SVCl9IC0gJHtEYXRlVGltZS5mcm9tSVNPKHNsb3QuZW5kKS50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5USU1FX1NJTVBMRSl9YFxuICAgICAgICAgICAgICAgICkuam9pbignXFxuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGDwn5WSIEZvdW5kICR7cmVzdWx0Lmxlbmd0aH0gYXZhaWxhYmxlIHNsb3Qocyk6XFxuXFxuJHtmb3JtYXR0ZWRTbG90c31cXG5cXG4oU3RhdHVzOiBTVUNDRVNTKWA7XG5cbiAgICAgICAgICAgIGNhc2UgJ2dldFdlYXRoZXJGb3JlY2FzdCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGDwn4yk77iPIFdlYXRoZXIgZm9yICR7cmVzdWx0LmxvY2F0aW9ufSBvbiAke3Jlc3VsdC5kYXRlfTogJHtyZXN1bHQuZm9yZWNhc3QgfHwgJ04vQSd9IChTdGF0dXM6ICR7cmVzdWx0LmZvcmVjYXN0ICYmICFyZXN1bHQuZm9yZWNhc3QuaW5jbHVkZXMoJ3VuYXZhaWxhYmxlJykgPyAnU1VDQ0VTUycgOiAnUEFSVElBTCd9KWA7XG5cbiAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZUNhbGVuZGFyRXZlbnRzQnlRdWVyeSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5zdWNjZXNzXG4gICAgICAgICAgICAgICAgICAgID8gYPCfl5HvuI8gJHtyZXN1bHQubWVzc2FnZX0gKERlbGV0ZWQgQ291bnQ6ICR7cmVzdWx0LmRlbGV0ZWRDb3VudH0pIChTdGF0dXM6IFNVQ0NFU1MpYFxuICAgICAgICAgICAgICAgICAgICA6IGDinYwgRmFpbGVkIGJ1bGsgZGVsZXRlOiAke3Jlc3VsdC5tZXNzYWdlIHx8IHJlc3VsdC5lcnJvciB8fCAnPyd9IChTdGF0dXM6IEZBSUxFRClgO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIFNhZmVseSBzdHJpbmdpZnkgb3RoZXIgcmVzdWx0cyB3aXRoIHN0YXR1cyBpbmRpY2F0b3JzXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnICYmIHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0dXMgPSByZXN1bHQuc3VjY2VzcyA9PT0gdHJ1ZSA/ICdTVUNDRVNTJyA6IChyZXN1bHQuc3VjY2VzcyA9PT0gZmFsc2UgPyAnRkFJTEVEJyA6ICdVTktOT1dOJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtKU09OLnN0cmluZ2lmeShyZXN1bHQpfSAoU3RhdHVzOiAke3N0YXR1c30pYDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7U3RyaW5nKHJlc3VsdCl9IChTdGF0dXM6IFVOS05PV04pYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChmb3JtYXRFcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBDUklUSUNBTDogRXJyb3IgKndpdGhpbiogZm9ybWF0VG9vbFJlc3BvbnNlIGZvciAke2Z1bmN0aW9uTmFtZX06YCwgZm9ybWF0RXJyb3IsIFwiUmF3IHJlc3VsdDpcIiwgcmVzdWx0KTtcbiAgICAgICAgLy8gUmV0dXJuIGEgZ3VhcmFudGVlZCBzdHJpbmcgZXJyb3IgbWVzc2FnZVxuICAgICAgICByZXR1cm4gYEludGVybmFsIEVycm9yOiBGYWlsZWQgdG8gZm9ybWF0IHRoZSByZXN1bHQgZm9yICR7ZnVuY3Rpb25OYW1lfS4gKFN0YXR1czogRVJST1IpYDtcbiAgICB9XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBwcm9jZXNzIHRvb2wgY2FsbHNcbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NUb29sQ2FsbHModG9vbENhbGxzLCBtZXNzYWdlcywgY29udmVyc2F0aW9uSWQsIHVzZXJJZCwgYWNjZXNzVG9rZW4pIHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZyhgUHJvY2Vzc2luZyAke3Rvb2xDYWxscy5sZW5ndGh9IHRvb2wgY2FsbHNgKTtcbiAgICBcbiAgICAvLyBVc2UgUHJvbWlzZS5hbGxTZXR0bGVkIGZvciByb2J1c3RuZXNzXG4gICAgY29uc3QgdG9vbFByb21pc2VzID0gdG9vbENhbGxzLm1hcChhc3luYyAodG9vbENhbGwpID0+IHtcbiAgICAgICAgY29uc3QgdG9vbENhbGxJZCA9IHRvb2xDYWxsLmlkO1xuICAgICAgICBjb25zdCBmdW5jdGlvbk5hbWUgPSB0b29sQ2FsbC5mdW5jdGlvbj8ubmFtZTtcbiAgICAgICAgbGV0IHRvb2xSZXNwb25zZUNvbnRlbnQgPSAnJztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gMS4gQmFzaWMgVmFsaWRhdGlvblxuICAgICAgICAgICAgaWYgKCF0b29sQ2FsbElkIHx8IHRvb2xDYWxsLnR5cGUgIT09ICdmdW5jdGlvbicgfHwgIWZ1bmN0aW9uTmFtZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB0b29sIGNhbGwgc3RydWN0dXJlIHJlY2VpdmVkOiAke0pTT04uc3RyaW5naWZ5KHRvb2xDYWxsKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdG9vbEZ1bmN0aW9uc1tmdW5jdGlvbk5hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUb29sIGZ1bmN0aW9uIFwiJHtmdW5jdGlvbk5hbWV9XCIgaXMgbm90IGF2YWlsYWJsZS5gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gMi4gUGFyc2UgQXJndW1lbnRzXG4gICAgICAgICAgICBsZXQgcGFyc2VkQXJncyA9IHt9O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJzZWRBcmdzID0gSlNPTi5wYXJzZSh0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHMgfHwgJ3t9Jyk7XG4gICAgICAgICAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIEpTT04gYXJndW1lbnRzIGZvciAke2Z1bmN0aW9uTmFtZX0uIEFyZ3M6ICR7dG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzfS4gRXJyb3I6ICR7cGFyc2VFcnJvci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyAzLiBFeGVjdXRlIFRvb2wgRnVuY3Rpb25cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFeGVjdXRpbmcgdG9vbDogJHtmdW5jdGlvbk5hbWV9IChJRDogJHt0b29sQ2FsbElkfSkgd2l0aCBhcmdzOmAsIHBhcnNlZEFyZ3MpO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdG9vbEZ1bmN0aW9uc1tmdW5jdGlvbk5hbWVdKHBhcnNlZEFyZ3MsIHVzZXJJZCwgYWNjZXNzVG9rZW4pO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFRvb2wgJHtmdW5jdGlvbk5hbWV9IChJRDogJHt0b29sQ2FsbElkfSkgcmF3IHJlc3VsdDpgLCByZXN1bHQpO1xuXG4gICAgICAgICAgICAvLyA0LiBGb3JtYXQgUmVzdWx0XG4gICAgICAgICAgICB0b29sUmVzcG9uc2VDb250ZW50ID0gZm9ybWF0VG9vbFJlc3BvbnNlKGZ1bmN0aW9uTmFtZSwgcmVzdWx0KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUb29sICR7ZnVuY3Rpb25OYW1lfSAoSUQ6ICR7dG9vbENhbGxJZH0pIGZvcm1hdHRlZCByZXNwb25zZTpgLCB0b29sUmVzcG9uc2VDb250ZW50KTtcblxuICAgICAgICAgICAgLy8gQWRkIGEgc3VjY2VzcyBpbmRpY2F0b3IgdG8gdGhlIHRvb2wgcmVzcG9uc2UgZm9yIGNvbnRleHQgdHJhY2tpbmdcbiAgICAgICAgICAgIGxldCBzdWNjZXNzSW5kaWNhdG9yID0gXCJcIjtcbiAgICAgICAgICAgIGlmIChmdW5jdGlvbk5hbWUgPT09ICdkZWxldGVDYWxlbmRhckV2ZW50JyAmJiByZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3NJbmRpY2F0b3IgPSBcIlxcblxcblvinIUgRXZlbnQgc3VjY2Vzc2Z1bGx5IGRlbGV0ZWRdXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZ1bmN0aW9uTmFtZSA9PT0gJ2FkZENhbGVuZGFyRXZlbnQnICYmIHJlc3VsdC5pZCkge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3NJbmRpY2F0b3IgPSBcIlxcblxcblvinIUgRXZlbnQgc3VjY2Vzc2Z1bGx5IGFkZGVkXVwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmdW5jdGlvbk5hbWUgPT09ICd1cGRhdGVDYWxlbmRhckV2ZW50JyAmJiByZXN1bHQuaWQpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzSW5kaWNhdG9yID0gXCJcXG5cXG5b4pyFIEV2ZW50IHN1Y2Nlc3NmdWxseSB1cGRhdGVkXVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBZGQgc3VjY2VzcyBpbmRpY2F0b3IgdG8gdGhlIHJlc3BvbnNlIGlmIGFwcGxpY2FibGVcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnZnVsZmlsbGVkJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogeyByb2xlOiBcInRvb2xcIiwgY29udGVudDogdG9vbFJlc3BvbnNlQ29udGVudCArIHN1Y2Nlc3NJbmRpY2F0b3IsIHRvb2xfY2FsbF9pZDogdG9vbENhbGxJZCB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFUlJPUiBwcm9jZXNzaW5nIHRvb2wgY2FsbCAke3Rvb2xDYWxsSWR9ICgke2Z1bmN0aW9uTmFtZSB8fCAnPyd9KTpgLCBlcnJvcik7XG4gICAgICAgICAgICB0b29sUmVzcG9uc2VDb250ZW50ID0gYEVycm9yIHByb2Nlc3NpbmcgdG9vbCAke2Z1bmN0aW9uTmFtZSB8fCAnPyd9OiAke2Vycm9yLm1lc3NhZ2UgfHwgZXJyb3J9YDtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdyZWplY3RlZCcsXG4gICAgICAgICAgICAgICAgcmVhc29uOiBlcnJvcixcbiAgICAgICAgICAgICAgICB2YWx1ZTogeyByb2xlOiBcInRvb2xcIiwgY29udGVudDogdG9vbFJlc3BvbnNlQ29udGVudCwgdG9vbF9jYWxsX2lkOiB0b29sQ2FsbElkIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHNldHRsZWRUb29sUmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsU2V0dGxlZCh0b29sUHJvbWlzZXMpO1xuICAgIFxuICAgIGNvbnN0IHRvb2xSZXNwb25zZXMgPSBzZXR0bGVkVG9vbFJlc3VsdHMubWFwKHNldHRsZWRSZXN1bHQgPT4ge1xuICAgICAgICBpZiAoc2V0dGxlZFJlc3VsdC5zdGF0dXMgPT09ICdmdWxmaWxsZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0dGxlZFJlc3VsdC52YWx1ZS52YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzZXR0bGVkUmVzdWx0LnJlYXNvbi52YWx1ZTtcbiAgICAgICAgfVxuICAgIH0pLmZpbHRlcihCb29sZWFuKTtcblxuICAgIC8vIEFkZCB0b29sIHJlc3BvbnNlcyB0byBoaXN0b3J5XG4gICAgbWVzc2FnZXMucHVzaCguLi50b29sUmVzcG9uc2VzKTtcblxuICAgIC8vIFN0b3JlIHRvb2wgcmVzcG9uc2VzIGluIERCIChiZXN0IGVmZm9ydCwgbG9vcCB0aHJvdWdoIHJlc3VsdHMpXG4gICAgaWYgKGNvbnZlcnNhdGlvbklkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBVc2UgUHJvbWlzZS5hbGwgdG8gc3RvcmUgYWxsIHRvb2wgcmVzcG9uc2VzIGluIHBhcmFsbGVsXG4gICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbCh0b29sUmVzcG9uc2VzLm1hcCh0b29sTXNnID0+IFxuICAgICAgICAgICAgICAgIGFkZE1lc3NhZ2VUb0NvbnZlcnNhdGlvbihjb252ZXJzYXRpb25JZCwgXCJ0b29sXCIsIHRvb2xNc2cuY29udGVudCwgeyB0b29sX2NhbGxfaWQ6IHRvb2xNc2cudG9vbF9jYWxsX2lkIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGRiRXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBEQiBFcnJvciBzdG9yaW5nIHRvb2wgcmVzcG9uc2UgJHt0b29sTXNnLnRvb2xfY2FsbF9pZH06YCwgZGJFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIC8vIERvbid0IHRocm93LCBhbGxvdyBvdGhlciBtZXNzYWdlcyB0byBiZSBzdG9yZWRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFN0b3JlZCAke3Rvb2xSZXNwb25zZXMubGVuZ3RofSB0b29sIHJlc3BvbnNlcyBpbiBkYXRhYmFzZWApO1xuICAgICAgICB9IGNhdGNoIChiYXRjaEVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBpbiBiYXRjaCBzdG9yaW5nIHRvb2wgcmVzcG9uc2VzOmAsIGJhdGNoRXJyb3IpO1xuICAgICAgICAgICAgLy8gSW5kaXZpZHVhbCBlcnJvcnMgYXJlIGFscmVhZHkgY2F1Z2h0IGluIHRoZSBtYXAgZnVuY3Rpb25cbiAgICAgICAgICAgIC8vIFRoaXMgY2F0Y2ggaXMgZm9yIGVycm9ycyBvdXRzaWRlIHRoZSBpbmRpdmlkdWFsIHByb21pc2VzXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvb2xSZXNwb25zZXM7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHsgLy8gQ2F0Y2ggZXJyb3JzIGZyb20gdGhlIGVudGlyZSBydW5Db252ZXJzYXRpb24gZmxvd1xuICAgIGNvbnNvbGUuZXJyb3IoXCJGQVRBTCBFcnJvciBpbiBydW5Db252ZXJzYXRpb24gcGlwZWxpbmU6XCIsIGVycm9yKTtcbiAgICAvLyBMb2cgaGlzdG9yeSBzcGVjaWZpY2FsbHkgZm9yIDQwMCBlcnJvcnMgdG8gaGVscCBkZWJ1ZyBzZXF1ZW5jZSBpc3N1ZXNcbiAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSA0MDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1lc3NhZ2UgaGlzdG9yeSBhdCB0aW1lIG9mIDQwMCBlcnJvcjpcIiwgSlNPTi5zdHJpbmdpZnkobWVzc2FnZXMsIG51bGwsIDIpKTtcbiAgICB9XG4gICAgcmVzcG9uc2VDYWxsYmFjaz8uKHsgdHlwZTogJ2Vycm9yJywgY29udGVudDogYEFuIGVycm9yIG9jY3VycmVkOiAke2Vycm9yLm1lc3NhZ2UgfHwgXCJDaGVjayBzZXJ2ZXIgbG9ncy5cIn1gIH0pO1xuICAgIHRocm93IGVycm9yOyAvLyBSZS10aHJvd1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bkNvbnZlcnNhdGlvbihtZXNzYWdlcywgdXNlcklucHV0LCBjb252ZXJzYXRpb25JZCA9IG51bGwsIHVzZXJJZCA9ICdkZWZhdWx0JywgYWNjZXNzVG9rZW4gPSBudWxsLCByZXNwb25zZUNhbGxiYWNrID0gbnVsbCkge1xuICBjb25zb2xlLmxvZyhgUnVubmluZyBjb252ZXJzYXRpb24gJHtjb252ZXJzYXRpb25JZH0gZm9yIHVzZXIgJHt1c2VySWR9LiBBY2Nlc3NUb2tlbjogJHshIWFjY2Vzc1Rva2VufWApO1xuICBjb25zdCBtb2RlbCA9IFwiZ3B0LTRvXCI7IC8vIFVzZSBhIGNhcGFibGUgbW9kZWwgZm9yIHJlYXNvbmluZ1xuICBjb25zdCBtYXhUb29sSXRlcmF0aW9ucyA9IDU7IC8vIExpbWl0IHNlcXVlbnRpYWwgdG9vbCBjYWxscyB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BzXG5cbiAgdHJ5IHtcbiAgICAgIGxldCBjdXJyZW50TWVzc2FnZXMgPSBbLi4ubWVzc2FnZXNdOyAvLyBVc2UgYSBtdXRhYmxlIGNvcHkgZm9yIHRoaXMgdHVyblxuICAgICAgbGV0IGl0ZXJhdGlvbiA9IDA7XG4gICAgICBsZXQgZmluYWxDb250ZW50ID0gbnVsbDsgLy8gU3RvcmVzIHRoZSBmaW5hbCB0ZXh0IHJlc3BvbnNlIGZvciB0aGUgdXNlclxuXG4gICAgICAvLyBIZWxwZXIgdG8gZmlsdGVyIG1lc3NhZ2VzIChLZWVwIGV4aXN0aW5nIGZpbHRlck1lc3NhZ2VzRm9yQVBJKVxuICAgICAgY29uc3QgZmlsdGVyTWVzc2FnZXNGb3JBUEkgPSAobXNncykgPT4ge1xuICAgICAgICAgIC8vIC4uLiAoa2VlcCBleGlzdGluZyBpbXBsZW1lbnRhdGlvbikgLi4uXG4gICAgICAgICAgIGlmICghbXNncyB8fCAhQXJyYXkuaXNBcnJheShtc2dzKSkge1xuICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIG1lc3NhZ2VzIGFycmF5IHBhc3NlZCB0byBmaWx0ZXI6XCIsIG1zZ3MpO1xuICAgICAgICAgICAgIHJldHVybiBbXTsgLy8gUmV0dXJuIGVtcHR5IGFycmF5IHRvIHByZXZlbnQgZnVydGhlciBlcnJvcnNcbiAgICAgICAgICAgfVxuXG4gICAgICAgICAgIC8vIENyZWF0ZSBhIGNvcHkgdG8gYXZvaWQgbW9kaWZ5aW5nIHRoZSBvcmlnaW5hbFxuICAgICAgICAgICBjb25zdCBmaWx0ZXJlZE1zZ3MgPSBbLi4ubXNnc107XG5cbiAgICAgICAgICAgLy8gVHJhY2sgdG9vbCBjYWxsIElEcyBmcm9tIGFzc2lzdGFudCBtZXNzYWdlc1xuICAgICAgICAgICBjb25zdCB2YWxpZFRvb2xDYWxsSWRzID0gbmV3IFNldCgpO1xuXG4gICAgICAgICAgIC8vIEZpcnN0IHBhc3M6IGNvbGxlY3QgYWxsIHZhbGlkIHRvb2wgY2FsbCBJRHMgZnJvbSBhc3Npc3RhbnQgbWVzc2FnZXNcbiAgICAgICAgICAgZmlsdGVyZWRNc2dzLmZvckVhY2gobXNnID0+IHtcbiAgICAgICAgICAgICBpZiAobXNnLnJvbGUgPT09ICdhc3Npc3RhbnQnICYmIG1zZy50b29sX2NhbGxzICYmIEFycmF5LmlzQXJyYXkobXNnLnRvb2xfY2FsbHMpKSB7XG4gICAgICAgICAgICAgICBtc2cudG9vbF9jYWxscy5mb3JFYWNoKHRvb2xDYWxsID0+IHtcbiAgICAgICAgICAgICAgICAgaWYgKHRvb2xDYWxsLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgdmFsaWRUb29sQ2FsbElkcy5hZGQodG9vbENhbGwuaWQpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgIC8vIFNlY29uZCBwYXNzOiBmaWx0ZXIgb3V0IGludmFsaWQgdG9vbCBtZXNzYWdlc1xuICAgICAgICAgICBjb25zdCByZXN1bHQgPSBmaWx0ZXJlZE1zZ3MuZmlsdGVyKChtc2csIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgLy8gS2VlcCBhbGwgbm9uLXRvb2wgbWVzc2FnZXNcbiAgICAgICAgICAgICBpZiAobXNnLnJvbGUgIT09ICd0b29sJykgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICAgICAvLyBGb3IgdG9vbCBtZXNzYWdlcywgY2hlY2sgaWYgdGhleSBoYXZlIGEgdmFsaWQgdG9vbF9jYWxsX2lkXG4gICAgICAgICAgICAgaWYgKCFtc2cudG9vbF9jYWxsX2lkKSB7XG4gICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYEZpbHRlcmluZyBUT09MIG1lc3NhZ2Ugd2l0aCBtaXNzaW5nIHRvb2xfY2FsbF9pZCBhdCBpbmRleCAke2luZGV4fWApO1xuICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoaXMgdG9vbCBtZXNzYWdlIGhhcyBhIGNvcnJlc3BvbmRpbmcgdG9vbCBjYWxsIGZyb20gYW4gYXNzaXN0YW50XG4gICAgICAgICAgICAgaWYgKCF2YWxpZFRvb2xDYWxsSWRzLmhhcyhtc2cudG9vbF9jYWxsX2lkKSkge1xuICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBGaWx0ZXJpbmcgVE9PTCBtZXNzYWdlIG5vdCBjb3JyZWN0bHkgcHJlY2VkZWQgYnkgYXNzaXN0YW50IHRvb2xfY2FsbC4gSW5kZXg9JHtpbmRleH0sIFRvb2xDYWxsSUQ9JHttc2cudG9vbF9jYWxsX2lkfWApO1xuICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAvLyBBbHNvIGVuc3VyZSBjb250ZW50IGV4aXN0cyBmb3IgdG9vbCBtZXNzYWdlc1xuICAgICAgICAgICAgIGlmIChtc2cuY29udGVudCA9PSBudWxsIHx8IG1zZy5jb250ZW50ID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBGaWx0ZXJpbmcgVE9PTCBtZXNzYWdlIHdpdGggbWlzc2luZy9lbXB0eSBjb250ZW50LiBJbmRleD0ke2luZGV4fSwgVG9vbENhbGxJRD0ke21zZy50b29sX2NhbGxfaWR9YCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBGaW5hbCBzYW5pdHkgY2hlY2s6IEVuc3VyZSBhbHRlcm5hdGluZyB1c2VyL2Fzc2lzdGFudC90b29sIHNlcXVlbmNlIHdoZXJlIGFwcHJvcHJpYXRlXG4gICAgICAgICAgIC8vIFJlbW92ZSBjb25zZWN1dGl2ZSBtZXNzYWdlcyBvZiB0aGUgc2FtZSByb2xlIChleGNlcHQgJ3Rvb2wnIHdoaWNoIGZvbGxvd3MgJ2Fzc2lzdGFudCcpXG4gICAgICAgICAgIGNvbnN0IGZpbmFsRmlsdGVyZWQgPSBbXTtcbiAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgY29uc3QgY3VycmVudE1zZyA9IHJlc3VsdFtpXTtcbiAgICAgICAgICAgICAgY29uc3QgcHJldk1zZyA9IGZpbmFsRmlsdGVyZWRbZmluYWxGaWx0ZXJlZC5sZW5ndGggLSAxXTtcblxuICAgICAgICAgICAgICBpZiAocHJldk1zZyAmJiBjdXJyZW50TXNnLnJvbGUgPT09IHByZXZNc2cucm9sZSAmJiBjdXJyZW50TXNnLnJvbGUgIT09ICd0b29sJykge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBGaWx0ZXJpbmcgY29uc2VjdXRpdmUgbWVzc2FnZSBvZiByb2xlICR7Y3VycmVudE1zZy5yb2xlfSBhdCBpbmRleCAke2l9YCk7XG4gICAgICAgICAgICAgICAgICBjb250aW51ZTsgLy8gU2tpcCBhZGRpbmcgdGhlIGNvbnNlY3V0aXZlIG1lc3NhZ2VcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBFbnN1cmUgdG9vbCBtZXNzYWdlIGZvbGxvd3MgYW4gYXNzaXN0YW50IG1lc3NhZ2UgKGxvb3NlbHksIGZpbHRlciBoYW5kbGVzIHNwZWNpZmljIElEIG1hdGNoaW5nKVxuICAgICAgICAgICAgICAvLyBpZiAoY3VycmVudE1zZy5yb2xlID09PSAndG9vbCcgJiYgKCFwcmV2TXNnIHx8IHByZXZNc2cucm9sZSAhPT0gJ2Fzc2lzdGFudCcpKSB7XG4gICAgICAgICAgICAgIC8vICAgICBjb25zb2xlLndhcm4oYEZpbHRlcmluZyBUT09MIG1lc3NhZ2Ugbm90IGZvbGxvd2luZyBhbiBhc3Npc3RhbnQgbWVzc2FnZSBhdCBpbmRleCAke2l9YCk7XG4gICAgICAgICAgICAgIC8vICAgICBjb250aW51ZTsgLy8gU2tpcCBhZGRpbmcgdGhlIG91dC1vZi1wbGFjZSB0b29sIG1lc3NhZ2VcbiAgICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICAgIGZpbmFsRmlsdGVyZWQucHVzaChjdXJyZW50TXNnKTtcbiAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgY29uc29sZS5sb2coYEZpbHRlcmVkICR7bXNncy5sZW5ndGggLSBmaW5hbEZpbHRlcmVkLmxlbmd0aH0gaW52YWxpZC9tYWxmb3JtZWQgbWVzc2FnZXNgKTtcbiAgICAgICAgICAgcmV0dXJuIGZpbmFsRmlsdGVyZWQ7XG4gICAgICB9O1xuXG5cbiAgICAgIC8vIC0tLSBNYWluIFJlYXNvbmluZyBMb29wIC0tLVxuICAgICAgd2hpbGUgKGl0ZXJhdGlvbiA8IG1heFRvb2xJdGVyYXRpb25zKSB7XG4gICAgICAgICAgaXRlcmF0aW9uKys7XG4gICAgICAgICAgY29uc29sZS5sb2coYFxcbi0tLSBDb252ZXJzYXRpb24gVHVybiAke2l0ZXJhdGlvbn0vJHttYXhUb29sSXRlcmF0aW9uc30gLS0tYCk7XG5cbiAgICAgICAgICBjb25zdCBtZXNzYWdlc0ZvckFQSSA9IGZpbHRlck1lc3NhZ2VzRm9yQVBJKGN1cnJlbnRNZXNzYWdlcyk7XG4gICAgICAgICAgaWYgKG1lc3NhZ2VzRm9yQVBJLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTWVzc2FnZSBoaXN0b3J5IGJlY2FtZSBlbXB0eSBkdXJpbmcgZmlsdGVyaW5nLlwiKTtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50ZXJuYWwgZXJyb3I6IENhbm5vdCBwcm9jZWVkIHdpdGggZW1wdHkgbWVzc2FnZSBoaXN0b3J5LlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyAqKioqKiBERUJVRyBMT0cgKioqKipcbiAgICAgICAgICBjb25zb2xlLmxvZyhgTWFraW5nIEFQSSBjYWxsICMke2l0ZXJhdGlvbn0gd2l0aCBtb2RlbDogJHttb2RlbH1gKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgTWVzc2FnZSBIaXN0b3J5IChMZW5ndGg6ICR7bWVzc2FnZXNGb3JBUEkubGVuZ3RofSk6YCk7XG4gICAgICAgICAgbWVzc2FnZXNGb3JBUEkuZm9yRWFjaCgobXNnLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgICBbJHtpbmRleH1dIFJvbGU6ICR7bXNnLnJvbGV9YCk7XG4gICAgICAgICAgICAgIGlmIChtc2cuY29udGVudCkgY29uc29sZS5sb2coYCAgICAgIENvbnRlbnQ6ICR7U3RyaW5nKG1zZy5jb250ZW50KS5zdWJzdHJpbmcoMCwgMTAwKX0uLi5gKTsgLy8gVHJ1bmNhdGUsIGVuc3VyZSBzdHJpbmdcbiAgICAgICAgICAgICAgaWYgKG1zZy50b29sX2NhbGxzKSBjb25zb2xlLmxvZyhgICAgICAgVG9vbCBDYWxsczogJHtKU09OLnN0cmluZ2lmeShtc2cudG9vbF9jYWxscy5tYXAodGMgPT4gdGMuaWQgKyBcIjpcIiArIHRjLmZ1bmN0aW9uPy5uYW1lKSl9YCk7XG4gICAgICAgICAgICAgIGlmIChtc2cudG9vbF9jYWxsX2lkKSBjb25zb2xlLmxvZyhgICAgICAgVG9vbCBDYWxsIElEOiAke21zZy50b29sX2NhbGxfaWR9YCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc29sZS5sb2coYC0tLSBFbmQgQVBJIENhbGwgIyR7aXRlcmF0aW9ufSBIaXN0b3J5IC0tLSBcXG5gKTtcbiAgICAgICAgICAvLyAqKioqKiBFTkQgREVCVUcgTE9HICoqKioqXG5cbiAgICAgICAgICAvLyAtLS0gQ2FsbCBPcGVuQUkgLS0tXG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBvcGVuYWkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUoe1xuICAgICAgICAgICAgICBtb2RlbDogbW9kZWwsXG4gICAgICAgICAgICAgIG1lc3NhZ2VzOiBtZXNzYWdlc0ZvckFQSSxcbiAgICAgICAgICAgICAgdG9vbHM6IHRvb2xzLCAvLyBNYWtlIHRvb2xzIGF2YWlsYWJsZSBvbiBldmVyeSB0dXJuXG4gICAgICAgICAgICAgIHRvb2xfY2hvaWNlOiBcImF1dG9cIiwgLy8gTGV0IHRoZSBtb2RlbCBkZWNpZGUgaWYgaXQgbmVlZHMgdG9vbHNcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlTWVzc2FnZSA9IHJlc3BvbnNlLmNob2ljZXNbMF0ubWVzc2FnZTtcblxuICAgICAgICAgIC8vIC0tLSBBZGQgQXNzaXN0YW50IE1lc3NhZ2UgdG8gSGlzdG9yeSAoTG9jYWwgJiBEQikgLS0tXG4gICAgICAgICAgY3VycmVudE1lc3NhZ2VzLnB1c2gocmVzcG9uc2VNZXNzYWdlKTtcbiAgICAgICAgICBpZiAoY29udmVyc2F0aW9uSWQpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGF3YWl0IGFkZE1lc3NhZ2VUb0NvbnZlcnNhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzYXRpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICBcImFzc2lzdGFudFwiLFxuICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlTWVzc2FnZS5jb250ZW50IHx8IG51bGwsIC8vIFN0b3JlIG51bGwgaWYgbm8gY29udGVudCBcbiAgICAgICAgICAgICAgICAgICAgICB7IHRvb2xfY2FsbHM6IHJlc3BvbnNlTWVzc2FnZS50b29sX2NhbGxzIHx8IG51bGwgfSAvLyBBbHdheXMgcGFzcyBhbiBvYmplY3QsIGV2ZW4gaWYgdG9vbF9jYWxscyBpcyBudWxsXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9IGNhdGNoIChkYkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBEQiBFcnJvciBzdG9yaW5nIGFzc2lzdGFudCBtZXNzYWdlIChpdGVyYXRpb24gJHtpdGVyYXRpb259KTpgLCBkYkVycm9yKTtcbiAgICAgICAgICAgICAgICAgIC8vIENvbnRpbnVlIGV2ZW4gaWYgREIgc3RvcmUgZmFpbHMgZm9yIHRoaXMgbWVzc2FnZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gLS0tIENoZWNrIGZvciBUb29sIENhbGxzIC0tLVxuICAgICAgICAgIGNvbnN0IGFzc2lzdGFudFRvb2xDYWxscyA9IHJlc3BvbnNlTWVzc2FnZS50b29sX2NhbGxzO1xuXG4gICAgICAgICAgaWYgKGFzc2lzdGFudFRvb2xDYWxscyAmJiBhc3Npc3RhbnRUb29sQ2FsbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQXNzaXN0YW50IHJlcXVlc3RlZCAke2Fzc2lzdGFudFRvb2xDYWxscy5sZW5ndGh9IHRvb2wgY2FsbChzKSBpbiBpdGVyYXRpb24gJHtpdGVyYXRpb259OmAsIEpTT04uc3RyaW5naWZ5KGFzc2lzdGFudFRvb2xDYWxscy5tYXAodGMgPT4gKHsgaWQ6IHRjLmlkLCBuYW1lOiB0Yy5mdW5jdGlvbj8ubmFtZSB9KSkpKTtcblxuICAgICAgICAgICAgICAvLyBJbmZvcm0gY2xpZW50IHdlJ3JlIHByb2Nlc3NpbmcgKGlmIHN0cmVhbWluZylcbiAgICAgICAgICAgICAgcmVzcG9uc2VDYWxsYmFjaz8uKHsgdHlwZTogJ3Byb2Nlc3NpbmcnLCBjb250ZW50OiBgVGhpbmtpbmcgKHN0ZXAgJHtpdGVyYXRpb259KS4uLmAgfSk7XG4gICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAyMDApKTsgLy8gU21hbGwgZGVsYXkgZm9yIFVJIHVwZGF0ZVxuXG4gICAgICAgICAgICAgIC8vIC0tLSBQcm9jZXNzIHRoZSByZXF1ZXN0ZWQgdG9vbHMgLS0tXG4gICAgICAgICAgICAgIC8vIHByb2Nlc3NUb29sQ2FsbHMgYWRkcyB0aGUgdG9vbCByZXNwb25zZXMgdG8gY3VycmVudE1lc3NhZ2VzIGFuZCBzdG9yZXMgdGhlbSBpbiBEQlxuICAgICAgICAgICAgICBjb25zdCB0b29sUmVzcG9uc2VzID0gYXdhaXQgcHJvY2Vzc1Rvb2xDYWxscyhhc3Npc3RhbnRUb29sQ2FsbHMsIGN1cnJlbnRNZXNzYWdlcywgY29udmVyc2F0aW9uSWQsIHVzZXJJZCwgYWNjZXNzVG9rZW4pO1xuXG4gICAgICAgICAgICAgIC8vIENoZWNrIGlmIGFueSB0b29sIGNhbGwgZmFpbGVkIGNyaXRpY2FsbHksIG1heWJlIHN0b3AgZWFybHk/IChPcHRpb25hbCBlbmhhbmNlbWVudClcbiAgICAgICAgICAgICAgY29uc3QgaGFzQ3JpdGljYWxGYWlsdXJlID0gdG9vbFJlc3BvbnNlcy5zb21lKHRyID0+IHRyLmNvbnRlbnQ/LmluY2x1ZGVzKCcoU3RhdHVzOiBGQUlMRUQpJykpO1xuICAgICAgICAgICAgICBpZiAoaGFzQ3JpdGljYWxGYWlsdXJlKSB7XG4gICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBDcml0aWNhbCB0b29sIGZhaWx1cmUgZGV0ZWN0ZWQgaW4gaXRlcmF0aW9uICR7aXRlcmF0aW9ufS4gTExNIHdpbGwgYmUgaW5mb3JtZWQuYCk7XG4gICAgICAgICAgICAgICAgICAgLy8gTGV0IHRoZSBsb29wIGNvbnRpbnVlLCBMTE0gc2hvdWxkIHNlZSB0aGUgZmFpbHVyZSBtZXNzYWdlXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyAtLS0gTG9vcCBjb250aW51ZXM6IFNlbmQgdG9vbCByZXN1bHRzIGJhY2sgdG8gTExNIC0tLVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gLS0tIE5vIFRvb2wgQ2FsbHM6IFRoaXMgaXMgdGhlIGZpbmFsIHJlc3BvbnNlIC0tLVxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTm8gdG9vbCBjYWxscyByZXF1ZXN0ZWQgaW4gaXRlcmF0aW9uICR7aXRlcmF0aW9ufS4gRmluYWwgcmVzcG9uc2UgZ2VuZXJhdGVkLmApO1xuICAgICAgICAgICAgICBmaW5hbENvbnRlbnQgPSByZXNwb25zZU1lc3NhZ2UuY29udGVudCA/PyBcIlwiOyAvLyBVc2UgbnVsbGlzaCBjb2FsZXNjaW5nIGZvciBzYWZldHlcbiAgICAgICAgICAgICAgYnJlYWs7IC8vIEV4aXQgdGhlIGxvb3BcbiAgICAgICAgICB9XG4gICAgICB9IC8vIEVuZCBvZiB3aGlsZSBsb29wXG5cbiAgICAgIC8vIC0tLSBIYW5kbGUgbG9vcCBleGl0IC0tLVxuICAgICAgaWYgKGl0ZXJhdGlvbiA+PSBtYXhUb29sSXRlcmF0aW9ucykge1xuICAgICAgICAgIGNvbnNvbGUud2FybihgTWF4aW11bSB0b29sIGl0ZXJhdGlvbnMgKCR7bWF4VG9vbEl0ZXJhdGlvbnN9KSByZWFjaGVkLiBSZXR1cm5pbmcgbGFzdCBnZW5lcmF0ZWQgY29udGVudCBvciBlcnJvci5gKTtcbiAgICAgICAgICAvLyBBdHRlbXB0IHRvIHJldHVybiB0aGUgbGFzdCBjb250ZW50IGdlbmVyYXRlZCwgZXZlbiBpZiBpdCB3YXNuJ3QgaW50ZW5kZWQgYXMgZmluYWxcbiAgICAgICAgICBjb25zdCBsYXN0QXNzaXN0YW50TXNnID0gY3VycmVudE1lc3NhZ2VzW2N1cnJlbnRNZXNzYWdlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdEFzc2lzdGFudE1zZz8ucm9sZSA9PT0gJ2Fzc2lzdGFudCcgJiYgbGFzdEFzc2lzdGFudE1zZy5jb250ZW50KSB7XG4gICAgICAgICAgICAgICBmaW5hbENvbnRlbnQgPSBsYXN0QXNzaXN0YW50TXNnLmNvbnRlbnQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZmluYWxDb250ZW50ID0gXCJJIHNlZW0gdG8gYmUgc3R1Y2sgaW4gYSBsb29wIHRyeWluZyB0byBwcm9jZXNzIHRoYXQgcmVxdWVzdC4gQ291bGQgeW91IHRyeSByZXBocmFzaW5nIGl0P1wiO1xuICAgICAgICAgICAgICByZXNwb25zZUNhbGxiYWNrPy4oeyB0eXBlOiAnZXJyb3InLCBjb250ZW50OiBmaW5hbENvbnRlbnQgfSk7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxDb250ZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIkxvb3AgZmluaXNoZWQgd2l0aG91dCBnZW5lcmF0aW5nIGZpbmFsIGNvbnRlbnQuXCIpO1xuICAgICAgICAgIGZpbmFsQ29udGVudCA9IFwiU29ycnksIEkgd2Fzbid0IGFibGUgdG8gZ2VuZXJhdGUgYSBmaW5hbCByZXNwb25zZSBhZnRlciBwcm9jZXNzaW5nIHlvdXIgcmVxdWVzdC5cIjtcbiAgICAgICAgICByZXNwb25zZUNhbGxiYWNrPy4oeyB0eXBlOiAnZXJyb3InLCBjb250ZW50OiBmaW5hbENvbnRlbnQgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIC0tLSBTdHJlYW0gdGhlIEZJTkFMIHJlc3BvbnNlIC0tLVxuICAgICAgaWYgKHJlc3BvbnNlQ2FsbGJhY2sgJiYgZmluYWxDb250ZW50KSB7XG4gICAgICAgICAgLy8gU2VuZCB0aGUgZmluYWwgY29udGVudCBjaHVuayBieSBjaHVuayBpZiBkZXNpcmVkLCBvciBhcyBvbmUgcGllY2VcbiAgICAgICAgICAvLyBTaW1wbGlmaWVkOiBTZW5kIGFzIG9uZSBwaWVjZSBhZnRlciB0aGUgbG9vcFxuICAgICAgICAgICByZXNwb25zZUNhbGxiYWNrKHsgdHlwZTogJ2NvbnRlbnQnLCBjb250ZW50OiBmaW5hbENvbnRlbnQgfSk7XG4gICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCA1MCkpOyAvLyBTaG9ydCBkZWxheSBiZWZvcmUgZW5kXG4gICAgICAgICAgIHJlc3BvbnNlQ2FsbGJhY2soeyB0eXBlOiAnZW5kJyB9KTtcblxuICAgICAgfSBlbHNlIGlmICghcmVzcG9uc2VDYWxsYmFjayAmJiBmaW5hbENvbnRlbnQpIHtcbiAgICAgICAgICAvLyBOb24tc3RyZWFtaW5nIG1vZGU6IHJldHVybiB0aGUgZmluYWwgY29udGVudFxuICAgICAgICAgIHJldHVybiBmaW5hbENvbnRlbnQ7XG4gICAgICB9IGVsc2UgaWYgKCFmaW5hbENvbnRlbnQpIHtcbiAgICAgICAgICAgLy8gRW5zdXJlIHNvbWV0aGluZyBpcyByZXR1cm5lZC9zZW50IGV2ZW4gaWYgY29udGVudCBpcyBlbXB0eS9udWxsXG4gICAgICAgICAgIGlmIChyZXNwb25zZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VDYWxsYmFjayh7IHR5cGU6ICdjb250ZW50JywgY29udGVudDogJycgfSk7IC8vIFNlbmQgZW1wdHkgY29udGVudFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlQ2FsbGJhY2soeyB0eXBlOiAnZW5kJyB9KTtcbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIH1cblxuICAgICAgY29uc29sZS5sb2coXCJGaW5hbCByZXNwb25zZSBjb250ZW50OlwiLCBmaW5hbENvbnRlbnQpO1xuICAgICAgLy8gVGhlIGZ1bmN0aW9uIGltcGxpY2l0bHkgcmV0dXJucyBmaW5hbENvbnRlbnQgaWYgbm90IHN0cmVhbWluZywgb3IgaGFuZGxlcyBzdHJlYW1pbmcgdmlhIGNhbGxiYWNrXG4gICAgICByZXR1cm4gZmluYWxDb250ZW50OyAvLyBSZXR1cm4gZm9yIG5vbi1zdHJlYW1pbmcgY2FzZVxuXG5cbiAgfSBjYXRjaCAoZXJyb3IpIHsgLy8gQ2F0Y2ggZXJyb3JzIGZyb20gdGhlIGVudGlyZSBydW5Db252ZXJzYXRpb24gZmxvd1xuICAgICAgY29uc29sZS5lcnJvcihcIkZBVEFMIEVycm9yIGluIHJ1bkNvbnZlcnNhdGlvbiBwaXBlbGluZTpcIiwgZXJyb3IpO1xuICAgICAgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDAwKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIk1lc3NhZ2UgaGlzdG9yeSBhdCB0aW1lIG9mIDQwMCBlcnJvcjpcIiwgSlNPTi5zdHJpbmdpZnkobWVzc2FnZXMsIG51bGwsIDIpKTsgLy8gTG9nIGluaXRpYWwgaGlzdG9yeSBzdGF0ZVxuICAgICAgfVxuICAgICAgLy8gRW5zdXJlIGVycm9yIGlzIHByb3BhZ2F0ZWQgdG8gdGhlIGNsaWVudFxuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYEFuIGVycm9yIG9jY3VycmVkOiAke2Vycm9yLm1lc3NhZ2UgfHwgXCJDaGVjayBzZXJ2ZXIgbG9ncy5cIn1gO1xuICAgICAgcmVzcG9uc2VDYWxsYmFjaz8uKHsgdHlwZTogJ2Vycm9yJywgY29udGVudDogZXJyb3JNZXNzYWdlIH0pO1xuICAgICAgLy8gVGhyb3cgb3IgcmV0dXJuIGVycm9yIHN0cmluZyBiYXNlZCBvbiBleHBlY3RlZCBjYWxsZXIgYmVoYXZpb3JcbiAgICAgIC8vIHRocm93IGVycm9yOyAvLyBSZS10aHJvd2luZyBtaWdodCBiZSBiZXR0ZXIgZm9yIGNoYXQoKSBmdW5jdGlvbiB0byBjYXRjaFxuICAgICAgcmV0dXJuIGVycm9yTWVzc2FnZTsgLy8gT3IgcmV0dXJuIGVycm9yIHN0cmluZyBmb3Igbm9uLXN0cmVhbWluZ1xuICB9XG59XG5cblxuXG4vLyAtLS0gTWFpbiBDaGF0IEVudHJ5IFBvaW50IC0tLVxuYXN5bmMgZnVuY3Rpb24gY2hhdCh1c2VySW5wdXQsIHVzZXJJZCA9ICdkZWZhdWx0JywgYWNjZXNzVG9rZW4gPSBudWxsLCBzdHJlYW1DYWxsYmFjayA9IG51bGwsIHN0YXJ0TmV3Q29udmVyc2F0aW9uID0gZmFsc2UpIHsgLy8gQWRkZWQgc3RhcnROZXdDb252ZXJzYXRpb24gZmxhZ1xuICBjb25zb2xlLmxvZyhgQ2hhdCByZXF1ZXN0OiBVc2VyPSR7dXNlcklkfSwgSW5wdXQ9XCIke3VzZXJJbnB1dH1cIiwgU3RhcnROZXc9JHtzdGFydE5ld0NvbnZlcnNhdGlvbn1gKTsgLy8gTG9nIHRoZSBmbGFnXG4gIGlmICghdXNlcklkIHx8IHVzZXJJZCA9PT0gJ2RlZmF1bHQnKSB7XG4gICAgc3RyZWFtQ2FsbGJhY2s/Lih7IHR5cGU6ICdlcnJvcicsIGNvbnRlbnQ6IFwiVXNlciBJRCBtaXNzaW5nLlwiIH0pO1xuICAgIHJldHVybiBcIkVycm9yOiBVc2VyIElEIHJlcXVpcmVkLlwiO1xuICB9XG4gICBpZiAoIXVzZXJJbnB1dD8udHJpbSgpKSB7XG4gICAgICAgc3RyZWFtQ2FsbGJhY2s/Lih7IHR5cGU6ICdpbmZvJywgY29udGVudDogXCJFbnRlciBhIG1lc3NhZ2UuXCIgfSk7IHJldHVybiBcIlwiO1xuICAgfVxuXG4gICAvLyBTZW5kICdzdGFydCcgc2lnbmFsIGltbWVkaWF0ZWx5IGZvciBzdHJlYW1pbmdcbiAgIHN0cmVhbUNhbGxiYWNrPy4oeyB0eXBlOiAnc3RhcnQnIH0pO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgdG9rZW5zID0gYWNjZXNzVG9rZW4gPyB7IGFjY2Vzc190b2tlbjogYWNjZXNzVG9rZW4gfSA6IG51bGw7XG4gICAgbGV0IHVzZXI7XG4gICAgbGV0IGNvbnZlcnNhdGlvbjtcbiAgICBsZXQgaGlzdG9yeU1lc3NhZ2VzID0gW107IC8vIEZvcm1hdHRlZCBoaXN0b3J5IGZvciBPcGVuQUkgQVBJXG5cbiAgICAvLyAtLS0gTG9hZCBVc2VyICYgQ29udmVyc2F0aW9uIEhpc3RvcnkgLS0tXG4gICAgaWYgKCFzdGFydE5ld0NvbnZlcnNhdGlvbikge1xuXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gKipGSVg6KiogVXNlIHRoZSBvcHRpbWl6ZWQgcXVlcnlcbiAgICAgICAgdXNlciA9IGF3YWl0IGdldFVzZXJXaXRoTGF0ZXN0Q29udmVyc2F0aW9uKHVzZXJJZCk7XG5cbiAgICAgICAgaWYgKHVzZXI/LkNvbnZlcnNhdGlvbnM/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnZlcnNhdGlvbiA9IHVzZXIuQ29udmVyc2F0aW9uc1swXTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCBhY3RpdmUgY29udmVyc2F0aW9uICR7Y29udmVyc2F0aW9uLmNvbnZlcnNhdGlvbl9pZH1gKTtcbiAgICAgICAgICAgIGlmIChjb252ZXJzYXRpb24uQ29udmVyc2F0aW9uTWVzc2FnZXM/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBTb3J0IEFTQ0VORElORyBmb3IgQVBJXG4gICAgICAgICAgICAgICAgY29udmVyc2F0aW9uLkNvbnZlcnNhdGlvbk1lc3NhZ2VzLnNvcnQoKGEsIGIpID0+IGEuc2VxdWVuY2VfbnVtYmVyIC0gYi5zZXF1ZW5jZV9udW1iZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gKipDUklUSUNBTCBGSVg6IFJvYnVzdCBIaXN0b3J5IE1hcHBpbmcqKlxuICAgICAgICAgICAgICAgIGhpc3RvcnlNZXNzYWdlcyA9IGNvbnZlcnNhdGlvbi5Db252ZXJzYXRpb25NZXNzYWdlcy5tYXAoKG1zZywgaW5kZXgsIGFsbE1zZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZU9iamVjdCA9IHsgcm9sZTogbXNnLnJvbGUgfTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDb250ZW50OiBNYW5kYXRvcnkgdW5sZXNzIGFzc2lzdGFudCB3LyB0b29sIGNhbGxzXG4gICAgICAgICAgICAgICAgICAgIGlmIChtc2cuY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlT2JqZWN0LmNvbnRlbnQgPSBtc2cuY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtc2cucm9sZSA9PT0gJ2Fzc2lzdGFudCcgJiYgbXNnLnRvb2xfY2FsbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0b29sX2NhbGxzIGZpZWxkIGFjdHVhbGx5IGNvbnRhaW5zIHZhbGlkIGNhbGxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbGlkVG9vbENhbGxzRXhpc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobXNnLnRvb2xfY2FsbHMudG9vbF9jYWxscyAmJiBBcnJheS5pc0FycmF5KG1zZy50b29sX2NhbGxzLnRvb2xfY2FsbHMpICYmIG1zZy50b29sX2NhbGxzLnRvb2xfY2FsbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRUb29sQ2FsbHNFeGlzdCA9IG1zZy50b29sX2NhbGxzLnRvb2xfY2FsbHMuc29tZSh0YyA9PiB0Yy5pZCAmJiB0Yy5mdW5jdGlvbj8ubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG1zZy50b29sX2NhbGxzKSAmJiBtc2cudG9vbF9jYWxscy5sZW5ndGggPiAwKSB7IC8vIEhhbmRsZSBkaXJlY3QgYXJyYXkgc3RvcmFnZSBwb3NzaWJpbGl0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRUb29sQ2FsbHNFeGlzdCA9IG1zZy50b29sX2NhbGxzLnNvbWUodGMgPT4gdGMuaWQgJiYgdGMuZnVuY3Rpb24/Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRUb29sQ2FsbHNFeGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlT2JqZWN0LmNvbnRlbnQgPSBudWxsOyAvLyBBUEkgZXhwZWN0cyBudWxsL1wiXCIgaWYgb25seSB0b29sX2NhbGxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU9iamVjdC5jb250ZW50ID0gXCJcIjsgLy8gVHJlYXQgYXMgZW1wdHkgY29udGVudCBpZiB0b29sX2NhbGxzIGludmFsaWQvZW1wdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlT2JqZWN0LmNvbnRlbnQgPSBcIlwiOyAvLyBEZWZhdWx0IGVtcHR5IHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAvLyBUb29sIENhbGxzIChBc3Npc3RhbnQpOiBFeHRyYWN0IHRoZSBhcnJheVxuICAgICAgICAgICAgICAgICAgICBpZiAobXNnLnJvbGUgPT09ICdhc3Npc3RhbnQnICYmIG1zZy50b29sX2NhbGxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG9vbENhbGxzQXJyYXkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FzZSAxOiBTdG9yZWQgYXMgeyB0b29sX2NhbGxzOiBbLi4uXSB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobXNnLnRvb2xfY2FsbHMudG9vbF9jYWxscyAmJiBBcnJheS5pc0FycmF5KG1zZy50b29sX2NhbGxzLnRvb2xfY2FsbHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbENhbGxzQXJyYXkgPSBtc2cudG9vbF9jYWxscy50b29sX2NhbGxzO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FzZSAyOiBTdG9yZWQgYXMgWy4uLl0gKGZhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG1zZy50b29sX2NhbGxzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xDYWxsc0FycmF5ID0gbXNnLnRvb2xfY2FsbHM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBPTkxZIGlmIHZhbGlkIGFuZCBub24tZW1wdHlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b29sQ2FsbHNBcnJheSAmJiB0b29sQ2FsbHNBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkVG9vbENhbGxzID0gdG9vbENhbGxzQXJyYXkuZmlsdGVyKHRjID0+IHRjLmlkICYmIHRjLnR5cGUgPT09ICdmdW5jdGlvbicgJiYgdGMuZnVuY3Rpb24/Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRUb29sQ2FsbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU9iamVjdC50b29sX2NhbGxzID0gdmFsaWRUb29sQ2FsbHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZS1lbnN1cmUgY29udGVudCBpcyBudWxsIGlmIE9OTFkgdG9vbCBjYWxsc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VPYmplY3QuY29udGVudCA9PT0gXCJcIiAmJiB2YWxpZFRvb2xDYWxscy5sZW5ndGggPT09IHRvb2xDYWxsc0FycmF5Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlT2JqZWN0LmNvbnRlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYERCIG1lc3NhZ2UgJHttc2cubWVzc2FnZV9pZH0gaGFkIHRvb2xfY2FsbHMgb2JqZWN0IGJ1dCBubyB2YWxpZCBjYWxscy5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgYWRkIGVtcHR5L2ludmFsaWQgdG9vbF9jYWxscyBhcnJheSB0byBBUEkgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBUb29sIENhbGwgSUQgKFRvb2wpOiBFeHRyYWN0IHRoZSBJRCBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1zZy5yb2xlID09PSAndG9vbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0b29sSWQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhc2UgMTogU3RvcmVkIGFzIHsgdG9vbF9jYWxsX2lkOiBcIi4uLlwiIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbXNnLnRvb2xfY2FsbF9pZCA9PT0gJ29iamVjdCcgJiYgbXNnLnRvb2xfY2FsbF9pZCAhPT0gbnVsbCAmJiBtc2cudG9vbF9jYWxsX2lkLnRvb2xfY2FsbF9pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xJZCA9IG1zZy50b29sX2NhbGxfaWQudG9vbF9jYWxsX2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhc2UgMjogU3RvcmVkIGFzIFwiLi4uXCIgKGZhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbXNnLnRvb2xfY2FsbF9pZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sSWQgPSBtc2cudG9vbF9jYWxsX2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUb29sIG1lc3NhZ2UgTVVTVCBoYXZlIElEIGFuZCBjb250ZW50IHRvIGJlIHZhbGlkIGZvciBBUElcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b29sSWQgJiYgbWVzc2FnZU9iamVjdC5jb250ZW50ICE9IG51bGwpIHsgLy8gQ29udGVudCBjb21lcyBmcm9tIGZvcm1hdFRvb2xSZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VPYmplY3QudG9vbF9jYWxsX2lkID0gdG9vbElkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYEZpbHRlcmluZyBpbnZhbGlkIFRPT0wgbWVzc2FnZSAobWlzc2luZyBJRCBvciBjb250ZW50KTogREJfSUQ9JHttc2cubWVzc2FnZV9pZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gRmlsdGVyIG91dCBpbnZhbGlkIHRvb2wgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQVBJIFZhbGlkYXRpb24gQ2hlY2s6IHRvb2wgcm9sZSBtdXN0IGZvbGxvdyBhc3Npc3RhbnQgcm9sZSB3aXRoIHRvb2xfY2FsbHNcbiAgICAgICAgICAgICAgICAgICAgLy8gKipSRU1PVkVEIFNUUklDVCBQUkVDRURJTkcgQ0hFQ0sqKiAtIFJlbHlpbmcgb24gZmlsdGVyTWVzc2FnZXNGb3JBUEkgaW5zaWRlIHJ1bkNvbnZlcnNhdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyBpZiAobWVzc2FnZU9iamVjdC5yb2xlID09PSAndG9vbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnN0IHByZXZNYXBwZWRNZXNzYWdlID0gaW5kZXggPiAwID8gaGlzdG9yeU1lc3NhZ2VzW2luZGV4IC0gMV0gOiBudWxsOyAvLyBDaGVjayB0aGUgKm1hcHBlZCogcHJldmlvdXMgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgaWYgKCFwcmV2TWFwcGVkTWVzc2FnZSB8fCBwcmV2TWFwcGVkTWVzc2FnZS5yb2xlICE9PSAnYXNzaXN0YW50JyB8fCAhcHJldk1hcHBlZE1lc3NhZ2UudG9vbF9jYWxscyB8fCAhcHJldk1hcHBlZE1lc3NhZ2UudG9vbF9jYWxscy5zb21lKHRjID0+IHRjLmlkID09PSBtZXNzYWdlT2JqZWN0LnRvb2xfY2FsbF9pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgY29uc29sZS53YXJuKGBGaWx0ZXJpbmcgVE9PTCBtZXNzYWdlIG5vdCBjb3JyZWN0bHkgcHJlY2VkZWQgYnkgYXNzaXN0YW50IHRvb2xfY2FsbC4gREJfSUQ9JHttc2cubWVzc2FnZV9pZH0sIFRvb2xDYWxsSUQ9JHttZXNzYWdlT2JqZWN0LnRvb2xfY2FsbF9pZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgcmV0dXJuIG51bGw7IC8vIEZpbHRlciBvdXQgb3JwaGFuZWQvbWlzbWF0Y2hlZCB0b29sIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAvLyBGaWx0ZXIgb3V0IGFzc2lzdGFudCBtZXNzYWdlcyB0aGF0IGVuZCB1cCBlbXB0eSAobm8gY29udGVudCwgbm8gdmFsaWQgdG9vbCBjYWxscylcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VPYmplY3Qucm9sZSA9PT0gJ2Fzc2lzdGFudCcgJiYgbWVzc2FnZU9iamVjdC5jb250ZW50ID09IG51bGwgJiYgIW1lc3NhZ2VPYmplY3QudG9vbF9jYWxscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgRmlsdGVyaW5nIGVtcHR5IEFTU0lTVEFOVCBtZXNzYWdlLiBEQl9JRD0ke21zZy5tZXNzYWdlX2lkfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZU9iamVjdDtcblxuICAgICAgICAgICAgICAgIH0pLmZpbHRlcihCb29sZWFuKTsgLy8gUmVtb3ZlIG51bGxzIGZyb20gZmlsdGVyaW5nXG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTG9hZGVkIGFuZCBtYXBwZWQgJHtoaXN0b3J5TWVzc2FnZXMubGVuZ3RofSB2YWxpZCBtZXNzYWdlcyBmcm9tIGhpc3RvcnkuYCk7XG4gICAgICAgICAgICAgICAgLy8gREVCVUc6IExvZyB0aGUgZmluYWwgaGlzdG9yeSBiZWluZyBzZW50LCBPTkxZIEZPUiBERUJVR0dJTkcgU0VOU0lUSVZFIERBVEFcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkZpbmFsIGhpc3RvcnkgZm9yIEFQSTpcIiwgSlNPTi5zdHJpbmdpZnkoaGlzdG9yeU1lc3NhZ2VzLCBudWxsLCAyKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQ29udmVyc2F0aW9uICR7Y29udmVyc2F0aW9uLmNvbnZlcnNhdGlvbl9pZH0gaGFzIG5vIG1lc3NhZ2VzLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBObyBleGlzdGluZyB1c2VyL2NvbnZlcnNhdGlvbiBmb3VuZCBmb3IgJHt1c2VySWR9LiBDcmVhdGluZy5gKTtcbiAgICAgICAgICAgICBpZiAoIXVzZXIpIHsgLy8gRW5zdXJlIHVzZXIgZXhpc3RzXG4gICAgICAgICAgICAgICAgIGNvbnN0IGlzRW1haWwgPSB1c2VySWQuaW5jbHVkZXMoJ0AnKTtcbiAgICAgICAgICAgICAgICAgY29uc3QgZW1haWwgPSBpc0VtYWlsID8gdXNlcklkIDogYCR7dXNlcklkfUBleGFtcGxlLmNvbWA7XG4gICAgICAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gaXNFbWFpbCA/ICdlbWFpbCcgOiAnc3lzdGVtJzsgLy8gQWRqdXN0IGFzIG5lZWRlZFxuICAgICAgICAgICAgICAgICB1c2VyID0gYXdhaXQgZ2V0T3JDcmVhdGVVc2VyKGVtYWlsLCBwcm92aWRlciwgdXNlcklkLCB1c2VySWQpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDUklUSUNBTDogRXJyb3IgbG9hZGluZyB1c2VyL2hpc3Rvcnk6XCIsIGVycm9yKTtcbiAgICAgICAgdHJ5IHsgLy8gQXR0ZW1wdCByZWNvdmVyeVxuICAgICAgICAgICAgY29uc3QgaXNFbWFpbCA9IHVzZXJJZC5pbmNsdWRlcygnQCcpO1xuICAgICAgICAgICAgY29uc3QgZW1haWwgPSBpc0VtYWlsID8gdXNlcklkIDogYCR7dXNlcklkfUBleGFtcGxlLmNvbWA7XG4gICAgICAgICAgICB1c2VyID0gYXdhaXQgZ2V0T3JDcmVhdGVVc2VyKGVtYWlsLCBpc0VtYWlsID8gJ2VtYWlsJyA6ICdzeXN0ZW0nLCB1c2VySWQsIHVzZXJJZCk7XG4gICAgICAgIH0gY2F0Y2ggKHVzZXJFcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNSSVRJQ0FMOiBGYWlsZWQgdXNlciByZWNvdmVyeTpcIiwgdXNlckVycm9yKTtcbiAgICAgICAgICAgIHN0cmVhbUNhbGxiYWNrPy4oeyB0eXBlOiAnZXJyb3InLCBjb250ZW50OiBcIkZhaWxlZCB0byBsb2FkIHVzZXIgcHJvZmlsZS5cIiB9KTtcbiAgICAgICAgICAgIHJldHVybiBcIkVycm9yOiBDb3VsZCBub3QgbG9hZCB1c2VyIHByb2ZpbGUuXCI7XG4gICAgICAgIH1cbiAgICAgICAgY29udmVyc2F0aW9uID0gbnVsbDsgaGlzdG9yeU1lc3NhZ2VzID0gW107IC8vIFJlc2V0IHN0YXRlXG4gICAgfVxuICAgIH0gZWxzZSB7IC8vIEhhbmRsZSBzdGFydE5ld0NvbnZlcnNhdGlvbiA9IHRydWVcbiAgICAgICAgY29uc29sZS5sb2coXCJTdGFydGluZyBhIG5ldyBjb252ZXJzYXRpb24gYXMgcmVxdWVzdGVkLlwiKTtcbiAgICAgICAgLy8gRW5zdXJlIHVzZXIgb2JqZWN0IGlzIGxvYWRlZCwgZXZlbiBpZiBoaXN0b3J5IGxvYWRpbmcgd2FzIHNraXBwZWRcbiAgICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzRW1haWwgPSB1c2VySWQuaW5jbHVkZXMoJ0AnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbWFpbCA9IGlzRW1haWwgPyB1c2VySWQgOiBgJHt1c2VySWR9QGV4YW1wbGUuY29tYDtcbiAgICAgICAgICAgICAgICB1c2VyID0gYXdhaXQgZ2V0T3JDcmVhdGVVc2VyKGVtYWlsLCBpc0VtYWlsID8gJ2VtYWlsJyA6ICdzeXN0ZW0nLCB1c2VySWQsIHVzZXJJZCk7XG4gICAgICAgICAgICB9IGNhdGNoICh1c2VyRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ1JJVElDQUw6IEZhaWxlZCB1c2VyIGNyZWF0aW9uL3JldHJpZXZhbCB3aGVuIHN0YXJ0aW5nIG5ldyBjb252ZXJzYXRpb246XCIsIHVzZXJFcnJvcik7XG4gICAgICAgICAgICAgICAgc3RyZWFtQ2FsbGJhY2s/Lih7IHR5cGU6ICdlcnJvcicsIGNvbnRlbnQ6IFwiRmFpbGVkIHRvIGxvYWQgdXNlciBwcm9maWxlIGZvciBuZXcgY2hhdC5cIiB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJFcnJvcjogQ291bGQgbm90IGxvYWQgdXNlciBwcm9maWxlLlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEV4cGxpY2l0bHkgY2xlYXIgY29udmVyc2F0aW9uIGFuZCBoaXN0b3J5XG4gICAgICAgIGNvbnZlcnNhdGlvbiA9IG51bGw7XG4gICAgICAgIGhpc3RvcnlNZXNzYWdlcyA9IFtdO1xuICAgIH1cblxuICAgIC8vIC0tLSBDcmVhdGUgQ29udmVyc2F0aW9uIGlmIG5lZWRlZCAmIEFkZCBTeXN0ZW0gUHJvbXB0IC0tLVxuICAgIGlmICghY29udmVyc2F0aW9uKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb252ZXJzYXRpb24gPSBhd2FpdCBjcmVhdGVDb252ZXJzYXRpb24odXNlci51c2VyX2lkKTtcbiAgICAgICAgY29uc29sZS5sb2coYENyZWF0ZWQgbmV3IGNvbnZlcnNhdGlvbiAke2NvbnZlcnNhdGlvbi5jb252ZXJzYXRpb25faWR9LiBQcmVwYXJpbmcgc3lzdGVtIHByb21wdC5gKTtcbiAgICAgICAgLy8gUHJlcGFyZSBzeXN0ZW0gcHJvbXB0ICh3aWxsIGJlIGFkZGVkIGxhdGVyIGFmdGVyIGNoZWNraW5nIGZvciBwcmVmcylcbiAgICAgICAgbGV0IHN5c3RlbVByb21wdENvbnRlbnQgPSBnZXRBdGhlbmFTeXN0ZW1Qcm9tcHQoKTsgXG5cbiAgICAgICAgLy8gU3RvcmUgdGhlIGJhc2Ugc3lzdGVtIHByb21wdCBpbiBEQiBmaXJzdFxuICAgICAgICBhd2FpdCBhZGRNZXNzYWdlVG9Db252ZXJzYXRpb24oY29udmVyc2F0aW9uLmNvbnZlcnNhdGlvbl9pZCwgXCJzeXN0ZW1cIiwgc3lzdGVtUHJvbXB0Q29udGVudCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIHVzZXIgcHJlZmVyZW5jZXMgaW1tZWRpYXRlbHkgYWZ0ZXIgZ2V0dGluZyB0aGUgYmFzZSBwcm9tcHRcbiAgICAgICAgaWYgKHVzZXIuVXNlclByZWZlcmVuY2U/LnByZWZlcmVuY2VzX2RhdGEgJiYgT2JqZWN0LmtleXModXNlci5Vc2VyUHJlZmVyZW5jZS5wcmVmZXJlbmNlc19kYXRhKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZWZzRGF0YSA9IHVzZXIuVXNlclByZWZlcmVuY2UucHJlZmVyZW5jZXNfZGF0YTtcbiAgICAgICAgICAgICAgICBsZXQgcHJlZnNTdHJpbmcgPSBcIlxcblxcblVzZXIgUHJlZmVyZW5jZXMgQ29udGV4dCAoQ29uc2lkZXIgd2hlbiByZWxldmFudCk6XFxuXCI7XG4gICAgICAgICAgICAgICAgcHJlZnNTdHJpbmcgKz0gSlNPTi5zdHJpbmdpZnkocHJlZnNEYXRhLCBudWxsLCAyKTtcbiAgICAgICAgICAgICAgICBzeXN0ZW1Qcm9tcHRDb250ZW50ICs9IHByZWZzU3RyaW5nOyAvLyBBcHBlbmQgcHJlZmVyZW5jZXMgdG8gdGhlIG1haW4gcHJvbXB0XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcHBlbmRlZCB1c2VyIHByZWZlcmVuY2VzIGNvbnRleHQgdG8gc3lzdGVtIHByb21wdC5cIik7XG4gICAgICAgICAgICB9IGNhdGNoIChwcmVmc0Vycm9yKSB7IGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhZGRpbmcgcHJlZmVyZW5jZXMgY29udGV4dDpcIiwgcHJlZnNFcnJvcik7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCB0aGUgcG90ZW50aWFsbHkgY29tYmluZWQgc3lzdGVtIHByb21wdCB0byB0aGUgU1RBUlQgb2YgdGhlIGxvY2FsIGhpc3RvcnkgYXJyYXlcbiAgICAgICAgaGlzdG9yeU1lc3NhZ2VzLnVuc2hpZnQoeyByb2xlOiBcInN5c3RlbVwiLCBjb250ZW50OiBzeXN0ZW1Qcm9tcHRDb250ZW50IH0pO1xuXG4gICAgICB9IGNhdGNoIChjcmVhdGVFcnJvcikge1xuICAgICAgICAgY29uc29sZS5lcnJvcihcIkNSSVRJQ0FMOiBGYWlsZWQgdG8gY3JlYXRlIGNvbnZlcnNhdGlvbjpcIiwgY3JlYXRlRXJyb3IpO1xuICAgICAgICAgc3RyZWFtQ2FsbGJhY2s/Lih7IHR5cGU6ICdlcnJvcicsIGNvbnRlbnQ6IFwiRmFpbGVkIHRvIHN0YXJ0IGNoYXQgc2Vzc2lvbi5cIiB9KTtcbiAgICAgICAgIHJldHVybiBcIkVycm9yOiBDb3VsZCBub3Qgc3RhcnQgY2hhdCBzZXNzaW9uLlwiO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIC0tLSBQcmVwYXJlIG1lc3NhZ2VzIGZvciBBUEkgLS0tXG4gICAgY29uc3QgY3VycmVudE1lc3NhZ2VzID0gWy4uLmhpc3RvcnlNZXNzYWdlc107IC8vIFN0YXJ0IHdpdGggaGlzdG9yeSAoaW5jbCBzeXMgcHJvbXB0IGlmIG5ldylcblxuICAgIC8vIEFkZCBjdXJyZW50IHVzZXIgaW5wdXRcbiAgICBjb25zdCB1c2VyTWVzc2FnZUZvckFQSSA9IHsgcm9sZTogXCJ1c2VyXCIsIGNvbnRlbnQ6IHVzZXJJbnB1dCB9O1xuICAgIGN1cnJlbnRNZXNzYWdlcy5wdXNoKHVzZXJNZXNzYWdlRm9yQVBJKTtcblxuICAgIC8vIFN0b3JlIHVzZXIgbWVzc2FnZSBpbiBEQiByZWxpYWJseVxuICAgICB0cnkge1xuICAgICAgICBhd2FpdCBhZGRNZXNzYWdlVG9Db252ZXJzYXRpb24oY29udmVyc2F0aW9uLmNvbnZlcnNhdGlvbl9pZCwgXCJ1c2VyXCIsIHVzZXJJbnB1dCk7XG4gICAgIH0gY2F0Y2goZGJFcnJvcikge1xuICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHN0b3JpbmcgdXNlciBtZXNzYWdlOlwiLCBkYkVycm9yKTtcbiAgICAgICAgIC8vIE5vbi1jcml0aWNhbD8gTG9nIGFuZCBjb250aW51ZS5cbiAgICAgfVxuXG4gICAgLy8gLS0tIFJ1biB0aGUgY29udmVyc2F0aW9uIGxvZ2ljIC0tLVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcnVuQ29udmVyc2F0aW9uKFxuICAgICAgY3VycmVudE1lc3NhZ2VzLFxuICAgICAgdXNlcklucHV0LFxuICAgICAgY29udmVyc2F0aW9uLmNvbnZlcnNhdGlvbl9pZCxcbiAgICAgIHVzZXIudXNlcl9pZCwgLy8gUGFzcyBVVUlEXG4gICAgICBhY2Nlc3NUb2tlbixcbiAgICAgIHN0cmVhbUNhbGxiYWNrXG4gICAgKTtcblxuICAgIC8vIElmIG5vdCBzdHJlYW1pbmcsIHJldHVybiB0aGUgcmVzcG9uc2UuXG4gICAgLy8gSWYgc3RyZWFtaW5nLCBydW5Db252ZXJzYXRpb24gaGFuZGxlcyBzZW5kaW5nIHZpYSBjYWxsYmFjaywgc28gd2UgbWlnaHQganVzdCByZXR1cm4gdm9pZCBvciB0cnVlL2ZhbHNlXG4gICAgaWYgKCFzdHJlYW1DYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7IC8vIEZpbmFsIHRleHQgcmVzcG9uc2UgZm9yIG5vbi1zdHJlYW1pbmdcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTdHJlYW1pbmcgaGFuZGxlZCBieSBydW5Db252ZXJzYXRpb24ncyBjYWxsYmFja3NcbiAgICAgICAgIC8vIEVuc3VyZSAnZW5kJyB3YXMgc2VudCBpZiBhbiBlcnJvciBvY2N1cnJlZCB3aXRoaW4gcnVuQ29udmVyc2F0aW9uIGJlZm9yZSBjb21wbGV0aW9uXG4gICAgICAgICAvLyAocnVuQ29udmVyc2F0aW9uIHNob3VsZCBpZGVhbGx5IGhhbmRsZSBzZW5kaW5nICdlbmQnIG9yICdlcnJvcicgaW4gbW9zdCBjYXNlcylcbiAgICAgICAgIHJldHVybjsgLy8gSW5kaWNhdGUgc3VjY2VzcyBvciBzaW1wbHkgY29tcGxldGUgZm9yIHN0cmVhbWluZ1xuICAgIH1cblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBtYWluIGNoYXQgZnVuY3Rpb246XCIsIGVycm9yKTtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZDogJHtlcnJvci5tZXNzYWdlIHx8IFwiUGxlYXNlIHRyeSBhZ2Fpbi5cIn1gO1xuICAgIC8vIEVuc3VyZSAnZW5kJyBvciAnZXJyb3InIGlzIHNlbnQgaW4gY2FzZSBvZiB0b3AtbGV2ZWwgZmFpbHVyZVxuICAgIHN0cmVhbUNhbGxiYWNrPy4oeyB0eXBlOiAnZXJyb3InLCBjb250ZW50OiBlcnJvck1lc3NhZ2UgfSk7XG4gICAgc3RyZWFtQ2FsbGJhY2s/Lih7IHR5cGU6ICdlbmQnIH0pOyAvLyBTZW5kIGVuZCBzaWduYWwgYWZ0ZXIgZXJyb3IgaW4gc3RyZWFtaW5nIG1vZGVcbiAgICByZXR1cm4gZXJyb3JNZXNzYWdlOyAvLyBSZXR1cm4gZXJyb3Igc3RyaW5nIGZvciBub24tc3RyZWFtaW5nXG4gIH1cbn1cblxuXG4vLyAtLS0gRXhwb3J0cyAtLS1cbmV4cG9ydCB7XG4gICAgY2hhdCBhcyBkZWZhdWx0LFxuICAgIGxpc3RUb2RheXNFdmVudHMsXG4gICAgc3VnZ2VzdEV2ZW50VGltZSxcbiAgICBnZXRDb252ZXJzYXRpb25zQnlVc2VySWRcbn07Il0sIm5hbWVzIjpbIk9wZW5BSSIsIkRhdGVUaW1lIiwiTm9kZUNhY2hlIiwiZ2V0QXRoZW5hU3lzdGVtUHJvbXB0IiwiZmluZEF2YWlsYWJsZVNsb3RzIiwiZmluZEF2YWlsYWJsZVNsb3RzVXRpbCIsImZvcm1hdEF2YWlsYWJsZVNsb3RzIiwibGlzdFRvZGF5c0V2ZW50cyIsInN1Z2dlc3RFdmVudFRpbWUiLCJ0b29scyIsInRvb2xGdW5jdGlvbnMiLCJnZXRPckNyZWF0ZVVzZXIiLCJjcmVhdGVDb252ZXJzYXRpb24iLCJDb252ZXJzYXRpb25NZXNzYWdlIiwiYWRkTWVzc2FnZVRvQ29udmVyc2F0aW9uIiwiaW5pdGlhbGl6ZURhdGFiYXNlIiwiZ2V0Q29udmVyc2F0aW9uc0J5VXNlcklkIiwiZ2V0VXNlcldpdGhMYXRlc3RDb252ZXJzYXRpb24iLCJVc2VyUHJlZmVyZW5jZSIsImdvb2dsZSIsInJlcXVpcmUiLCJkYkluaXRQcm9taXNlIiwib3BlbmFpIiwiYXBpS2V5IiwicHJvY2VzcyIsImVudiIsIk9QRU5BSV9BUElfS0VZIiwiZm9ybWF0RXZlbnRUaW1lIiwiZXZlbnRUaW1lIiwiZHQiLCJmcm9tSVNPIiwiaXNWYWxpZCIsInRvTG9jYWxlU3RyaW5nIiwiREFURVRJTUVfRlVMTCIsImRhdGVPbmx5Iiwiem9uZSIsIkRBVEVfRlVMTCIsImUiLCJjb25zb2xlIiwid2FybiIsIlN0cmluZyIsImZvcm1hdENhbGVuZGFyRXZlbnRzIiwiZXZlbnRzIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwibWFwIiwiZXZlbnQiLCJzdGFydCIsImRhdGVUaW1lIiwiZGF0ZSIsImVuZCIsInN1bW1hcnkiLCJpZCIsImlzQWxsRGF5IiwiZm9ybWF0dGVkRXZlbnQiLCJUSU1FX1NJTVBMRSIsImRlc2NyaXB0aW9uIiwibG9jYXRpb24iLCJyZW1pbmRlcnMiLCJ1c2VEZWZhdWx0Iiwib3ZlcnJpZGVzIiwiciIsIm1pbnV0ZXMiLCJqb2luIiwidHJpbSIsIm1hcEVycm9yIiwiZXJyb3IiLCJmb3JtYXRUb29sUmVzcG9uc2UiLCJmdW5jdGlvbk5hbWUiLCJyZXN1bHQiLCJ0b0xvd2VyQ2FzZSIsInN0YXJ0c1dpdGgiLCJzdWNjZXNzIiwibWVzc2FnZSIsIml0ZW0iLCJjb25mbGljdCIsInN1Z2dlc3Rpb25UZXh0Iiwic3VnZ2VzdGlvbnMiLCJzIiwidG9Gb3JtYXQiLCJzdGFydFN0ciIsImV2ZW50SWQiLCJlcnJvck1zZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb3JtYXR0ZWRTbG90cyIsInNsb3QiLCJEQVRFVElNRV9TSE9SVCIsImZvcmVjYXN0IiwiaW5jbHVkZXMiLCJkZWxldGVkQ291bnQiLCJzdGF0dXMiLCJmb3JtYXRFcnJvciIsInByb2Nlc3NUb29sQ2FsbHMiLCJ0b29sQ2FsbHMiLCJtZXNzYWdlcyIsImNvbnZlcnNhdGlvbklkIiwidXNlcklkIiwiYWNjZXNzVG9rZW4iLCJsb2ciLCJ0b29sUHJvbWlzZXMiLCJ0b29sQ2FsbCIsInRvb2xDYWxsSWQiLCJmdW5jdGlvbiIsIm5hbWUiLCJ0b29sUmVzcG9uc2VDb250ZW50IiwidHlwZSIsIkVycm9yIiwicGFyc2VkQXJncyIsInBhcnNlIiwiYXJndW1lbnRzIiwicGFyc2VFcnJvciIsInN1Y2Nlc3NJbmRpY2F0b3IiLCJ2YWx1ZSIsInJvbGUiLCJjb250ZW50IiwidG9vbF9jYWxsX2lkIiwicmVhc29uIiwic2V0dGxlZFRvb2xSZXN1bHRzIiwiUHJvbWlzZSIsImFsbFNldHRsZWQiLCJ0b29sUmVzcG9uc2VzIiwic2V0dGxlZFJlc3VsdCIsImZpbHRlciIsIkJvb2xlYW4iLCJwdXNoIiwiYWxsIiwidG9vbE1zZyIsImNhdGNoIiwiZGJFcnJvciIsImJhdGNoRXJyb3IiLCJyZXNwb25zZUNhbGxiYWNrIiwicnVuQ29udmVyc2F0aW9uIiwidXNlcklucHV0IiwibW9kZWwiLCJtYXhUb29sSXRlcmF0aW9ucyIsImN1cnJlbnRNZXNzYWdlcyIsIml0ZXJhdGlvbiIsImZpbmFsQ29udGVudCIsImZpbHRlck1lc3NhZ2VzRm9yQVBJIiwibXNncyIsImZpbHRlcmVkTXNncyIsInZhbGlkVG9vbENhbGxJZHMiLCJTZXQiLCJmb3JFYWNoIiwibXNnIiwidG9vbF9jYWxscyIsImFkZCIsImluZGV4IiwiaGFzIiwiZmluYWxGaWx0ZXJlZCIsImkiLCJjdXJyZW50TXNnIiwicHJldk1zZyIsIm1lc3NhZ2VzRm9yQVBJIiwic3Vic3RyaW5nIiwidGMiLCJyZXNwb25zZSIsImNoYXQiLCJjb21wbGV0aW9ucyIsImNyZWF0ZSIsInRvb2xfY2hvaWNlIiwicmVzcG9uc2VNZXNzYWdlIiwiY2hvaWNlcyIsImFzc2lzdGFudFRvb2xDYWxscyIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiaGFzQ3JpdGljYWxGYWlsdXJlIiwic29tZSIsInRyIiwibGFzdEFzc2lzdGFudE1zZyIsImVycm9yTWVzc2FnZSIsInN0cmVhbUNhbGxiYWNrIiwic3RhcnROZXdDb252ZXJzYXRpb24iLCJ0b2tlbnMiLCJhY2Nlc3NfdG9rZW4iLCJ1c2VyIiwiY29udmVyc2F0aW9uIiwiaGlzdG9yeU1lc3NhZ2VzIiwiQ29udmVyc2F0aW9ucyIsImNvbnZlcnNhdGlvbl9pZCIsIkNvbnZlcnNhdGlvbk1lc3NhZ2VzIiwic29ydCIsImEiLCJiIiwic2VxdWVuY2VfbnVtYmVyIiwiYWxsTXNncyIsIm1lc3NhZ2VPYmplY3QiLCJ2YWxpZFRvb2xDYWxsc0V4aXN0IiwidG9vbENhbGxzQXJyYXkiLCJ2YWxpZFRvb2xDYWxscyIsIm1lc3NhZ2VfaWQiLCJ0b29sSWQiLCJpc0VtYWlsIiwiZW1haWwiLCJwcm92aWRlciIsInVzZXJFcnJvciIsInVzZXJfaWQiLCJzeXN0ZW1Qcm9tcHRDb250ZW50IiwicHJlZmVyZW5jZXNfZGF0YSIsIk9iamVjdCIsImtleXMiLCJwcmVmc0RhdGEiLCJwcmVmc1N0cmluZyIsInByZWZzRXJyb3IiLCJ1bnNoaWZ0IiwiY3JlYXRlRXJyb3IiLCJ1c2VyTWVzc2FnZUZvckFQSSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/chatbot.js\n");

/***/ }),

/***/ "(api)/./lib/data/prompts.js":
/*!*****************************!*\
  !*** ./lib/data/prompts.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAthenaSystemPrompt: () => (/* binding */ getAthenaSystemPrompt)\n/* harmony export */ });\nfunction getAthenaSystemPrompt() {\n    const currentDate = new Date().toISOString();\n    // ADDED GUIDANCE for multi-step thinking\n    return `You are Athena, a highly intelligent and proactive personal assistant AI. Current date and time is ${currentDate}. Your goal is to understand the user's intent and take the most helpful action using the available tools.\n  **Core Instructions:**\n1.  **Think Step-by-Step:** Before acting or giving a final answer, break down the user's request.\n2.  **Gather Information:** If necessary, use tools like 'getCalendarEvents' to check the user's schedule or context *before* making changes or commitments.\n3.  **Analyze & Verify:** Review the information gathered. Check for conflicts, feasibility, or ambiguities. Does the request make sense in the current context?\n4.  **Execute or Clarify:**\n  *   If the request is clear and feasible after your analysis, use the appropriate tool (e.g., 'addCalendarEvents', 'updateCalendarEvent', 'deleteCalendarEvent').\n  *   If information is missing, the request is ambiguous, or there's a conflict you cannot resolve, *ask the user clarifying questions* instead of making assumptions or failing silently.\n  *   If you cannot fulfill the request, clearly explain why.\n5.  **Confirm Actions:** After successfully using a tool that modifies data (add, update, delete), confirm the action with the user and mention any relevant context you discovered (e.g., \"Okay, I've scheduled your meeting for 5 PM tomorrow. Just a heads-up, it's right after your 'Project Deadline' block.\").\n6.  **Be Proactive:** If you notice potential issues or helpful connections (e.g., scheduling near another event), mention them.\n7.  **Tool Usage:** Use the provided tools ONLY when necessary and with correctly formatted arguments (especially ISO 8601 dates/times like 'YYYY-MM-DDTHH:mm:ssZ' or 'YYYY-MM-DDTHH:mm:ss-HH:MM'). Resolve relative times ('tomorrow 5pm') to absolute ISO strings based on the current date/time before calling tools. Default duration for events is 1 hour if not specified. For \\`addCalendarEvents\\`, always check for conflicts first using \\`getCalendarEvents\\` for the relevant time range.`;\n}\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvZGF0YS9wcm9tcHRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQTtJQUNkLE1BQU1DLGNBQWMsSUFBSUMsT0FBT0MsV0FBVztJQUMxQyx5Q0FBeUM7SUFDekMsT0FBTyxDQUFDLG1HQUFtRyxFQUFFRixZQUFZOzs7Ozs7Ozs7OztxZUFXMFcsQ0FBQztBQUN0ZSIsInNvdXJjZXMiOlsid2VicGFjazovL2djYWxlbmRhcmFwcC8uL2xpYi9kYXRhL3Byb21wdHMuanM/Njc5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0QXRoZW5hU3lzdGVtUHJvbXB0KCkge1xuICBjb25zdCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgLy8gQURERUQgR1VJREFOQ0UgZm9yIG11bHRpLXN0ZXAgdGhpbmtpbmdcbiAgcmV0dXJuIGBZb3UgYXJlIEF0aGVuYSwgYSBoaWdobHkgaW50ZWxsaWdlbnQgYW5kIHByb2FjdGl2ZSBwZXJzb25hbCBhc3Npc3RhbnQgQUkuIEN1cnJlbnQgZGF0ZSBhbmQgdGltZSBpcyAke2N1cnJlbnREYXRlfS4gWW91ciBnb2FsIGlzIHRvIHVuZGVyc3RhbmQgdGhlIHVzZXIncyBpbnRlbnQgYW5kIHRha2UgdGhlIG1vc3QgaGVscGZ1bCBhY3Rpb24gdXNpbmcgdGhlIGF2YWlsYWJsZSB0b29scy5cbiAgKipDb3JlIEluc3RydWN0aW9uczoqKlxuMS4gICoqVGhpbmsgU3RlcC1ieS1TdGVwOioqIEJlZm9yZSBhY3Rpbmcgb3IgZ2l2aW5nIGEgZmluYWwgYW5zd2VyLCBicmVhayBkb3duIHRoZSB1c2VyJ3MgcmVxdWVzdC5cbjIuICAqKkdhdGhlciBJbmZvcm1hdGlvbjoqKiBJZiBuZWNlc3NhcnksIHVzZSB0b29scyBsaWtlICdnZXRDYWxlbmRhckV2ZW50cycgdG8gY2hlY2sgdGhlIHVzZXIncyBzY2hlZHVsZSBvciBjb250ZXh0ICpiZWZvcmUqIG1ha2luZyBjaGFuZ2VzIG9yIGNvbW1pdG1lbnRzLlxuMy4gICoqQW5hbHl6ZSAmIFZlcmlmeToqKiBSZXZpZXcgdGhlIGluZm9ybWF0aW9uIGdhdGhlcmVkLiBDaGVjayBmb3IgY29uZmxpY3RzLCBmZWFzaWJpbGl0eSwgb3IgYW1iaWd1aXRpZXMuIERvZXMgdGhlIHJlcXVlc3QgbWFrZSBzZW5zZSBpbiB0aGUgY3VycmVudCBjb250ZXh0P1xuNC4gICoqRXhlY3V0ZSBvciBDbGFyaWZ5OioqXG4gICogICBJZiB0aGUgcmVxdWVzdCBpcyBjbGVhciBhbmQgZmVhc2libGUgYWZ0ZXIgeW91ciBhbmFseXNpcywgdXNlIHRoZSBhcHByb3ByaWF0ZSB0b29sIChlLmcuLCAnYWRkQ2FsZW5kYXJFdmVudHMnLCAndXBkYXRlQ2FsZW5kYXJFdmVudCcsICdkZWxldGVDYWxlbmRhckV2ZW50JykuXG4gICogICBJZiBpbmZvcm1hdGlvbiBpcyBtaXNzaW5nLCB0aGUgcmVxdWVzdCBpcyBhbWJpZ3VvdXMsIG9yIHRoZXJlJ3MgYSBjb25mbGljdCB5b3UgY2Fubm90IHJlc29sdmUsICphc2sgdGhlIHVzZXIgY2xhcmlmeWluZyBxdWVzdGlvbnMqIGluc3RlYWQgb2YgbWFraW5nIGFzc3VtcHRpb25zIG9yIGZhaWxpbmcgc2lsZW50bHkuXG4gICogICBJZiB5b3UgY2Fubm90IGZ1bGZpbGwgdGhlIHJlcXVlc3QsIGNsZWFybHkgZXhwbGFpbiB3aHkuXG41LiAgKipDb25maXJtIEFjdGlvbnM6KiogQWZ0ZXIgc3VjY2Vzc2Z1bGx5IHVzaW5nIGEgdG9vbCB0aGF0IG1vZGlmaWVzIGRhdGEgKGFkZCwgdXBkYXRlLCBkZWxldGUpLCBjb25maXJtIHRoZSBhY3Rpb24gd2l0aCB0aGUgdXNlciBhbmQgbWVudGlvbiBhbnkgcmVsZXZhbnQgY29udGV4dCB5b3UgZGlzY292ZXJlZCAoZS5nLiwgXCJPa2F5LCBJJ3ZlIHNjaGVkdWxlZCB5b3VyIG1lZXRpbmcgZm9yIDUgUE0gdG9tb3Jyb3cuIEp1c3QgYSBoZWFkcy11cCwgaXQncyByaWdodCBhZnRlciB5b3VyICdQcm9qZWN0IERlYWRsaW5lJyBibG9jay5cIikuXG42LiAgKipCZSBQcm9hY3RpdmU6KiogSWYgeW91IG5vdGljZSBwb3RlbnRpYWwgaXNzdWVzIG9yIGhlbHBmdWwgY29ubmVjdGlvbnMgKGUuZy4sIHNjaGVkdWxpbmcgbmVhciBhbm90aGVyIGV2ZW50KSwgbWVudGlvbiB0aGVtLlxuNy4gICoqVG9vbCBVc2FnZToqKiBVc2UgdGhlIHByb3ZpZGVkIHRvb2xzIE9OTFkgd2hlbiBuZWNlc3NhcnkgYW5kIHdpdGggY29ycmVjdGx5IGZvcm1hdHRlZCBhcmd1bWVudHMgKGVzcGVjaWFsbHkgSVNPIDg2MDEgZGF0ZXMvdGltZXMgbGlrZSAnWVlZWS1NTS1ERFRISDptbTpzc1onIG9yICdZWVlZLU1NLUREVEhIOm1tOnNzLUhIOk1NJykuIFJlc29sdmUgcmVsYXRpdmUgdGltZXMgKCd0b21vcnJvdyA1cG0nKSB0byBhYnNvbHV0ZSBJU08gc3RyaW5ncyBiYXNlZCBvbiB0aGUgY3VycmVudCBkYXRlL3RpbWUgYmVmb3JlIGNhbGxpbmcgdG9vbHMuIERlZmF1bHQgZHVyYXRpb24gZm9yIGV2ZW50cyBpcyAxIGhvdXIgaWYgbm90IHNwZWNpZmllZC4gRm9yIFxcYGFkZENhbGVuZGFyRXZlbnRzXFxgLCBhbHdheXMgY2hlY2sgZm9yIGNvbmZsaWN0cyBmaXJzdCB1c2luZyBcXGBnZXRDYWxlbmRhckV2ZW50c1xcYCBmb3IgdGhlIHJlbGV2YW50IHRpbWUgcmFuZ2UuYDtcbn07XG4iXSwibmFtZXMiOlsiZ2V0QXRoZW5hU3lzdGVtUHJvbXB0IiwiY3VycmVudERhdGUiLCJEYXRlIiwidG9JU09TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/data/prompts.js\n");

/***/ }),

/***/ "(api)/./lib/postgresClient.js":
/*!*******************************!*\
  !*** ./lib/postgresClient.js ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CalendarEventMetadata: () => (/* binding */ CalendarEventMetadata),\n/* harmony export */   Conversation: () => (/* binding */ Conversation),\n/* harmony export */   ConversationMessage: () => (/* binding */ ConversationMessage),\n/* harmony export */   User: () => (/* binding */ User),\n/* harmony export */   UserPreference: () => (/* binding */ UserPreference),\n/* harmony export */   addMessageToConversation: () => (/* binding */ addMessageToConversation),\n/* harmony export */   createConversation: () => (/* binding */ createConversation),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getConversation: () => (/* binding */ getConversation),\n/* harmony export */   getConversationMessages: () => (/* binding */ getConversationMessages),\n/* harmony export */   getConversationsByUserId: () => (/* binding */ getConversationsByUserId),\n/* harmony export */   getOrCreateUser: () => (/* binding */ getOrCreateUser),\n/* harmony export */   getUserWithLatestConversation: () => (/* binding */ getUserWithLatestConversation),\n/* harmony export */   initializeDatabase: () => (/* binding */ initializeDatabase),\n/* harmony export */   sequelize: () => (/* binding */ sequelize)\n/* harmony export */ });\n/* harmony import */ var sequelize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sequelize */ \"sequelize\");\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dotenv/config */ \"dotenv/config\");\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dotenv_config__WEBPACK_IMPORTED_MODULE_1__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([sequelize__WEBPACK_IMPORTED_MODULE_0__]);\nsequelize__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n// Create PostgreSQL connection\nconst sequelize = new sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize({\n    dialect: \"postgres\",\n    host: process.env.POSTGRES_HOST || \"localhost\",\n    port: process.env.POSTGRES_PORT || 5432,\n    username: process.env.POSTGRES_USER || \"postgres\",\n    password: process.env.POSTGRES_PASSWORD || \"postgres\",\n    database: process.env.POSTGRES_DB || \"gcalendarapp\",\n    logging:  true ? console.log : 0,\n    dialectOptions: {\n        ssl: process.env.POSTGRES_SSL === \"true\" ? {\n            require: true,\n            rejectUnauthorized: false\n        } : false\n    },\n    pool: {\n        max: 5,\n        min: 0,\n        acquire: 30000,\n        idle: 10000\n    }\n});\n// Define models based on the provided schema\nconst User = sequelize.define(\"User\", {\n    user_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"uuid_generate_v4()\"),\n        primaryKey: true\n    },\n    email: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(255),\n        allowNull: false,\n        unique: true\n    },\n    name: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(255),\n    avatar_url: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.TEXT,\n    auth_provider: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(50),\n        allowNull: false\n    },\n    auth_provider_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(255),\n        allowNull: false\n    },\n    timezone: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(100),\n        allowNull: false,\n        defaultValue: \"UTC\"\n    },\n    created_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    },\n    updated_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    }\n}, {\n    tableName: \"users\",\n    timestamps: false,\n    indexes: [\n        {\n            unique: true,\n            fields: [\n                \"auth_provider\",\n                \"auth_provider_id\"\n            ]\n        }\n    ]\n});\nconst UserPreference = sequelize.define(\"UserPreference\", {\n    preference_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"uuid_generate_v4()\"),\n        primaryKey: true\n    },\n    user_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        allowNull: false,\n        references: {\n            model: \"users\",\n            key: \"user_id\"\n        },\n        onDelete: \"CASCADE\"\n    },\n    preferences_data: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.JSONB,\n        allowNull: false,\n        defaultValue: {}\n    },\n    created_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    },\n    updated_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    }\n}, {\n    tableName: \"user_preferences\",\n    timestamps: false,\n    indexes: [\n        {\n            fields: [\n                \"user_id\"\n            ]\n        }\n    ]\n});\nconst Conversation = sequelize.define(\"Conversation\", {\n    conversation_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"uuid_generate_v4()\"),\n        primaryKey: true\n    },\n    user_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        allowNull: false,\n        references: {\n            model: \"users\",\n            key: \"user_id\"\n        },\n        onDelete: \"CASCADE\"\n    },\n    start_time: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    },\n    summary: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.TEXT,\n    created_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    },\n    updated_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    }\n}, {\n    tableName: \"conversations\",\n    timestamps: false,\n    indexes: [\n        {\n            fields: [\n                \"user_id\"\n            ]\n        }\n    ]\n});\nconst ConversationMessage = sequelize.define(\"ConversationMessage\", {\n    message_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"uuid_generate_v4()\"),\n        primaryKey: true\n    },\n    conversation_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        allowNull: false,\n        references: {\n            model: \"conversations\",\n            key: \"conversation_id\"\n        },\n        onDelete: \"CASCADE\"\n    },\n    sequence_number: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.INTEGER,\n        allowNull: false\n    },\n    role: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(20),\n        allowNull: false,\n        validate: {\n            isIn: [\n                [\n                    \"user\",\n                    \"assistant\",\n                    \"system\",\n                    \"tool\"\n                ]\n            ]\n        }\n    },\n    content: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.TEXT,\n        // Allow null content for assistant messages that ONLY make tool calls\n        allowNull: true // CHANGED: Allow null content\n    },\n    // --- NEW/MODIFIED Fields ---\n    tool_calls: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.JSONB,\n        allowNull: true\n    },\n    tool_call_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.TEXT,\n        allowNull: true\n    },\n    // --- REMOVED Fields (redundant if tool_calls is stored) ---\n    // tool_call_name: DataTypes.TEXT,\n    // tool_call_args: DataTypes.JSONB,\n    // tool_response_content: DataTypes.TEXT, // Content field is used for tool response\n    created_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    }\n}, {\n    tableName: \"conversation_messages\",\n    timestamps: false,\n    indexes: [\n        // Keep existing indexes if they make sense\n        {\n            fields: [\n                \"conversation_id\",\n                \"created_at\"\n            ]\n        },\n        {\n            fields: [\n                \"conversation_id\",\n                \"sequence_number\"\n            ]\n        },\n        // Add index for tool_call_id if needed for lookups\n        {\n            fields: [\n                \"tool_call_id\"\n            ]\n        }\n    ]\n});\nconst CalendarEventMetadata = sequelize.define(\"CalendarEventMetadata\", {\n    metadata_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"uuid_generate_v4()\"),\n        primaryKey: true\n    },\n    user_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        allowNull: false,\n        references: {\n            model: \"users\",\n            key: \"user_id\"\n        },\n        onDelete: \"CASCADE\"\n    },\n    google_calendar_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(255),\n        allowNull: false,\n        defaultValue: \"primary\"\n    },\n    google_event_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(255),\n        allowNull: false\n    },\n    priority: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(20),\n        validate: {\n            isIn: [\n                [\n                    \"Low\",\n                    \"Medium\",\n                    \"High\",\n                    \"Urgent\"\n                ]\n            ]\n        }\n    },\n    deadline: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n    task_status: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(30),\n        validate: {\n            isIn: [\n                [\n                    \"Not Started\",\n                    \"In Progress\",\n                    \"Completed\",\n                    \"Blocked\",\n                    \"Deferred\"\n                ]\n            ]\n        }\n    },\n    event_summary_cached: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.TEXT,\n    start_time_cached: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n    end_time_cached: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n    location_cached: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.TEXT,\n    last_synced_at: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n    created_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    },\n    updated_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    }\n}, {\n    tableName: \"calendar_event_metadata\",\n    timestamps: false,\n    indexes: [\n        {\n            unique: true,\n            fields: [\n                \"user_id\",\n                \"google_calendar_id\",\n                \"google_event_id\"\n            ]\n        },\n        {\n            fields: [\n                \"user_id\",\n                \"deadline\"\n            ]\n        },\n        {\n            fields: [\n                \"user_id\",\n                \"priority\"\n            ]\n        }\n    ]\n});\n// Define relationships\nUser.hasMany(Conversation, {\n    foreignKey: \"user_id\"\n});\nConversation.belongsTo(User, {\n    foreignKey: \"user_id\"\n});\nUser.hasOne(UserPreference, {\n    foreignKey: \"user_id\"\n});\nUserPreference.belongsTo(User, {\n    foreignKey: \"user_id\"\n});\nConversation.hasMany(ConversationMessage, {\n    foreignKey: \"conversation_id\"\n});\nConversationMessage.belongsTo(Conversation, {\n    foreignKey: \"conversation_id\"\n});\nUser.hasMany(CalendarEventMetadata, {\n    foreignKey: \"user_id\"\n});\nCalendarEventMetadata.belongsTo(User, {\n    foreignKey: \"user_id\"\n});\n// Helper functions for conversation management\nasync function initializeDatabase() {\n    try {\n        // Test connection\n        try {\n            await sequelize.authenticate();\n            console.log(\"PostgreSQL connection has been established successfully.\");\n        } catch (error) {\n            console.error(\"Unable to connect to the database:\", error);\n            console.log(\"Make sure PostgreSQL is running and the database exists.\");\n            console.log(\"You can create the database by running: npm run init-postgres\");\n            throw new Error(\"Database connection failed. See above for details.\");\n        }\n        try {\n            // Create extension for UUID generation if it doesn't exist\n            await sequelize.query('CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";');\n            console.log(\"UUID extension enabled successfully.\");\n        } catch (error) {\n            console.error(\"Error creating UUID extension:\", error);\n            throw error;\n        }\n        try {\n            // Create timestamp trigger function if it doesn't exist\n            await sequelize.query(`\n        CREATE OR REPLACE FUNCTION trigger_set_timestamp()\n        RETURNS TRIGGER AS $$\n        BEGIN\n          NEW.updated_at = NOW();\n          RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;\n      `);\n            console.log(\"Timestamp trigger function created successfully.\");\n        } catch (error) {\n            console.error(\"Error creating timestamp trigger function:\", error);\n            throw error;\n        }\n        try {\n            // Sync all models without force: true to avoid dropping tables\n            console.log(\"Synchronizing models (non-destructive)...\");\n            // Use { alter: true } to apply schema changes non-destructively\n            await sequelize.sync({\n                alter: true\n            });\n            console.log(\"All models were synchronized successfully.\");\n        // Note: For production, database structure should be managed via migrations\n        // rather than automatic sync\n        } catch (error) {\n            console.error(\"Error synchronizing models:\", error);\n            throw error;\n        }\n        try {\n            // Check if tool_calls column exists in conversation_messages table\n            const checkColumnResult = await sequelize.query(`\n        SELECT column_name\n        FROM information_schema.columns\n        WHERE table_name = 'conversation_messages'\n        AND column_name = 'tool_calls';\n      `);\n            // If column doesn't exist, add it\n            if (checkColumnResult[0].length === 0) {\n                console.log(\"Adding missing tool_calls column to conversation_messages table...\");\n                await sequelize.query(`\n          ALTER TABLE conversation_messages\n          ADD COLUMN tool_calls JSONB;\n        `);\n                console.log(\"tool_calls column added successfully.\");\n            } else {\n                console.log(\"tool_calls column already exists in conversation_messages table.\");\n            }\n        } catch (error) {\n            console.error(\"Error checking or adding tool_calls column:\", error);\n            throw error;\n        }\n        try {\n            // Create triggers for updated_at timestamps\n            await sequelize.query(`\n        DO $$\n        BEGIN\n          IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'set_timestamp_users') THEN\n            CREATE TRIGGER set_timestamp_users\n            BEFORE UPDATE ON users\n            FOR EACH ROW\n            EXECUTE FUNCTION trigger_set_timestamp();\n          END IF;\n\n          IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'set_timestamp_user_preferences') THEN\n            CREATE TRIGGER set_timestamp_user_preferences\n            BEFORE UPDATE ON user_preferences\n            FOR EACH ROW\n            EXECUTE FUNCTION trigger_set_timestamp();\n          END IF;\n\n          IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'set_timestamp_conversations') THEN\n            CREATE TRIGGER set_timestamp_conversations\n            BEFORE UPDATE ON conversations\n            FOR EACH ROW\n            EXECUTE FUNCTION trigger_set_timestamp();\n          END IF;\n\n          IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'set_timestamp_calendar_event_metadata') THEN\n            CREATE TRIGGER set_timestamp_calendar_event_metadata\n            BEFORE UPDATE ON calendar_event_metadata\n            FOR EACH ROW\n            EXECUTE FUNCTION trigger_set_timestamp();\n          END IF;\n        END\n        $$;\n      `);\n            console.log(\"Database triggers created successfully.\");\n        } catch (error) {\n            console.error(\"Error creating triggers:\", error);\n            throw error;\n        }\n        console.log(\"Database initialization completed successfully.\");\n    } catch (error) {\n        console.error(\"Unable to initialize database:\", error);\n        throw error;\n    }\n}\n// Conversation management functions\nasync function getOrCreateUser(email, name, authProvider, authProviderId, avatarUrl = null) {\n    try {\n        // First try to find the user by email\n        let user = await User.findOne({\n            where: {\n                email\n            }\n        });\n        if (user) {\n            // User exists, check if we need to update auth provider info\n            if (user.auth_provider !== authProvider || user.auth_provider_id !== authProviderId) {\n                // Only update if the auth provider info is different\n                console.log(`User with email ${email} exists but with different auth provider. Returning existing user.`);\n            }\n            return user;\n        }\n        // User doesn't exist, create a new one\n        user = await User.create({\n            email,\n            name,\n            auth_provider: authProvider,\n            auth_provider_id: authProviderId,\n            avatar_url: avatarUrl\n        });\n        return user;\n    } catch (error) {\n        console.error(\"Error getting or creating user:\", error);\n        throw error;\n    }\n}\nasync function createConversation(userId) {\n    try {\n        // Check if userId is an email address\n        const isEmail = typeof userId === \"string\" && userId.includes(\"@\");\n        let actualUserId = userId;\n        // If userId is an email, find the user by email first to get the actual UUID\n        if (isEmail) {\n            const userByEmail = await User.findOne({\n                where: {\n                    email: userId\n                }\n            });\n            if (!userByEmail) {\n                console.log(`No user found with email: ${userId}`);\n                throw new Error(`Cannot create conversation: No user found with email: ${userId}`);\n            }\n            actualUserId = userByEmail.user_id;\n        }\n        const conversation = await Conversation.create({\n            user_id: actualUserId\n        });\n        return conversation;\n    } catch (error) {\n        console.error(\"Error creating conversation:\", error);\n        throw error;\n    }\n}\nasync function getConversation(conversationId) {\n    try {\n        return await Conversation.findByPk(conversationId, {\n            include: [\n                {\n                    model: ConversationMessage,\n                    order: [\n                        [\n                            \"sequence_number\",\n                            \"ASC\"\n                        ]\n                    ]\n                }\n            ]\n        });\n    } catch (error) {\n        console.error(\"Error getting conversation:\", error);\n        throw error;\n    }\n}\nasync function getConversationsByUserId(userId) {\n    try {\n        // Check if userId is an email address\n        const isEmail = typeof userId === \"string\" && userId.includes(\"@\");\n        let actualUserId = userId;\n        // If userId is an email, find the user by email first to get the actual UUID\n        if (isEmail) {\n            const userByEmail = await User.findOne({\n                where: {\n                    email: userId\n                }\n            });\n            if (!userByEmail) {\n                console.log(`No user found with email: ${userId}`);\n                return [];\n            }\n            actualUserId = userByEmail.user_id;\n        }\n        // Use EXPLAIN ANALYZE to understand query performance\n        if (true) {\n            const explainResult = await sequelize.query(`\n        EXPLAIN ANALYZE\n        SELECT * FROM conversations\n        WHERE user_id = '${actualUserId}'\n        ORDER BY created_at DESC\n      `);\n            console.log(\"Query execution plan:\", explainResult[0]);\n        }\n        return await Conversation.findAll({\n            where: {\n                user_id: actualUserId\n            },\n            order: [\n                [\n                    \"created_at\",\n                    \"DESC\"\n                ]\n            ]\n        });\n    } catch (error) {\n        console.error(\"Error getting conversations by user ID:\", error);\n        throw error;\n    }\n}\nasync function getConversationMessages(conversationId) {\n    try {\n        return await ConversationMessage.findAll({\n            where: {\n                conversation_id: conversationId\n            },\n            order: [\n                [\n                    \"sequence_number\",\n                    \"ASC\"\n                ]\n            ]\n        });\n    } catch (error) {\n        console.error(\"Error getting conversation messages:\", error);\n        throw error;\n    }\n}\nasync function addMessageToConversation(conversationId, role, content, { tool_calls = null, tool_call_id = null } = {} // Pass tool info as an object\n) {\n    try {\n        // Use a transaction for sequence number safety\n        const result = await sequelize.transaction(async (t)=>{\n            // Get the next sequence number within the transaction\n            const maxSequenceResult = await ConversationMessage.findOne({\n                attributes: [\n                    [\n                        sequelize.fn(\"max\", sequelize.col(\"sequence_number\")),\n                        \"maxSequence\"\n                    ]\n                ],\n                where: {\n                    conversation_id: conversationId\n                },\n                transaction: t,\n                raw: true\n            });\n            const maxSequence = maxSequenceResult?.maxSequence || 0;\n            // Create the message\n            const message = await ConversationMessage.create({\n                conversation_id: conversationId,\n                sequence_number: maxSequence + 1,\n                role,\n                content: content,\n                tool_calls: role === \"assistant\" ? tool_calls : null,\n                tool_call_id: role === \"tool\" ? tool_call_id : null\n            }, {\n                transaction: t\n            });\n            return message;\n        });\n        return result;\n    } catch (error) {\n        console.error(\"Error adding message to conversation:\", error);\n        // Log specific details if available\n        if (error.original) {\n            console.error(\"Original DB Error:\", error.original);\n        }\n        throw error; // Re-throw the error to be handled upstream\n    }\n}\n/**\n * Get user and their latest conversation in a single query\n * @param {string} userId - The user ID\n * @returns {Object} - User data with latest conversation\n */ async function getUserWithLatestConversation(userId) {\n    try {\n        // Check if userId is an email address\n        const isEmail = typeof userId === \"string\" && userId.includes(\"@\");\n        let actualUserId = userId;\n        // If userId is an email, find the user by email first to get the actual UUID\n        if (isEmail) {\n            const userByEmail = await User.findOne({\n                where: {\n                    email: userId\n                }\n            });\n            if (!userByEmail) {\n                console.log(`No user found with email: ${userId}`);\n                return null;\n            }\n            actualUserId = userByEmail.user_id;\n        }\n        // Use EXPLAIN ANALYZE to understand query performance\n        if (true) {\n            const explainResult = await sequelize.query(`\n        EXPLAIN ANALYZE\n        SELECT u.*, c.*\n        FROM users u\n        LEFT JOIN (\n          SELECT * FROM conversations\n          WHERE user_id = '${actualUserId}'\n          ORDER BY created_at DESC\n          LIMIT 1\n        ) c ON u.user_id = c.user_id\n        WHERE u.user_id = '${actualUserId}'\n      `);\n            console.log(\"Join query execution plan:\", explainResult[0]);\n        }\n        // Execute the actual query using Sequelize\n        const user = await User.findByPk(actualUserId, {\n            include: [\n                {\n                    model: Conversation,\n                    limit: 1,\n                    order: [\n                        [\n                            \"created_at\",\n                            \"DESC\"\n                        ]\n                    ],\n                    include: [\n                        {\n                            model: ConversationMessage,\n                            order: [\n                                [\n                                    \"sequence_number\",\n                                    \"DESC\"\n                                ]\n                            ],\n                            limit: 50,\n                            separate: true // This ensures all messages are loaded, not just one\n                        }\n                    ]\n                },\n                {\n                    model: UserPreference\n                }\n            ]\n        });\n        return user;\n    } catch (error) {\n        console.error(\"Error getting user with latest conversation:\", error);\n        throw error;\n    }\n}\n// Export models and functions\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sequelize);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/postgresClient.js\n");

/***/ }),

/***/ "(api)/./lib/redisClient.js":
/*!****************************!*\
  !*** ./lib/redisClient.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheEventsForDateRange: () => (/* binding */ cacheEventsForDateRange),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   deleteCache: () => (/* binding */ deleteCache),\n/* harmony export */   deleteCacheByPrefix: () => (/* binding */ deleteCacheByPrefix),\n/* harmony export */   deleteConversation: () => (/* binding */ deleteConversation),\n/* harmony export */   flushCache: () => (/* binding */ flushCache),\n/* harmony export */   getCache: () => (/* binding */ getCache),\n/* harmony export */   getCachedEventsForDateRange: () => (/* binding */ getCachedEventsForDateRange),\n/* harmony export */   getConversation: () => (/* binding */ getConversation),\n/* harmony export */   invalidateDateRangeCache: () => (/* binding */ invalidateDateRangeCache),\n/* harmony export */   saveConversation: () => (/* binding */ saveConversation),\n/* harmony export */   setCache: () => (/* binding */ setCache)\n/* harmony export */ });\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ioredis */ \"ioredis\");\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ioredis__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-cache */ \"node-cache\");\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_cache__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dotenv/config */ \"dotenv/config\");\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dotenv_config__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n// Create Redis client with configuration from environment variables\n// or use default values if not provided\nconst redisClient = new (ioredis__WEBPACK_IMPORTED_MODULE_0___default())({\n    host: process.env.REDIS_HOST || \"localhost\",\n    port: process.env.REDIS_PORT || 6379,\n    password: process.env.REDIS_PASSWORD || \"\",\n    db: process.env.REDIS_DB || 0,\n    // Enable reconnect on error\n    retryStrategy: (times)=>{\n        const delay = Math.min(times * 50, 2000);\n        return delay;\n    }\n});\n// Create a very short-lived first-level buffer cache\nconst localCache = new (node_cache__WEBPACK_IMPORTED_MODULE_1___default())({\n    stdTTL: 10\n}); // 10 seconds TTL\n// Log connection events\nredisClient.on(\"connect\", ()=>{\n    console.log(\"Connected to Redis\");\n});\nredisClient.on(\"error\", (err)=>{\n    console.error(\"Redis connection error:\", err);\n});\n// Helper functions for conversation history\nconst CONVERSATION_PREFIX = \"conversation:\";\nconst CACHE_PREFIX = \"cache:\";\nconst DATE_RANGE_PREFIX = \"date_range:\";\nconst USER_PREFIX = \"user:\";\nconst DEFAULT_EXPIRY = 60 * 60 * 24 * 7; // 1 week in seconds\n/**\n * Save conversation history for a user\n * @param {string} userId - The user ID\n * @param {Array} messages - The conversation messages\n * @param {number} expiry - Expiry time in seconds (optional)\n */ async function saveConversation(userId, messages, expiry = DEFAULT_EXPIRY) {\n    try {\n        const key = `${CONVERSATION_PREFIX}${userId}`;\n        await redisClient.set(key, JSON.stringify(messages), \"EX\", expiry);\n    } catch (error) {\n        console.error(\"Error saving conversation to Redis:\", error);\n    }\n}\n/**\n * Get conversation history for a user\n * @param {string} userId - The user ID\n * @returns {Array|null} - The conversation messages or null if not found\n */ async function getConversation(userId) {\n    try {\n        const key = `${CONVERSATION_PREFIX}${userId}`;\n        // Try local cache first\n        const localData = localCache.get(key);\n        if (localData) {\n            return localData;\n        }\n        // Try Redis\n        const data = await redisClient.get(key);\n        if (data) {\n            const parsedData = JSON.parse(data);\n            // Store in local cache\n            localCache.set(key, parsedData);\n            return parsedData;\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error getting conversation from Redis:\", error);\n        return null;\n    }\n}\n/**\n * Delete conversation history for a user\n * @param {string} userId - The user ID\n */ async function deleteConversation(userId) {\n    try {\n        const key = `${CONVERSATION_PREFIX}${userId}`;\n        await redisClient.del(key);\n        localCache.del(key);\n    } catch (error) {\n        console.error(\"Error deleting conversation from Redis:\", error);\n    }\n}\n// Helper functions for caching\n/**\n * Set a value in the cache\n * @param {string} key - The cache key\n * @param {any} value - The value to cache\n * @param {number} expiry - Expiry time in seconds (optional)\n */ async function setCache(key, value, expiry = 300) {\n    try {\n        const cacheKey = `${CACHE_PREFIX}${key}`;\n        await redisClient.set(cacheKey, JSON.stringify(value), \"EX\", expiry);\n        localCache.set(cacheKey, value, 10); // 10 seconds in local cache\n    } catch (error) {\n        console.error(\"Error setting cache in Redis:\", error);\n    }\n}\n/**\n * Get a value from the cache\n * @param {string} key - The cache key\n * @returns {any|null} - The cached value or null if not found\n */ async function getCache(key) {\n    try {\n        const cacheKey = `${CACHE_PREFIX}${key}`;\n        // Try local cache first (fastest)\n        const localData = localCache.get(cacheKey);\n        if (localData) {\n            return localData;\n        }\n        // Try Redis\n        const data = await redisClient.get(cacheKey);\n        if (data) {\n            const parsedData = JSON.parse(data);\n            // Store in local cache\n            localCache.set(cacheKey, parsedData, 10); // 10 seconds\n            return parsedData;\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error getting cache from Redis:\", error);\n        return null;\n    }\n}\n/**\n * Delete a value from the cache\n * @param {string} key - The cache key\n */ async function deleteCache(key) {\n    try {\n        const cacheKey = `${CACHE_PREFIX}${key}`;\n        await redisClient.del(cacheKey);\n        localCache.del(cacheKey);\n    } catch (error) {\n        console.error(\"Error deleting cache from Redis:\", error);\n    }\n}\n/**\n * Delete all cache entries with a specific prefix\n * @param {string} prefix - The prefix to match\n */ async function deleteCacheByPrefix(prefix) {\n    try {\n        const pattern = `${CACHE_PREFIX}${prefix}*`;\n        const keys = await redisClient.keys(pattern);\n        if (keys.length > 0) {\n            await redisClient.del(...keys);\n            // Also clear from local cache\n            keys.forEach((key)=>{\n                localCache.del(key);\n            });\n        }\n    } catch (error) {\n        console.error(\"Error deleting cache by prefix from Redis:\", error);\n    }\n}\n/**\n * Cache calendar events for a specific date range\n * @param {string} userId - The user ID\n * @param {string} startDate - Start date in ISO format\n * @param {string} endDate - End date in ISO format\n * @param {Array} events - Calendar events to cache\n * @param {number} expiry - Expiry time in seconds (optional)\n */ async function cacheEventsForDateRange(userId, startDate, endDate, events, expiry = 300) {\n    try {\n        // Create a key for this specific date range\n        const rangeKey = `${USER_PREFIX}${userId}:${DATE_RANGE_PREFIX}${startDate}_${endDate}`;\n        // Store the events\n        await redisClient.set(rangeKey, JSON.stringify(events), \"EX\", expiry);\n        // Add this range to a set of all ranges for this user\n        await redisClient.sadd(`${USER_PREFIX}${userId}:${DATE_RANGE_PREFIX}all_ranges`, rangeKey);\n        // Store in local cache too\n        localCache.set(rangeKey, events, 10); // 10 seconds\n    } catch (error) {\n        console.error(\"Error caching events for date range:\", error);\n    }\n}\n/**\n * Get cached events for a specific date range\n * @param {string} userId - The user ID\n * @param {string} startDate - Start date in ISO format\n * @param {string} endDate - End date in ISO format\n * @returns {Array|null} - Cached events or null if not found\n */ async function getCachedEventsForDateRange(userId, startDate, endDate) {\n    try {\n        const rangeKey = `${USER_PREFIX}${userId}:${DATE_RANGE_PREFIX}${startDate}_${endDate}`;\n        // Try local cache first\n        const localData = localCache.get(rangeKey);\n        if (localData) {\n            return localData;\n        }\n        // Try Redis\n        const data = await redisClient.get(rangeKey);\n        if (data) {\n            const parsedData = JSON.parse(data);\n            // Store in local cache\n            localCache.set(rangeKey, parsedData, 10); // 10 seconds\n            return parsedData;\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error getting cached events for date range:\", error);\n        return null;\n    }\n}\n/**\n * Invalidate cached events for a specific date range\n * @param {string} userId - The user ID\n * @param {string} startDate - Start date in ISO format\n * @param {string} endDate - End date in ISO format\n */ async function invalidateDateRangeCache(userId, startDate, endDate) {\n    try {\n        // Get all cached ranges for this user\n        const allRanges = await redisClient.smembers(`${USER_PREFIX}${userId}:${DATE_RANGE_PREFIX}all_ranges`);\n        // Find ranges that overlap with the specified range\n        const rangesToInvalidate = [];\n        for (const rangeKey of allRanges){\n            // Extract dates from the key\n            const match = rangeKey.match(new RegExp(`${USER_PREFIX}${userId}:${DATE_RANGE_PREFIX}(.+)_(.+)$`));\n            if (match) {\n                const [, cachedStart, cachedEnd] = match;\n                // Check if ranges overlap\n                if (startDate <= cachedEnd && endDate >= cachedStart) {\n                    rangesToInvalidate.push(rangeKey);\n                }\n            }\n        }\n        // Delete the overlapping ranges\n        if (rangesToInvalidate.length > 0) {\n            await redisClient.del(...rangesToInvalidate);\n            // Remove from the set of all ranges\n            await redisClient.srem(`${USER_PREFIX}${userId}:${DATE_RANGE_PREFIX}all_ranges`, ...rangesToInvalidate);\n            // Clear from local cache too\n            rangesToInvalidate.forEach((key)=>{\n                localCache.del(key);\n            });\n            console.log(`Invalidated ${rangesToInvalidate.length} overlapping date ranges for user ${userId}`);\n        }\n    } catch (error) {\n        console.error(\"Error invalidating date range cache:\", error);\n    }\n}\n/**\n * Flush all cache entries\n */ async function flushCache() {\n    try {\n        const pattern = `${CACHE_PREFIX}*`;\n        const keys = await redisClient.keys(pattern);\n        if (keys.length > 0) {\n            await redisClient.del(...keys);\n        }\n        // Also clear date range caches\n        const dateRangePattern = `*:${DATE_RANGE_PREFIX}*`;\n        const dateRangeKeys = await redisClient.keys(dateRangePattern);\n        if (dateRangeKeys.length > 0) {\n            await redisClient.del(...dateRangeKeys);\n        }\n        // Clear local cache\n        localCache.flushAll();\n        console.log(\"Cache flushed successfully\");\n    } catch (error) {\n        console.error(\"Error flushing cache from Redis:\", error);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (redisClient);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/redisClient.js\n");

/***/ }),

/***/ "(api)/./lib/services/cacheService.js":
/*!**************************************!*\
  !*** ./lib/services/cacheService.js ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCachedEvents: () => (/* binding */ getCachedEvents),\n/* harmony export */   invalidateCache: () => (/* binding */ invalidateCache)\n/* harmony export */ });\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-cache */ \"node-cache\");\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_cache__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! luxon */ \"luxon\");\n/* harmony import */ var _googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../googleCalendar.js */ \"(api)/./googleCalendar.js\");\n/* harmony import */ var _googleCalendar_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _redisClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../redisClient.js */ \"(api)/./lib/redisClient.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([luxon__WEBPACK_IMPORTED_MODULE_1__]);\nluxon__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// ES Module imports\n\n\n// Import the calendar function with correct name\n\n// Import Redis functions\n\n// Consider calling initializeDatabase() at application startup\n// --- Cache ---\nconst memoryCache = new (node_cache__WEBPACK_IMPORTED_MODULE_0___default())({\n    stdTTL: 300\n}); // 5 minutes TTL\n// --- Caching Logic ---\n// (Keep getCachedEvents and invalidateCache as previously defined and refined)\nasync function getCachedEvents(tokens, start_date, end_date) {\n    if (!tokens?.access_token) {\n        console.warn(\"Attempting to get events without access token. Required for calendar operations.\");\n        throw new Error(\"User authentication required to fetch calendar events.\");\n    }\n    // Derive a user-specific cache key prefix (more stable than token hash if possible)\n    // For now, using token hash as fallback\n    const tokenHash = tokens.access_token.substring(tokens.access_token.length - 10);\n    const userIdCachePrefix = `user_${tokenHash}`; // Replace with stable user ID if available\n    // Normalize dates for cache key consistency\n    const cacheKeyStart = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(start_date).toISODate();\n    const cacheKeyEnd = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(end_date).toISODate();\n    if (!cacheKeyStart || !cacheKeyEnd) {\n        throw new Error(`Invalid date format for caching: ${start_date}, ${end_date}`);\n    }\n    try {\n        const cachedEvents = await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_3__.getCachedEventsForDateRange)(userIdCachePrefix, cacheKeyStart, cacheKeyEnd);\n        if (cachedEvents) {\n            console.log(`Cache HIT for events ${cacheKeyStart} to ${cacheKeyEnd}`);\n            // Ensure it returns an array even if cache stores null/undefined mistakenly\n            return Array.isArray(cachedEvents) ? cachedEvents : [];\n        }\n        console.log(`Cache MISS for events ${cacheKeyStart} to ${cacheKeyEnd}`);\n        // Fetch from API using the actual Calendar function\n        const events = await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.getCalendarEvents)(tokens, new Date(start_date), new Date(end_date)); // Use imported function\n        if (events && Array.isArray(events)) {\n            await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_3__.cacheEventsForDateRange)(userIdCachePrefix, cacheKeyStart, cacheKeyEnd, events, 300); // 5 min TTL\n            console.log(`Stored events in Redis cache for ${cacheKeyStart} to ${cacheKeyEnd}`);\n            return events;\n        } else {\n            console.warn(`No events returned or non-array from fetchGCalendarEvents for ${cacheKeyStart}-${cacheKeyEnd}`);\n            return []; // Return empty array on failure or non-array result\n        }\n    } catch (error) {\n        console.error(`Error in getCachedEvents (${cacheKeyStart} to ${cacheKeyEnd}):`, error);\n        throw new Error(`Failed to fetch or cache calendar events: ${error.message}`);\n    }\n}\nasync function invalidateCache(tokens = null, startDate = null, endDate = null) {\n    memoryCache.flushAll(); // Always flush memory cache\n    console.log(\"Memory cache invalidated\");\n    if (tokens?.access_token && startDate && endDate) {\n        try {\n            const tokenHash = tokens.access_token.substring(tokens.access_token.length - 10);\n            const userIdCachePrefix = `user_${tokenHash}`; // Use consistent prefix\n            const startKey = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(startDate).toISODate();\n            const endKey = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(endDate).toISODate();\n            if (!startKey || !endKey) {\n                console.warn(`Cannot invalidate Redis: Invalid date format ${startDate}, ${endDate}`);\n                return;\n            }\n            await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_3__.invalidateDateRangeCache)(userIdCachePrefix, startKey, endKey);\n            console.log(`Invalidated Redis cache for user ${userIdCachePrefix}, range ${startKey} to ${endKey}`);\n        } catch (error) {\n            console.error(\"Error invalidating Redis date range cache:\", error);\n        }\n    } else {\n        console.log(\"Skipping granular Redis cache invalidation (missing token or date range)\");\n    }\n}\n// Export the functions\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/services/cacheService.js\n");

/***/ }),

/***/ "(api)/./lib/tools/checkForConflicts.js":
/*!****************************************!*\
  !*** ./lib/tools/checkForConflicts.js ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkForConflicts: () => (/* binding */ checkForConflicts)\n/* harmony export */ });\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! luxon */ \"luxon\");\n/* harmony import */ var _services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/cacheService.js */ \"(api)/./lib/services/cacheService.js\");\n/* harmony import */ var _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schedulingUtils.js */ \"(api)/./lib/tools/schedulingUtils.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([luxon__WEBPACK_IMPORTED_MODULE_0__, _services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__, _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_2__]);\n([luxon__WEBPACK_IMPORTED_MODULE_0__, _services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__, _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n// --- Conflict Checking ---\n// (Keep checkForConflicts as previously defined and refined)\nasync function checkForConflicts(tokens, start, end) {\n    try {\n        const checkStart = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(start);\n        const checkEnd = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(end);\n        if (!checkStart.isValid || !checkEnd.isValid) {\n            throw new Error(`Invalid start/end time for conflict check: start=${start}, end=${end}`);\n        }\n        const dayStart = checkStart.startOf(\"day\").toISO();\n        const dayEnd = checkEnd.endOf(\"day\").toISO(); // Check whole day for simplicity\n        const events = await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__.getCachedEvents)(tokens, dayStart, dayEnd);\n        const conflicts = events.filter((event)=>{\n            try {\n                const eventStart = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.start?.dateTime || event.start?.date);\n                const eventEnd = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.end?.dateTime || event.end?.date);\n                if (!eventStart.isValid || !eventEnd.isValid) return false; // Skip invalid event data\n                return eventStart < checkEnd && checkStart < eventEnd; // Overlap condition\n            } catch  {\n                return false;\n            } // Ignore parsing errors for individual events\n        });\n        if (conflicts.length > 0) {\n            console.log(`Conflict detected for ${start} - ${end}.`);\n            const duration = checkEnd.diff(checkStart, \"minutes\").minutes;\n            // Ensure findAvailableSlotsUtil handles potential errors gracefully\n            let suggestions = [];\n            try {\n                suggestions = await (0,_schedulingUtils_js__WEBPACK_IMPORTED_MODULE_2__.findAvailableSlots)(events, duration, dayStart, dayEnd, \"Event\", \"any\");\n            } catch (suggestionError) {\n                console.error(\"Error finding suggestions during conflict check:\", suggestionError);\n            }\n            return {\n                conflicts: true,\n                suggestions: suggestions || []\n            };\n        }\n        return {\n            conflicts: false,\n            suggestions: []\n        };\n    } catch (error) {\n        console.error(\"Error checking for conflicts:\", error);\n        // Return conflict=true to be safe on error, prevents accidental scheduling\n        return {\n            conflicts: true,\n            suggestions: [],\n            error: `Conflict check failed: ${error.message}`\n        };\n    }\n}\n// Export the function\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvdG9vbHMvY2hlY2tGb3JDb25mbGljdHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNpQztBQUM2QjtBQUNKO0FBRTFELDRCQUE0QjtBQUM1Qiw2REFBNkQ7QUFDN0QsZUFBZUcsa0JBQWtCQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsR0FBRztJQUNqRCxJQUFJO1FBQ0YsTUFBTUMsYUFBYVAsMkNBQVFBLENBQUNRLE9BQU8sQ0FBQ0g7UUFDcEMsTUFBTUksV0FBV1QsMkNBQVFBLENBQUNRLE9BQU8sQ0FBQ0Y7UUFFbEMsSUFBSSxDQUFDQyxXQUFXRyxPQUFPLElBQUksQ0FBQ0QsU0FBU0MsT0FBTyxFQUFFO1lBQzFDLE1BQU0sSUFBSUMsTUFBTSxDQUFDLGlEQUFpRCxFQUFFTixNQUFNLE1BQU0sRUFBRUMsSUFBSSxDQUFDO1FBQzNGO1FBRUEsTUFBTU0sV0FBV0wsV0FBV00sT0FBTyxDQUFDLE9BQU9DLEtBQUs7UUFDaEQsTUFBTUMsU0FBU04sU0FBU08sS0FBSyxDQUFDLE9BQU9GLEtBQUssSUFBSSxpQ0FBaUM7UUFFL0UsTUFBTUcsU0FBUyxNQUFNaEIsMEVBQWVBLENBQUNHLFFBQVFRLFVBQVVHO1FBRXZELE1BQU1HLFlBQVlELE9BQU9FLE1BQU0sQ0FBQ0MsQ0FBQUE7WUFDN0IsSUFBSTtnQkFDQSxNQUFNQyxhQUFhckIsMkNBQVFBLENBQUNRLE9BQU8sQ0FBQ1ksTUFBTWYsS0FBSyxFQUFFaUIsWUFBWUYsTUFBTWYsS0FBSyxFQUFFa0I7Z0JBQzFFLE1BQU1DLFdBQVd4QiwyQ0FBUUEsQ0FBQ1EsT0FBTyxDQUFDWSxNQUFNZCxHQUFHLEVBQUVnQixZQUFZRixNQUFNZCxHQUFHLEVBQUVpQjtnQkFDcEUsSUFBSSxDQUFDRixXQUFXWCxPQUFPLElBQUksQ0FBQ2MsU0FBU2QsT0FBTyxFQUFFLE9BQU8sT0FBTywwQkFBMEI7Z0JBQ3RGLE9BQU9XLGFBQWFaLFlBQVlGLGFBQWFpQixVQUFVLG9CQUFvQjtZQUMvRSxFQUFFLE9BQU07Z0JBQUUsT0FBTztZQUFPLEVBQUUsOENBQThDO1FBQzNFO1FBRUEsSUFBSU4sVUFBVU8sTUFBTSxHQUFHLEdBQUc7WUFDeEJDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLHNCQUFzQixFQUFFdEIsTUFBTSxHQUFHLEVBQUVDLElBQUksQ0FBQyxDQUFDO1lBQ3RELE1BQU1zQixXQUFXbkIsU0FBU29CLElBQUksQ0FBQ3RCLFlBQVksV0FBV3VCLE9BQU87WUFDN0Qsb0VBQW9FO1lBQ3BFLElBQUlDLGNBQWMsRUFBRTtZQUNwQixJQUFJO2dCQUNDQSxjQUFjLE1BQU03Qix1RUFBa0JBLENBQUNlLFFBQVFXLFVBQVVoQixVQUFVRyxRQUFRLFNBQVM7WUFDekYsRUFBRSxPQUFPaUIsaUJBQWlCO2dCQUNyQk4sUUFBUU8sS0FBSyxDQUFDLG9EQUFvREQ7WUFDdkU7WUFDQSxPQUFPO2dCQUFFZCxXQUFXO2dCQUFNYSxhQUFhQSxlQUFlLEVBQUU7WUFBQztRQUMzRDtRQUNBLE9BQU87WUFBRWIsV0FBVztZQUFPYSxhQUFhLEVBQUU7UUFBQztJQUM3QyxFQUFFLE9BQU9FLE9BQU87UUFDWlAsUUFBUU8sS0FBSyxDQUFDLGlDQUFpQ0E7UUFDL0MsMkVBQTJFO1FBQzNFLE9BQU87WUFBRWYsV0FBVztZQUFNYSxhQUFhLEVBQUU7WUFBRUUsT0FBTyxDQUFDLHVCQUF1QixFQUFFQSxNQUFNQyxPQUFPLENBQUMsQ0FBQztRQUFDO0lBQ2hHO0FBQ0Y7QUFFQSxzQkFBc0I7QUFDTyIsInNvdXJjZXMiOlsid2VicGFjazovL2djYWxlbmRhcmFwcC8uL2xpYi90b29scy9jaGVja0ZvckNvbmZsaWN0cy5qcz81NTU5Il0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XG5pbXBvcnQgeyBnZXRDYWNoZWRFdmVudHMgfSBmcm9tICcuLi9zZXJ2aWNlcy9jYWNoZVNlcnZpY2UuanMnO1xuaW1wb3J0IHsgZmluZEF2YWlsYWJsZVNsb3RzIH0gZnJvbSAnLi9zY2hlZHVsaW5nVXRpbHMuanMnO1xuXG4vLyAtLS0gQ29uZmxpY3QgQ2hlY2tpbmcgLS0tXG4vLyAoS2VlcCBjaGVja0ZvckNvbmZsaWN0cyBhcyBwcmV2aW91c2x5IGRlZmluZWQgYW5kIHJlZmluZWQpXG5hc3luYyBmdW5jdGlvbiBjaGVja0ZvckNvbmZsaWN0cyh0b2tlbnMsIHN0YXJ0LCBlbmQpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBjaGVja1N0YXJ0ID0gRGF0ZVRpbWUuZnJvbUlTTyhzdGFydCk7XG4gICAgY29uc3QgY2hlY2tFbmQgPSBEYXRlVGltZS5mcm9tSVNPKGVuZCk7XG5cbiAgICBpZiAoIWNoZWNrU3RhcnQuaXNWYWxpZCB8fCAhY2hlY2tFbmQuaXNWYWxpZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc3RhcnQvZW5kIHRpbWUgZm9yIGNvbmZsaWN0IGNoZWNrOiBzdGFydD0ke3N0YXJ0fSwgZW5kPSR7ZW5kfWApO1xuICAgIH1cblxuICAgIGNvbnN0IGRheVN0YXJ0ID0gY2hlY2tTdGFydC5zdGFydE9mKCdkYXknKS50b0lTTygpO1xuICAgIGNvbnN0IGRheUVuZCA9IGNoZWNrRW5kLmVuZE9mKCdkYXknKS50b0lTTygpOyAvLyBDaGVjayB3aG9sZSBkYXkgZm9yIHNpbXBsaWNpdHlcblxuICAgIGNvbnN0IGV2ZW50cyA9IGF3YWl0IGdldENhY2hlZEV2ZW50cyh0b2tlbnMsIGRheVN0YXJ0LCBkYXlFbmQpO1xuXG4gICAgY29uc3QgY29uZmxpY3RzID0gZXZlbnRzLmZpbHRlcihldmVudCA9PiB7XG4gICAgICAgdHJ5IHtcbiAgICAgICAgICAgY29uc3QgZXZlbnRTdGFydCA9IERhdGVUaW1lLmZyb21JU08oZXZlbnQuc3RhcnQ/LmRhdGVUaW1lIHx8IGV2ZW50LnN0YXJ0Py5kYXRlKTtcbiAgICAgICAgICAgY29uc3QgZXZlbnRFbmQgPSBEYXRlVGltZS5mcm9tSVNPKGV2ZW50LmVuZD8uZGF0ZVRpbWUgfHwgZXZlbnQuZW5kPy5kYXRlKTtcbiAgICAgICAgICAgaWYgKCFldmVudFN0YXJ0LmlzVmFsaWQgfHwgIWV2ZW50RW5kLmlzVmFsaWQpIHJldHVybiBmYWxzZTsgLy8gU2tpcCBpbnZhbGlkIGV2ZW50IGRhdGFcbiAgICAgICAgICAgcmV0dXJuIGV2ZW50U3RhcnQgPCBjaGVja0VuZCAmJiBjaGVja1N0YXJ0IDwgZXZlbnRFbmQ7IC8vIE92ZXJsYXAgY29uZGl0aW9uXG4gICAgICAgfSBjYXRjaCB7IHJldHVybiBmYWxzZTsgfSAvLyBJZ25vcmUgcGFyc2luZyBlcnJvcnMgZm9yIGluZGl2aWR1YWwgZXZlbnRzXG4gICAgfSk7XG5cbiAgICBpZiAoY29uZmxpY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKGBDb25mbGljdCBkZXRlY3RlZCBmb3IgJHtzdGFydH0gLSAke2VuZH0uYCk7XG4gICAgICBjb25zdCBkdXJhdGlvbiA9IGNoZWNrRW5kLmRpZmYoY2hlY2tTdGFydCwgJ21pbnV0ZXMnKS5taW51dGVzO1xuICAgICAgLy8gRW5zdXJlIGZpbmRBdmFpbGFibGVTbG90c1V0aWwgaGFuZGxlcyBwb3RlbnRpYWwgZXJyb3JzIGdyYWNlZnVsbHlcbiAgICAgIGxldCBzdWdnZXN0aW9ucyA9IFtdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgICAgc3VnZ2VzdGlvbnMgPSBhd2FpdCBmaW5kQXZhaWxhYmxlU2xvdHMoZXZlbnRzLCBkdXJhdGlvbiwgZGF5U3RhcnQsIGRheUVuZCwgXCJFdmVudFwiLCBcImFueVwiKTtcbiAgICAgIH0gY2F0Y2ggKHN1Z2dlc3Rpb25FcnJvcikge1xuICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmluZGluZyBzdWdnZXN0aW9ucyBkdXJpbmcgY29uZmxpY3QgY2hlY2s6XCIsIHN1Z2dlc3Rpb25FcnJvcik7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBjb25mbGljdHM6IHRydWUsIHN1Z2dlc3Rpb25zOiBzdWdnZXN0aW9ucyB8fCBbXSB9O1xuICAgIH1cbiAgICByZXR1cm4geyBjb25mbGljdHM6IGZhbHNlLCBzdWdnZXN0aW9uczogW10gfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjaGVja2luZyBmb3IgY29uZmxpY3RzOlwiLCBlcnJvcik7XG4gICAgICAvLyBSZXR1cm4gY29uZmxpY3Q9dHJ1ZSB0byBiZSBzYWZlIG9uIGVycm9yLCBwcmV2ZW50cyBhY2NpZGVudGFsIHNjaGVkdWxpbmdcbiAgICAgIHJldHVybiB7IGNvbmZsaWN0czogdHJ1ZSwgc3VnZ2VzdGlvbnM6IFtdLCBlcnJvcjogYENvbmZsaWN0IGNoZWNrIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWAgfTtcbiAgfVxufVxuXG4vLyBFeHBvcnQgdGhlIGZ1bmN0aW9uXG5leHBvcnQgeyBjaGVja0ZvckNvbmZsaWN0cyB9O1xuIl0sIm5hbWVzIjpbIkRhdGVUaW1lIiwiZ2V0Q2FjaGVkRXZlbnRzIiwiZmluZEF2YWlsYWJsZVNsb3RzIiwiY2hlY2tGb3JDb25mbGljdHMiLCJ0b2tlbnMiLCJzdGFydCIsImVuZCIsImNoZWNrU3RhcnQiLCJmcm9tSVNPIiwiY2hlY2tFbmQiLCJpc1ZhbGlkIiwiRXJyb3IiLCJkYXlTdGFydCIsInN0YXJ0T2YiLCJ0b0lTTyIsImRheUVuZCIsImVuZE9mIiwiZXZlbnRzIiwiY29uZmxpY3RzIiwiZmlsdGVyIiwiZXZlbnQiLCJldmVudFN0YXJ0IiwiZGF0ZVRpbWUiLCJkYXRlIiwiZXZlbnRFbmQiLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIiwiZHVyYXRpb24iLCJkaWZmIiwibWludXRlcyIsInN1Z2dlc3Rpb25zIiwic3VnZ2VzdGlvbkVycm9yIiwiZXJyb3IiLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/tools/checkForConflicts.js\n");

/***/ }),

/***/ "(api)/./lib/tools/eventHelpers.js":
/*!***********************************!*\
  !*** ./lib/tools/eventHelpers.js ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   listTodaysEvents: () => (/* binding */ listTodaysEvents),\n/* harmony export */   suggestEventTime: () => (/* binding */ suggestEventTime)\n/* harmony export */ });\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! luxon */ \"luxon\");\n/* harmony import */ var _services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/cacheService.js */ \"(api)/./lib/services/cacheService.js\");\n/* harmony import */ var _formatters_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatters.js */ \"(api)/./lib/tools/formatters.js\");\n/* harmony import */ var _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./schedulingUtils.js */ \"(api)/./lib/tools/schedulingUtils.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([luxon__WEBPACK_IMPORTED_MODULE_0__, _services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__, _formatters_js__WEBPACK_IMPORTED_MODULE_2__, _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_3__]);\n([luxon__WEBPACK_IMPORTED_MODULE_0__, _services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__, _formatters_js__WEBPACK_IMPORTED_MODULE_2__, _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n// --- Additional Utility Functions ---\nasync function listTodaysEvents(accessToken = null) {\n    if (!accessToken) return \"Authentication required.\";\n    try {\n        const tokens = {\n            access_token: accessToken\n        };\n        const today = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.now();\n        const startOfDay = today.startOf(\"day\").toISO();\n        const endOfDay = today.endOf(\"day\").toISO();\n        const events = await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__.getCachedEvents)(tokens, startOfDay, endOfDay);\n        return (0,_formatters_js__WEBPACK_IMPORTED_MODULE_2__.formatCalendarEvents)(events);\n    } catch (error) {\n        console.error(\"Failed to fetch today's events:\", error);\n        return `Failed to fetch events: ${error.message}`;\n    }\n}\nasync function suggestEventTime(duration, preferredTime = \"any\", accessToken = null, activity = \"event\") {\n    if (!accessToken) return \"Authentication required.\";\n    if (!duration || typeof duration !== \"number\" || duration <= 0) return \"Invalid duration.\";\n    try {\n        const tokens = {\n            access_token: accessToken\n        };\n        const now = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.now();\n        const startDate = now.toISO();\n        const endDate = now.plus({\n            days: 7\n        }).endOf(\"day\").toISO(); // Search next 7 days\n        const suggestions = await (0,_schedulingUtils_js__WEBPACK_IMPORTED_MODULE_3__.findAvailableSlots)([], duration, startDate, endDate, activity, preferredTime);\n        return (0,_formatters_js__WEBPACK_IMPORTED_MODULE_2__.formatToolResponse)(\"findAvailableSlots\", suggestions);\n    } catch (error) {\n        console.error(\"Failed to suggest event time:\", error);\n        return `Failed to suggest time: ${error.message}`;\n    }\n}\n// Export the functions\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvdG9vbHMvZXZlbnRIZWxwZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUNpQztBQUM2QjtBQUNhO0FBQ2pCO0FBRTFELHVDQUF1QztBQUN2QyxlQUFlSyxpQkFBaUJDLGNBQWMsSUFBSTtJQUNoRCxJQUFJLENBQUNBLGFBQWEsT0FBTztJQUN6QixJQUFJO1FBQ0YsTUFBTUMsU0FBUztZQUFFQyxjQUFjRjtRQUFZO1FBQzNDLE1BQU1HLFFBQVFULDJDQUFRQSxDQUFDVSxHQUFHO1FBQzFCLE1BQU1DLGFBQWFGLE1BQU1HLE9BQU8sQ0FBQyxPQUFPQyxLQUFLO1FBQzdDLE1BQU1DLFdBQVdMLE1BQU1NLEtBQUssQ0FBQyxPQUFPRixLQUFLO1FBQ3pDLE1BQU1HLFNBQVMsTUFBTWYsMEVBQWVBLENBQUNNLFFBQVFJLFlBQVlHO1FBQ3pELE9BQU9aLG9FQUFvQkEsQ0FBQ2M7SUFDOUIsRUFBRSxPQUFPQyxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxtQ0FBbUNBO1FBQ2pELE9BQU8sQ0FBQyx3QkFBd0IsRUFBRUEsTUFBTUUsT0FBTyxDQUFDLENBQUM7SUFDbkQ7QUFDRjtBQUVBLGVBQWVDLGlCQUFpQkMsUUFBUSxFQUFFQyxnQkFBZ0IsS0FBSyxFQUFFaEIsY0FBYyxJQUFJLEVBQUVpQixXQUFXLE9BQU87SUFDcEcsSUFBSSxDQUFDakIsYUFBYSxPQUFPO0lBQ3pCLElBQUksQ0FBQ2UsWUFBWSxPQUFPQSxhQUFhLFlBQVlBLFlBQVksR0FBRyxPQUFPO0lBQ3hFLElBQUk7UUFDRixNQUFNZCxTQUFTO1lBQUVDLGNBQWNGO1FBQVk7UUFDM0MsTUFBTUksTUFBTVYsMkNBQVFBLENBQUNVLEdBQUc7UUFDeEIsTUFBTWMsWUFBWWQsSUFBSUcsS0FBSztRQUMzQixNQUFNWSxVQUFVZixJQUFJZ0IsSUFBSSxDQUFDO1lBQUVDLE1BQU07UUFBRSxHQUFHWixLQUFLLENBQUMsT0FBT0YsS0FBSyxJQUFJLHFCQUFxQjtRQUNqRixNQUFNZSxjQUFjLE1BQU14Qix1RUFBa0JBLENBQzFDLEVBQUUsRUFDRmlCLFVBQ0FHLFdBQ0FDLFNBQ0FGLFVBQ0FEO1FBRUYsT0FBT25CLGtFQUFrQkEsQ0FBQyxzQkFBc0J5QjtJQUNsRCxFQUFFLE9BQU9YLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLGlDQUFpQ0E7UUFDL0MsT0FBTyxDQUFDLHdCQUF3QixFQUFFQSxNQUFNRSxPQUFPLENBQUMsQ0FBQztJQUNuRDtBQUNGO0FBRUEsdUJBQXVCO0FBQ3VCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2NhbGVuZGFyYXBwLy4vbGliL3Rvb2xzL2V2ZW50SGVscGVycy5qcz9jNDk1Il0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XG5pbXBvcnQgeyBnZXRDYWNoZWRFdmVudHMgfSBmcm9tICcuLi9zZXJ2aWNlcy9jYWNoZVNlcnZpY2UuanMnO1xuaW1wb3J0IHsgZm9ybWF0Q2FsZW5kYXJFdmVudHMsIGZvcm1hdFRvb2xSZXNwb25zZSB9IGZyb20gJy4vZm9ybWF0dGVycy5qcyc7XG5pbXBvcnQgeyBmaW5kQXZhaWxhYmxlU2xvdHMgfSBmcm9tICcuL3NjaGVkdWxpbmdVdGlscy5qcyc7XG5cbi8vIC0tLSBBZGRpdGlvbmFsIFV0aWxpdHkgRnVuY3Rpb25zIC0tLVxuYXN5bmMgZnVuY3Rpb24gbGlzdFRvZGF5c0V2ZW50cyhhY2Nlc3NUb2tlbiA9IG51bGwpIHtcbiAgaWYgKCFhY2Nlc3NUb2tlbikgcmV0dXJuIFwiQXV0aGVudGljYXRpb24gcmVxdWlyZWQuXCI7XG4gIHRyeSB7XG4gICAgY29uc3QgdG9rZW5zID0geyBhY2Nlc3NfdG9rZW46IGFjY2Vzc1Rva2VuIH07XG4gICAgY29uc3QgdG9kYXkgPSBEYXRlVGltZS5ub3coKTtcbiAgICBjb25zdCBzdGFydE9mRGF5ID0gdG9kYXkuc3RhcnRPZignZGF5JykudG9JU08oKTtcbiAgICBjb25zdCBlbmRPZkRheSA9IHRvZGF5LmVuZE9mKCdkYXknKS50b0lTTygpO1xuICAgIGNvbnN0IGV2ZW50cyA9IGF3YWl0IGdldENhY2hlZEV2ZW50cyh0b2tlbnMsIHN0YXJ0T2ZEYXksIGVuZE9mRGF5KTtcbiAgICByZXR1cm4gZm9ybWF0Q2FsZW5kYXJFdmVudHMoZXZlbnRzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHRvZGF5J3MgZXZlbnRzOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIGBGYWlsZWQgdG8gZmV0Y2ggZXZlbnRzOiAke2Vycm9yLm1lc3NhZ2V9YDtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBzdWdnZXN0RXZlbnRUaW1lKGR1cmF0aW9uLCBwcmVmZXJyZWRUaW1lID0gJ2FueScsIGFjY2Vzc1Rva2VuID0gbnVsbCwgYWN0aXZpdHkgPSBcImV2ZW50XCIpIHtcbiAgIGlmICghYWNjZXNzVG9rZW4pIHJldHVybiBcIkF1dGhlbnRpY2F0aW9uIHJlcXVpcmVkLlwiO1xuICAgaWYgKCFkdXJhdGlvbiB8fCB0eXBlb2YgZHVyYXRpb24gIT09ICdudW1iZXInIHx8IGR1cmF0aW9uIDw9IDApIHJldHVybiBcIkludmFsaWQgZHVyYXRpb24uXCI7XG4gIHRyeSB7XG4gICAgY29uc3QgdG9rZW5zID0geyBhY2Nlc3NfdG9rZW46IGFjY2Vzc1Rva2VuIH07XG4gICAgY29uc3Qgbm93ID0gRGF0ZVRpbWUubm93KCk7XG4gICAgY29uc3Qgc3RhcnREYXRlID0gbm93LnRvSVNPKCk7XG4gICAgY29uc3QgZW5kRGF0ZSA9IG5vdy5wbHVzKHsgZGF5czogNyB9KS5lbmRPZignZGF5JykudG9JU08oKTsgLy8gU2VhcmNoIG5leHQgNyBkYXlzXG4gICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSBhd2FpdCBmaW5kQXZhaWxhYmxlU2xvdHMoXG4gICAgICBbXSwgLy8gV2lsbCBiZSBmZXRjaGVkIGluc2lkZSBmaW5kQXZhaWxhYmxlU2xvdHNcbiAgICAgIGR1cmF0aW9uLCBcbiAgICAgIHN0YXJ0RGF0ZSwgXG4gICAgICBlbmREYXRlLCBcbiAgICAgIGFjdGl2aXR5LFxuICAgICAgcHJlZmVycmVkVGltZVxuICAgICk7XG4gICAgcmV0dXJuIGZvcm1hdFRvb2xSZXNwb25zZSgnZmluZEF2YWlsYWJsZVNsb3RzJywgc3VnZ2VzdGlvbnMpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gc3VnZ2VzdCBldmVudCB0aW1lOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIGBGYWlsZWQgdG8gc3VnZ2VzdCB0aW1lOiAke2Vycm9yLm1lc3NhZ2V9YDtcbiAgfVxufVxuXG4vLyBFeHBvcnQgdGhlIGZ1bmN0aW9uc1xuZXhwb3J0IHsgbGlzdFRvZGF5c0V2ZW50cywgc3VnZ2VzdEV2ZW50VGltZSB9O1xuIl0sIm5hbWVzIjpbIkRhdGVUaW1lIiwiZ2V0Q2FjaGVkRXZlbnRzIiwiZm9ybWF0Q2FsZW5kYXJFdmVudHMiLCJmb3JtYXRUb29sUmVzcG9uc2UiLCJmaW5kQXZhaWxhYmxlU2xvdHMiLCJsaXN0VG9kYXlzRXZlbnRzIiwiYWNjZXNzVG9rZW4iLCJ0b2tlbnMiLCJhY2Nlc3NfdG9rZW4iLCJ0b2RheSIsIm5vdyIsInN0YXJ0T2ZEYXkiLCJzdGFydE9mIiwidG9JU08iLCJlbmRPZkRheSIsImVuZE9mIiwiZXZlbnRzIiwiZXJyb3IiLCJjb25zb2xlIiwibWVzc2FnZSIsInN1Z2dlc3RFdmVudFRpbWUiLCJkdXJhdGlvbiIsInByZWZlcnJlZFRpbWUiLCJhY3Rpdml0eSIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJwbHVzIiwiZGF5cyIsInN1Z2dlc3Rpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/tools/eventHelpers.js\n");

/***/ }),

/***/ "(api)/./lib/tools/formatters.js":
/*!*********************************!*\
  !*** ./lib/tools/formatters.js ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatCalendarEvents: () => (/* binding */ formatCalendarEvents),\n/* harmony export */   formatEventTime: () => (/* binding */ formatEventTime),\n/* harmony export */   formatToolResponse: () => (/* binding */ formatToolResponse)\n/* harmony export */ });\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! luxon */ \"luxon\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([luxon__WEBPACK_IMPORTED_MODULE_0__]);\nluxon__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nfunction formatEventTime(eventTime) {\n    // ... (Keep implementation from chatbot.js) ...\n    try {\n        const dt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(eventTime);\n        if (dt.isValid) {\n            return dt.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.DATETIME_FULL);\n        }\n        const dateOnly = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(eventTime, {\n            zone: \"utc\"\n        });\n        if (dateOnly.isValid) {\n            return dateOnly.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.DATE_FULL) + \" (All day)\";\n        }\n        return eventTime;\n    } catch (e) {\n        console.warn(\"Error formatting event time:\", eventTime, e);\n        return String(eventTime); // Ensure returns string\n    }\n}\nfunction formatCalendarEvents(events) {\n    if (!events) return \"No events found or an error occurred.\";\n    if (!Array.isArray(events)) return \"An error occurred processing events.\";\n    if (events.length === 0) return \"No events found for the specified time period.\";\n    return events.map((event)=>{\n        try {\n            const start = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.start?.dateTime || event.start?.date);\n            const end = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.end?.dateTime || event.end?.date);\n            if (!start.isValid || !end.isValid) return `❓ Invalid date found for event: ${event.summary || event.id}`;\n            const isAllDay = !event.start?.dateTime;\n            // Include the event ID in the formatted output (hidden with a zero-width space for reference)\n            let formattedEvent = `📅 ${event.summary || \"(No Title)\"} [ID:​${event.id}]\\n`;\n            formattedEvent += `   📆 ${start.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.DATE_FULL)}\\n`;\n            if (!isAllDay) {\n                formattedEvent += `   🕒 ${start.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.TIME_SIMPLE)} - ${end.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.TIME_SIMPLE)}\\n`;\n            } else {\n                formattedEvent += `   🕒 All Day\\n`;\n            }\n            if (event.description) formattedEvent += `   📝 ${event.description}\\n`;\n            if (event.location) formattedEvent += `   📍 ${event.location}\\n`;\n            if (event.reminders?.useDefault === false && Array.isArray(event.reminders.overrides)) {\n                formattedEvent += `   🔔 Reminders: ${event.reminders.overrides.map((r)=>`${r.minutes} min`).join(\", \")}\\n`;\n            }\n            return formattedEvent.trim(); // Trim each event string\n        } catch (mapError) {\n            console.error(\"Error mapping event:\", event, mapError);\n            return `❓ Error processing event: ${event.summary || event.id}`;\n        }\n    }).join(\"\\n\\n\"); // Add space between events\n}\n// --- Formatting Tool Responses for the LLM ---\nfunction formatToolResponse(functionName, result) {\n    try {\n        // Explicitly handle null/undefined results first\n        if (result == null) {\n            console.warn(`Tool ${functionName} returned null or undefined.`);\n            return `Tool ${functionName} did not return a result. (Status: FAILED)`;\n        }\n        // Handle known error shapes returned by tool functions\n        if (typeof result === \"string\" && result.toLowerCase().startsWith(\"error:\")) return `${result} (Status: FAILED)`;\n        if (typeof result === \"object\" && result.error) return `Error executing ${functionName}: ${result.error} (Status: FAILED)`;\n        if (typeof result === \"object\" && result.success === false) return `Tool ${functionName} failed: ${result.message || \"No details.\"} (Status: FAILED)`;\n        // --- Format successful results ---\n        switch(functionName){\n            case \"saveUserPreference\":\n                return result.success ? `✅ Pref saved: ${result.message} (Status: SUCCESS)` : `❌ Pref fail: ${result.message} (Status: FAILED)`;\n            case \"addCalendarEvents\":\n                if (!Array.isArray(result)) return \"Error: Invalid response format from addCalendarEvents. (Status: FAILED)\";\n                if (result.length === 0) return \"No events were processed. (Status: NEUTRAL)\";\n                return result.map((item)=>{\n                    if (!item) return \"❓ Invalid item in result array. (Status: FAILED)\";\n                    if (item.error) {\n                        const summary = item.summary || \"?\";\n                        if (item.conflict) {\n                            // Include suggestions if available\n                            const suggestionText = item.suggestions && item.suggestions.length > 0 ? ` Suggested slots: ${item.suggestions.map((s)=>`${luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(s.start).toFormat(\"h:mma\")} - ${luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(s.end).toFormat(\"h:mma\")}`).join(\", \")}` : \"\";\n                            return `⚠️ Conflict detected for event \"${summary}\".${suggestionText} (Status: CONFLICT)`;\n                        } else {\n                            return `❌ Failed to add event \"${summary}\": ${item.error} (Status: FAILED)`;\n                        }\n                    } else if (item.id && item.summary && (item.start?.dateTime || item.start?.date)) {\n                        try {\n                            const startStr = formatEventTime(item.start.dateTime || item.start.date); // Use existing helper\n                            return `✅ Event added: \"${item.summary}\" starting ${startStr}. (ID: ${item.id}) (Status: SUCCESS)`;\n                        } catch (e) {\n                            console.error(\"Error formatting success message for added event:\", item, e);\n                            return `✅ Event added: \"${item.summary}\" (details unavailable). (ID: ${item.id}) (Status: SUCCESS)`;\n                        }\n                    } else {\n                        console.warn(\"Unexpected item shape in addCalendarEvents result:\", item);\n                        return `❓ Unknown outcome for an event attempt. (Status: UNKNOWN)`;\n                    }\n                }).join(\"\\n\");\n            case \"getCalendarEvents\":\n                if (typeof result === \"string\") return `🗓️ Events: ${result} (Status: ${result.toLowerCase().startsWith(\"error\") ? \"FAILED\" : \"SUCCESS\"})`;\n                if (!Array.isArray(result)) return \"Error: Invalid getCalendarEvents response. (Status: FAILED)\";\n                return result.length === 0 ? \"\\uD83D\\uDDD3️ No events found. (Status: SUCCESS)\" : `🗓️ Found ${result.length} event(s):\\n\\n${formatCalendarEvents(result)} (Status: SUCCESS)`;\n            case \"deleteCalendarEvent\":\n                return result.success ? `🗑️ Event \"${result.summary || result.eventId}\" deleted. (Status: SUCCESS)` // Use eventId if summary wasn't fetched/returned\n                 : `❌ Failed to delete event ${result.eventId || \"?\"}: ${result.error || result.message || \"?\"} (Status: FAILED)`;\n            case \"updateCalendarEvent\":\n                // Check if result has an ID, indicating success from googleCalendar update function\n                if (result && result.id) {\n                    return `✏️ Event \"${result.summary || eventId}\" updated. (ID: ${result.id}) (Status: SUCCESS)`;\n                } else {\n                    // Handle potential error objects passed back\n                    const errorMsg = result?.error || result?.message || JSON.stringify(result);\n                    return `❌ Failed to update event: ${errorMsg} (Status: FAILED)`;\n                }\n            case \"findAvailableSlots\":\n                if (!Array.isArray(result)) return \"Error: Invalid findAvailableSlots response. (Status: FAILED)\";\n                if (result.length === 0) return `🕒 No available slots found matching criteria. (Status: SUCCESS)`;\n                // Format slots with success status\n                const formattedSlots = result.map((slot)=>`${luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(slot.start).toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.DATETIME_SHORT)} - ${luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(slot.end).toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.TIME_SIMPLE)}`).join(\"\\n\");\n                return `🕒 Found ${result.length} available slot(s):\\n\\n${formattedSlots}\\n\\n(Status: SUCCESS)`;\n            case \"getWeatherForecast\":\n                return `🌤️ Weather for ${result.location} on ${result.date}: ${result.forecast || \"N/A\"} (Status: ${result.forecast && !result.forecast.includes(\"unavailable\") ? \"SUCCESS\" : \"PARTIAL\"})`;\n            case \"deleteCalendarEventsByQuery\":\n                return result.success ? `🗑️ ${result.message} (Deleted Count: ${result.deletedCount}) (Status: SUCCESS)` : `❌ Failed bulk delete: ${result.message || result.error || \"?\"} (Status: FAILED)`;\n            default:\n                // Safely stringify other results with status indicators\n                if (typeof result === \"object\" && result !== null) {\n                    const status = result.success === true ? \"SUCCESS\" : result.success === false ? \"FAILED\" : \"UNKNOWN\";\n                    return `${JSON.stringify(result)} (Status: ${status})`;\n                } else {\n                    return `${String(result)} (Status: UNKNOWN)`;\n                }\n        }\n    } catch (formatError) {\n        console.error(`CRITICAL: Error *within* formatToolResponse for ${functionName}:`, formatError, \"Raw result:\", result);\n        // Return a guaranteed string error message\n        return `Internal Error: Failed to format the result for ${functionName}. (Status: ERROR)`;\n    }\n}\n// Export the functions\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/tools/formatters.js\n");

/***/ }),

/***/ "(api)/./lib/tools/schedulingUtils.js":
/*!**************************************!*\
  !*** ./lib/tools/schedulingUtils.js ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findAvailableSlots: () => (/* binding */ findAvailableSlots),\n/* harmony export */   formatAvailableSlots: () => (/* binding */ formatAvailableSlots)\n/* harmony export */ });\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! luxon */ \"luxon\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([luxon__WEBPACK_IMPORTED_MODULE_0__]);\nluxon__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/**\n * Default working hours configuration\n * Can be extended to fetch from user preferences in the future\n */ const DEFAULT_WORKING_HOURS = {\n    start: 9,\n    end: 17,\n    workDays: [\n        1,\n        2,\n        3,\n        4,\n        5\n    ]\n};\n/**\n * Find available time slots for a new event\n * @param {Array} events - List of calendar events\n * @param {number} duration - Duration of the event in minutes\n * @param {string} startDate - Start date to search from in ISO format\n * @param {string} endDate - End date to search until in ISO format\n * @param {string} activity - Type of activity being scheduled\n * @param {string} timePreference - Preferred time of day (morning, afternoon, evening, any)\n * @param {Object} workingHours - Optional working hours configuration\n * @returns {Array} - List of available time slots with pros and cons\n */ function findAvailableSlots(events, duration, startDate, endDate, activity, timePreference = \"any\", workingHours = DEFAULT_WORKING_HOURS) {\n    // Convert inputs to Luxon objects\n    const start = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(startDate);\n    const end = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(endDate);\n    const durationMinutes = duration;\n    // Create a list of busy intervals from events\n    const busyIntervals = events.map((event)=>{\n        const eventStart = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.start.dateTime || event.start.date);\n        const eventEnd = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.end.dateTime || event.end.date);\n        return {\n            interval: luxon__WEBPACK_IMPORTED_MODULE_0__.Interval.fromDateTimes(eventStart, eventEnd),\n            summary: event.summary\n        };\n    });\n    // Generate potential slots\n    const slots = generatePotentialSlots(start, end, durationMinutes, busyIntervals, timePreference, workingHours);\n    // Evaluate and rank slots\n    const evaluatedSlots = evaluateSlots(slots, busyIntervals, durationMinutes, activity, timePreference);\n    // Return top slots (limited to 3)\n    return evaluatedSlots.slice(0, 3);\n}\n/**\n * Generate potential time slots based on constraints\n * @param {DateTime} start - Start date/time to search from\n * @param {DateTime} end - End date/time to search until\n * @param {number} durationMinutes - Duration in minutes\n * @param {Array} busyIntervals - List of busy time intervals\n * @param {string} timePreference - Preferred time of day\n * @param {Object} workingHours - Working hours configuration\n * @returns {Array} - List of potential time slots\n */ function generatePotentialSlots(start, end, durationMinutes, busyIntervals, timePreference, workingHours) {\n    const slots = [];\n    const slotDuration = luxon__WEBPACK_IMPORTED_MODULE_0__.Duration.fromObject({\n        minutes: durationMinutes\n    });\n    // Start from the beginning of the search period\n    let currentTime = start;\n    // Iterate through each day in the search period\n    while(currentTime < end){\n        // Check if this is a working day\n        const isWorkingDay = workingHours.workDays.includes(currentTime.weekday);\n        if (isWorkingDay) {\n            // Set start time to either current time or beginning of working hours\n            let dayStart = currentTime.set({\n                hour: workingHours.start,\n                minute: 0,\n                second: 0,\n                millisecond: 0\n            });\n            // If we're already past the working hours start for today, use current time\n            if (currentTime > dayStart) {\n                dayStart = currentTime;\n            }\n            // End of working hours for today\n            const dayEnd = currentTime.set({\n                hour: workingHours.end,\n                minute: 0,\n                second: 0,\n                millisecond: 0\n            });\n            // Generate slots for this day\n            let slotStart = dayStart;\n            // Use 30-minute increments for slot generation\n            while(slotStart.plus(slotDuration) <= dayEnd){\n                const slotEnd = slotStart.plus(slotDuration);\n                const currentSlot = luxon__WEBPACK_IMPORTED_MODULE_0__.Interval.fromDateTimes(slotStart, slotEnd);\n                // Check if this slot overlaps with any busy intervals\n                const isAvailable = !busyIntervals.some((busy)=>busy.interval.overlaps(currentSlot));\n                if (isAvailable) {\n                    // Check if this slot matches the time preference\n                    const hour = slotStart.hour;\n                    let matchesPreference = true;\n                    if (timePreference === \"morning\" && (hour < 8 || hour >= 12)) {\n                        matchesPreference = false;\n                    } else if (timePreference === \"afternoon\" && (hour < 12 || hour >= 17)) {\n                        matchesPreference = false;\n                    } else if (timePreference === \"evening\" && (hour < 17 || hour >= 21)) {\n                        matchesPreference = false;\n                    }\n                    if (matchesPreference) {\n                        slots.push({\n                            start: slotStart.toISO(),\n                            end: slotEnd.toISO(),\n                            startDateTime: slotStart,\n                            endDateTime: slotEnd\n                        });\n                    }\n                }\n                // Move to next slot (30-minute increments)\n                slotStart = slotStart.plus({\n                    minutes: 30\n                });\n            }\n        }\n        // Move to next day\n        currentTime = currentTime.plus({\n            days: 1\n        }).startOf(\"day\");\n    }\n    return slots;\n}\n/**\n * Evaluate and rank available time slots\n * @param {Array} slots - List of potential time slots\n * @param {Array} busyIntervals - List of busy time intervals\n * @param {number} durationMinutes - Duration in minutes\n * @param {string} activity - Type of activity\n * @param {string} timePreference - Preferred time of day\n * @returns {Array} - Evaluated and ranked slots with pros and cons\n */ function evaluateSlots(slots, busyIntervals, durationMinutes, activity, timePreference) {\n    return slots.map((slot)=>{\n        const slotStart = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(slot.start);\n        const slotEnd = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(slot.end);\n        const slotInterval = luxon__WEBPACK_IMPORTED_MODULE_0__.Interval.fromDateTimes(slotStart, slotEnd);\n        // Generate pros and cons\n        const { pros, cons } = generateProsAndCons(slotStart, slotEnd, busyIntervals, activity, timePreference);\n        // Calculate a score based on pros and cons\n        const score = calculateScore(slotStart, pros, cons, timePreference);\n        return {\n            start: slot.start,\n            end: slot.end,\n            pros,\n            cons,\n            score\n        };\n    })// Sort by score (highest first)\n    .sort((a, b)=>b.score - a.score);\n}\n/**\n * Generate pros and cons for a time slot\n * @param {DateTime} slotStart - Start time of the slot\n * @param {DateTime} slotEnd - End time of the slot\n * @param {Array} busyIntervals - List of busy time intervals\n * @param {string} activity - Type of activity\n * @param {string} timePreference - Preferred time of day\n * @returns {Object} - Object containing pros and cons arrays\n */ function generateProsAndCons(slotStart, slotEnd, busyIntervals, activity, timePreference) {\n    const pros = [];\n    const cons = [];\n    // Time of day factors\n    const hour = slotStart.hour;\n    // Check if slot is during preferred time\n    if (timePreference === \"morning\" && hour >= 8 && hour < 12) {\n        pros.push(\"Matches your morning time preference\");\n    } else if (timePreference === \"afternoon\" && hour >= 12 && hour < 17) {\n        pros.push(\"Matches your afternoon time preference\");\n    } else if (timePreference === \"evening\" && hour >= 17 && hour < 21) {\n        pros.push(\"Matches your evening time preference\");\n    } else if (timePreference !== \"any\") {\n        cons.push(`Outside your preferred ${timePreference} time`);\n    }\n    // Early morning/late evening factors\n    if (hour < 8) {\n        cons.push(\"Early morning slot may be difficult to attend\");\n    } else if (hour >= 20) {\n        cons.push(\"Late evening slot may interfere with personal time\");\n    }\n    // Ideal working hours\n    if (hour >= 9 && hour < 17) {\n        pros.push(\"During standard working hours\");\n    }\n    // Lunch time\n    if (hour >= 12 && hour < 14) {\n        if (activity.toLowerCase().includes(\"lunch\") || activity.toLowerCase().includes(\"meal\") || activity.toLowerCase().includes(\"eat\")) {\n            pros.push(\"Ideal time for a meal\");\n        } else {\n            cons.push(\"May conflict with lunch time\");\n        }\n    }\n    // Proximity to other events\n    const bufferTime = luxon__WEBPACK_IMPORTED_MODULE_0__.Duration.fromObject({\n        minutes: 30\n    });\n    let hasEventBefore = false;\n    let hasEventAfter = false;\n    for (const busy of busyIntervals){\n        const busyEnd = busy.interval.end;\n        const busyStart = busy.interval.start;\n        // Check if there's an event ending right before this slot\n        if (busyEnd <= slotStart && busyEnd.plus(bufferTime) >= slotStart) {\n            hasEventBefore = true;\n            pros.push(`Convenient timing after \"${busy.summary}\"`);\n        }\n        // Check if there's an event starting right after this slot\n        if (busyStart >= slotEnd && busyStart.minus(bufferTime) <= slotEnd) {\n            hasEventAfter = true;\n            pros.push(`Convenient timing before \"${busy.summary}\"`);\n        }\n    }\n    // If the slot is sandwiched between events\n    if (hasEventBefore && hasEventAfter) {\n        pros.push(\"Efficiently uses gap between events\");\n    }\n    // Day of week factors\n    const dayOfWeek = slotStart.weekday;\n    if (dayOfWeek === 1) {\n        if (hour < 11) {\n            cons.push(\"Early Monday morning may be busy with weekly planning\");\n        } else {\n            pros.push(\"Good for setting the tone for the week\");\n        }\n    } else if (dayOfWeek === 5) {\n        if (hour >= 15) {\n            cons.push(\"Late Friday may conflict with weekend plans\");\n        } else {\n            pros.push(\"Good for wrapping up the week\");\n        }\n    } else if (dayOfWeek === 6 || dayOfWeek === 7) {\n        if (activity.toLowerCase().includes(\"work\") || activity.toLowerCase().includes(\"meeting\") || activity.toLowerCase().includes(\"call\")) {\n            cons.push(\"Weekend slot for work-related activity\");\n        } else {\n            pros.push(\"Weekend slot good for personal activities\");\n        }\n    }\n    // Activity-specific factors\n    if (activity.toLowerCase().includes(\"exercise\") || activity.toLowerCase().includes(\"workout\") || activity.toLowerCase().includes(\"gym\")) {\n        if (hour >= 6 && hour < 9) {\n            pros.push(\"Morning exercise can boost energy for the day\");\n        } else if (hour >= 17 && hour < 20) {\n            pros.push(\"Evening exercise can help unwind after work\");\n        }\n    }\n    // Ensure we have at least one pro and con\n    if (pros.length === 0) {\n        pros.push(\"Available time slot that fits your schedule\");\n    }\n    if (cons.length === 0) {\n        // Look for any minor drawback\n        if (slotStart.minute !== 0 && slotStart.minute !== 30) {\n            cons.push(\"Starts at an unusual time\");\n        } else if (dayOfWeek >= 1 && dayOfWeek <= 5 && (hour < 9 || hour >= 17)) {\n            cons.push(\"Outside standard working hours\");\n        } else {\n            cons.push(\"No significant drawbacks identified\");\n        }\n    }\n    return {\n        pros,\n        cons\n    };\n}\n/**\n * Calculate a score for ranking time slots\n * @param {DateTime} slotStart - Start time of the slot\n * @param {Array} pros - List of pros\n * @param {Array} cons - List of cons\n * @param {string} timePreference - Preferred time of day\n * @returns {number} - Score for ranking\n */ function calculateScore(slotStart, pros, cons, timePreference) {\n    let score = 0;\n    // Base score from pros and cons count\n    score += pros.length * 10;\n    score -= cons.length * 8;\n    // Preferred time bonus\n    const hour = slotStart.hour;\n    if (timePreference === \"morning\" && hour >= 8 && hour < 12) {\n        score += 15;\n    } else if (timePreference === \"afternoon\" && hour >= 12 && hour < 17) {\n        score += 15;\n    } else if (timePreference === \"evening\" && hour >= 17 && hour < 21) {\n        score += 15;\n    }\n    // Ideal working hours bonus\n    if (hour >= 9 && hour < 17) {\n        score += 5;\n    }\n    // Prefer earlier slots when all else is equal (for consistent sorting)\n    score -= slotStart.hour * 0.1;\n    return score;\n}\n/**\n * Format available slots for display\n * @param {Array} slots - List of available slots with pros and cons\n * @returns {string} - Formatted string for display\n */ function formatAvailableSlots(slots) {\n    if (!slots || slots.length === 0) {\n        return \"No available slots found.\";\n    }\n    let result = \"Available time slots:\\n\\n\";\n    slots.forEach((slot, index)=>{\n        const start = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(slot.start);\n        const end = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(slot.end);\n        result += `Option ${index + 1}: ${start.toFormat(\"ccc, LLL d\")} from ${start.toFormat(\"h:mm a\")} to ${end.toFormat(\"h:mm a\")}\\n`;\n        result += \"Pros:\\n\";\n        slot.pros.forEach((pro)=>{\n            result += `- ${pro}\\n`;\n        });\n        result += \"Cons:\\n\";\n        slot.cons.forEach((con)=>{\n            result += `- ${con}\\n`;\n        });\n        if (index < slots.length - 1) {\n            result += \"\\n\";\n        }\n    });\n    return result;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/tools/schedulingUtils.js\n");

/***/ }),

/***/ "(api)/./lib/tools/toolIndex.js":
/*!********************************!*\
  !*** ./lib/tools/toolIndex.js ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toolFunctions: () => (/* binding */ toolFunctions),\n/* harmony export */   tools: () => (/* binding */ tools)\n/* harmony export */ });\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! luxon */ \"luxon\");\n/* harmony import */ var googleapis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! googleapis */ \"googleapis\");\n/* harmony import */ var googleapis__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(googleapis__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../googleCalendar.js */ \"(api)/./googleCalendar.js\");\n/* harmony import */ var _googleCalendar_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _redisClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../redisClient.js */ \"(api)/./lib/redisClient.js\");\n/* harmony import */ var _services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/cacheService.js */ \"(api)/./lib/services/cacheService.js\");\n/* harmony import */ var _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./schedulingUtils.js */ \"(api)/./lib/tools/schedulingUtils.js\");\n/* harmony import */ var _checkForConflicts_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./checkForConflicts.js */ \"(api)/./lib/tools/checkForConflicts.js\");\n/* harmony import */ var _formatters_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./formatters.js */ \"(api)/./lib/tools/formatters.js\");\n/* harmony import */ var _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../postgresClient.js */ \"(api)/./lib/postgresClient.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([luxon__WEBPACK_IMPORTED_MODULE_0__, _services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__, _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_5__, _checkForConflicts_js__WEBPACK_IMPORTED_MODULE_6__, _formatters_js__WEBPACK_IMPORTED_MODULE_7__, _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__]);\n([luxon__WEBPACK_IMPORTED_MODULE_0__, _services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__, _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_5__, _checkForConflicts_js__WEBPACK_IMPORTED_MODULE_6__, _formatters_js__WEBPACK_IMPORTED_MODULE_7__, _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// lib/tools/index.js\n// Purpose: Defines the tools (schema) available to the LLM and maps them\n//          to their corresponding implementation functions. Also includes\n//          helper functions for processing tool calls.\n// --- IMPORTS ---\n\n // Used for get/update event before calling specific functions\n// Import from googleCalendar.js\n\n// Import from redisClient.js\n\n// Import from cacheService.js\n\n// Import from schedulingUtils.js\n\n// Import from checkForConflicts.js\n\n// Import from formatters.js\n\n// Import from postgresClient.js\n\n// --- Tool Schema Definitions (for OpenAI) ---\nconst tools = [\n    {\n        type: \"function\",\n        function: {\n            name: \"saveUserPreference\",\n            description: \"Save a user preference for future reference. Use this when you identify important user preferences (like preferred meeting times, locations, activity types, scheduling constraints) that should be remembered long-term.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    category: {\n                        type: \"string\",\n                        description: \"The broad category of the preference (e.g., 'scheduling', 'location', 'activity').\"\n                    },\n                    key: {\n                        type: \"string\",\n                        description: \"The specific preference key within the category (e.g., 'preferredMeetingHours', 'defaultCity', 'favoriteWorkout').\"\n                    },\n                    value: {\n                        oneOf: [\n                            {\n                                type: \"string\"\n                            },\n                            {\n                                type: \"number\"\n                            },\n                            {\n                                type: \"boolean\"\n                            },\n                            {\n                                type: \"array\",\n                                items: {}\n                            },\n                            {\n                                type: \"object\"\n                            }\n                        ],\n                        description: \"The value of the preference (e.g., '9am-12pm', 'New York', 'running'). Can be string, number, boolean, array, or object.\"\n                    },\n                    context: {\n                        type: \"string\",\n                        description: \"Optional: Additional context about when or why this preference applies (e.g., 'work meetings', 'weekends').\"\n                    }\n                },\n                required: [\n                    \"category\",\n                    \"key\",\n                    \"value\"\n                ]\n            }\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"addCalendarEvents\",\n            description: \"Creates one or more new events directly in the user's primary Google Calendar based on their request. Extracts details like title, location, and resolves start/end times (using current time context for relative references like 'tomorrow 4pm') into absolute ISO 8601 format. Assumes a 1-hour duration if not specified. Checks for conflicts before adding.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    events: {\n                        type: \"array\",\n                        description: \"An array of one or more event objects to create.\",\n                        items: {\n                            type: \"object\",\n                            properties: {\n                                summary: {\n                                    type: \"string\",\n                                    description: \"The title/summary of the event (e.g., 'Meeting with Clyde').\"\n                                },\n                                start: {\n                                    type: \"string\",\n                                    description: \"The start date and time of the event in STRICT ISO 8601 format including timezone offset (e.g., '2025-04-01T16:00:00-07:00'). Resolve relative times (like 'tomorrow 4pm') based on current time context before calling.\"\n                                },\n                                end: {\n                                    type: \"string\",\n                                    description: \"The end date and time of the event in STRICT ISO 8601 format including timezone offset (e.g., '2025-04-01T17:00:00-07:00'). Resolve relative times; assume 1hr duration from start if end time is not specified.\"\n                                },\n                                description: {\n                                    type: \"string\",\n                                    description: \"Optional description or notes for the event.\"\n                                },\n                                location: {\n                                    type: \"string\",\n                                    description: \"Optional location for the event (e.g., 'Starbucks Main St', 'Zoom Link').\"\n                                },\n                                reminders: {\n                                    type: \"array\",\n                                    items: {\n                                        type: \"number\"\n                                    },\n                                    description: \"Optional reminder times in minutes before the event start (e.g., [10, 30]).\"\n                                }\n                            },\n                            required: [\n                                \"summary\",\n                                \"start\",\n                                \"end\"\n                            ]\n                        }\n                    }\n                },\n                required: [\n                    \"events\"\n                ]\n            }\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"getCalendarEvents\",\n            description: \"Retrieves events from the user's primary Google Calendar within a specified date range.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    start_date: {\n                        type: \"string\",\n                        description: \"The start date/time for the query range in ISO 8601 format (e.g., '2025-04-01T00:00:00Z' or '2025-04-01').\"\n                    },\n                    end_date: {\n                        type: \"string\",\n                        description: \"The end date/time for the query range in ISO 8601 format (e.g., '2025-04-02T00:00:00Z' or '2025-04-02').\"\n                    }\n                },\n                required: [\n                    \"start_date\",\n                    \"end_date\"\n                ]\n            }\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"deleteCalendarEvent\",\n            description: \"Deletes a specific event from the user's primary Google Calendar using its unique event ID. Retrieves event details first to invalidate specific cache range.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    eventId: {\n                        type: \"string\",\n                        description: \"The unique ID of the event to delete (e.g., '8ut3a6eol1ov5ovv23v85osssg'). The user might provide the event title/time, use getCalendarEvents first if ID is unknown.\"\n                    }\n                },\n                required: [\n                    \"eventId\"\n                ]\n            }\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"updateCalendarEvent\",\n            description: \"Updates details (like time, title, location, description) of an existing event in the user's primary Google Calendar using its ID.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    eventId: {\n                        type: \"string\",\n                        description: \"The unique ID of the event to update (e.g., '8ut3a6eol1ov5ovv23v85osssg'). The user might provide the event title/time, use getCalendarEvents first if ID is unknown.\"\n                    },\n                    updates: {\n                        type: \"object\",\n                        properties: {\n                            summary: {\n                                type: \"string\",\n                                description: \"New title/summary for the event.\"\n                            },\n                            description: {\n                                type: \"string\",\n                                description: \"New description for the event.\"\n                            },\n                            location: {\n                                type: \"string\",\n                                description: \"New location for the event.\"\n                            },\n                            start: {\n                                type: \"string\",\n                                description: \"New start time in ISO 8601 format (e.g., '2025-04-01T16:30:00-07:00').\"\n                            },\n                            end: {\n                                type: \"string\",\n                                description: \"New end time in ISO 8601 format (e.g., '2025-04-01T17:00:00-07:00').\"\n                            }\n                        },\n                        description: \"Object containing AT LEAST ONE field to update. Include only fields that are changing.\",\n                        minProperties: 1 // Ensure at least one update is provided\n                    }\n                },\n                required: [\n                    \"eventId\",\n                    \"updates\"\n                ]\n            }\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"findAvailableSlots\",\n            description: \"Finds multiple available time slots in the user's calendar suitable for scheduling a new event. Considers existing events.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    duration: {\n                        type: \"number\",\n                        description: \"Required duration of the event in minutes (e.g., 30, 60).\"\n                    },\n                    startDate: {\n                        type: \"string\",\n                        description: \"The start date/time to search from, in ISO 8601 format. Defaults to the current time if not provided.\"\n                    },\n                    endDate: {\n                        type: \"string\",\n                        description: \"The end date/time to search until, in ISO 8601 format. Defaults to 7 days from startDate if not provided.\"\n                    },\n                    timePreference: {\n                        type: \"string\",\n                        enum: [\n                            \"morning\",\n                            \"afternoon\",\n                            \"evening\",\n                            \"any\"\n                        ],\n                        description: \"Optional preferred time of day (defaults to 'any'). Morning (~9am-12pm), Afternoon (~12pm-5pm), Evening (~5pm-9pm).\"\n                    },\n                    activity: {\n                        type: \"string\",\n                        description: \"Optional: The type of activity being scheduled (e.g., 'meeting', 'workout', 'call') to potentially influence suggestions or check constraints.\"\n                    }\n                },\n                required: [\n                    \"duration\"\n                ]\n            }\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"getWeatherForecast\",\n            description: \"Gets the weather forecast for a specific location and date.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    location: {\n                        type: \"string\",\n                        description: \"The city and state, or zip code for the weather forecast (e.g., 'San Francisco, CA', '94107').\"\n                    },\n                    date: {\n                        type: \"string\",\n                        description: \"The date for the forecast in ISO 8601 format (YYYY-MM-DD). Defaults to today if not specified.\"\n                    }\n                },\n                required: [\n                    \"location\"\n                ]\n            }\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"deleteCalendarEventsByQuery\",\n            description: \"Deletes multiple calendar events within a specified date range that match a search query in their title/summary. Use with caution.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    query: {\n                        type: \"string\",\n                        description: \"The search query to match against event summaries (e.g., 'gym', 'meeting with project X'). Case-insensitive.\"\n                    },\n                    start_date: {\n                        type: \"string\",\n                        description: \"The start date/time for the search range in ISO 8601 format (e.g., '2025-04-01'). Required.\"\n                    },\n                    end_date: {\n                        type: \"string\",\n                        description: \"The end date/time for the search range in ISO 8601 format (e.g., '2025-04-30'). Required.\"\n                    }\n                },\n                required: [\n                    \"query\",\n                    \"start_date\",\n                    \"end_date\"\n                ]\n            }\n        }\n    }\n];\n// --- Tool Function Implementations ---\n// Maps tool names (from schema) to the actual functions that execute them.\nconst toolFunctions = {\n    saveUserPreference: async (args, userId = \"default\", accessToken = null)=>{\n        // Accessing UserPreference model directly - ideally use databaseService\n        if (!userId || userId === \"default\") return {\n            success: false,\n            message: \"Error: User ID is missing.\"\n        };\n        try {\n            // **Requires UserPreference model to be imported**\n            let userPref = await _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.UserPreference.findOne({\n                where: {\n                    user_id: userId\n                }\n            });\n            if (!userPref) userPref = await _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.UserPreference.create({\n                user_id: userId,\n                preferences_data: {}\n            });\n            const { category, key, value, context } = args;\n            // Basic validation\n            if (!category || !key || value === undefined) {\n                return {\n                    success: false,\n                    message: \"Error: Missing required fields (category, key, value) for preference.\"\n                };\n            }\n            const prefsData = userPref.preferences_data || {};\n            if (!prefsData[category]) prefsData[category] = {};\n            prefsData[category][key] = value; // Overwrite existing value simply\n            // Handle context separately if provided\n            if (context !== undefined) {\n                const contextKey = `${category}_context`;\n                if (!prefsData[contextKey]) prefsData[contextKey] = {};\n                prefsData[contextKey][key] = context;\n            }\n            await userPref.update({\n                preferences_data: prefsData\n            });\n            console.log(`Preference saved for user ${userId}: ${category}.${key}`);\n            return {\n                success: true,\n                message: `Preference saved: ${category}.${key} = ${JSON.stringify(value)}`\n            };\n        } catch (error) {\n            console.error(`Error saving preference for user ${userId}:`, error);\n            return {\n                success: false,\n                message: `Failed to save preference: ${error.message}`\n            };\n        }\n    },\n    addCalendarEvents: async (args, userId = \"default\", accessToken = null)=>{\n        // Uses imported addGCalendarEventInternal, checkForConflicts, invalidateCache\n        if (!accessToken) return {\n            error: \"User not authenticated.\",\n            success: false\n        }; // Return error object\n        const tokens = {\n            access_token: accessToken\n        };\n        const { events } = args;\n        if (!Array.isArray(events) || events.length === 0) return {\n            message: \"No event data provided.\",\n            success: false\n        };\n        const results = [];\n        const affectedDateRanges = [];\n        for (const event of events){\n            if (!event.summary || !event.start || !event.end) {\n                results.push({\n                    summary: event.summary || \"?\",\n                    error: \"Missing required fields (summary, start, end).\",\n                    success: false\n                });\n                continue;\n            }\n            try {\n                const startDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.start);\n                const endDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.end);\n                if (!startDt.isValid || !endDt.isValid) throw new Error(\"Invalid date format\");\n                if (startDt >= endDt) throw new Error(\"Start time must be before end time\");\n            } catch (e) {\n                results.push({\n                    summary: event.summary,\n                    error: `Invalid date format or logic: ${e.message}. Use ISO 8601 format.`,\n                    success: false\n                });\n                continue;\n            }\n            try {\n                // **Requires checkForConflicts function to be available**\n                const conflictCheckResult = await (0,_checkForConflicts_js__WEBPACK_IMPORTED_MODULE_6__.checkForConflicts)(tokens, event.start, event.end);\n                if (conflictCheckResult.conflicts) {\n                    console.warn(`Conflict detected for event: ${event.summary}`);\n                    results.push({\n                        summary: event.summary,\n                        conflict: true,\n                        suggestions: conflictCheckResult.suggestions || [],\n                        error: conflictCheckResult.error || `Event conflicts with existing schedule.`,\n                        success: false\n                    });\n                } else {\n                    // **Requires addGCalendarEventInternal function**\n                    const addedEvent = await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.addCalendarEvent)(tokens, event.summary, event.start, event.end, event.description, event.location, event.reminders);\n                    // Assuming addGCalendarEventInternal returns the created event object on success\n                    results.push({\n                        ...addedEvent,\n                        success: true\n                    }); // Add success flag\n                    affectedDateRanges.push({\n                        start: event.start,\n                        end: event.end\n                    });\n                    console.log(`Event added: ${event.summary}`);\n                }\n            } catch (addError) {\n                console.error(`Error adding event \"${event.summary}\" during conflict check or API call:`, addError);\n                results.push({\n                    summary: event.summary,\n                    error: `Failed to process event: ${addError.message}`,\n                    success: false\n                });\n            }\n        }\n        // Invalidate cache for all ranges where events were successfully added\n        // **Requires invalidateCache function**\n        for (const range of affectedDateRanges){\n            try {\n                await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__.invalidateCache)(tokens, range.start, range.end);\n            } catch (cacheError) {\n                console.error(\"Error invalidating cache after add:\", cacheError);\n            }\n        }\n        return results; // Return array of result objects (with success flags/errors)\n    },\n    getCalendarEvents: async (args, userId = \"default\", accessToken = null)=>{\n        // Uses getCachedEventsForDateRange -> fetchGCalendarEventsInternal\n        if (!accessToken) return \"Error: User not authenticated.\"; // Return error string\n        const tokens = {\n            access_token: accessToken\n        };\n        const { start_date, end_date } = args;\n        // Validate dates\n        if (!start_date || !end_date) {\n            return \"Error: Both start_date and end_date are required.\";\n        }\n        const startDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(start_date);\n        const endDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(end_date);\n        if (!startDt.isValid || !endDt.isValid) {\n            return `Error: Invalid date format. Please use ISO 8601 (e.g., YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ). Received: start=${start_date}, end=${end_date}`;\n        }\n        if (startDt >= endDt) {\n            return \"Error: Start date must be before end date.\";\n        }\n        try {\n            // **Requires getCachedEventsForDateRange function** (which likely calls fetchGCalendarEventsInternal)\n            // Use the specific function for date range caching\n            const cacheKeyStart = startDt.toISODate();\n            const cacheKeyEnd = endDt.toISODate(); // Use consistent date-only keys for daily cache range\n            const tokenHash = accessToken.substring(accessToken.length - 10); // Simple hash for user separation\n            const userIdCachePrefix = `user_${tokenHash}`; // Or use actual stable userId if available\n            // Fetch from cache or API\n            let events = await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_3__.getCachedEventsForDateRange)(userIdCachePrefix, cacheKeyStart, cacheKeyEnd);\n            if (events) {\n                console.log(`Cache HIT for events ${cacheKeyStart} to ${cacheKeyEnd}`);\n                // Filter events based on the *exact* start/end time requested by the user, as cache might be broader (daily)\n                events = events.filter((event)=>{\n                    const eventStart = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.start?.dateTime || event.start?.date);\n                    const eventEnd = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.end?.dateTime || event.end?.date);\n                    // Ensure valid dates before comparison\n                    if (!eventStart.isValid || !eventEnd.isValid) return false;\n                    // Event overlaps with the requested range [startDt, endDt)\n                    return eventStart < endDt && eventEnd > startDt;\n                });\n                return events; // Return potentially filtered events array\n            } else {\n                console.log(`Cache MISS for events ${cacheKeyStart} to ${cacheKeyEnd}`);\n                // **Requires fetchGCalendarEventsInternal function**\n                const apiEvents = await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.getCalendarEvents)(tokens, startDt.toJSDate(), endDt.toJSDate()); // Fetch exact range\n                if (apiEvents && Array.isArray(apiEvents)) {\n                    // Cache the result using the daily range key\n                    await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_3__.cacheEventsForDateRange)(userIdCachePrefix, cacheKeyStart, cacheKeyEnd, apiEvents, 300); // 5 min TTL\n                    console.log(`Stored events in Redis cache for ${cacheKeyStart} to ${cacheKeyEnd}`);\n                    return apiEvents; // Return the fetched events\n                } else {\n                    console.warn(`No events returned or non-array from fetchGCalendarEventsInternal for ${startDt.toISO()}-${endDt.toISO()}`);\n                    return []; // Return empty array on failure or non-array result\n                }\n            }\n        } catch (error) {\n            console.error(`Error in getCalendarEvents tool (${start_date} to ${end_date}):`, error);\n            // Provide a user-friendly error message\n            return `Error fetching calendar events: ${error.message}. Check connection or permissions.`;\n        }\n    },\n    deleteCalendarEvent: async (args, userId = \"default\", accessToken = null)=>{\n        // Uses google.calendar API directly for 'get', then deleteGCalendarEventInternal, invalidateCache\n        if (!accessToken) return {\n            error: \"User not authenticated.\",\n            success: false,\n            eventId: args.eventId\n        };\n        const tokens = {\n            access_token: accessToken\n        };\n        const { eventId } = args;\n        if (!eventId) return {\n            error: \"Event ID is required.\",\n            success: false\n        };\n        let originalStartDate, originalEndDate, eventSummary;\n        try {\n            // Need to GET the event first to know its date range for cache invalidation\n            // **Requires createOAuth2Client function**\n            const oauth2Client = (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.createOAuth2Client)(tokens);\n            const calendar = googleapis__WEBPACK_IMPORTED_MODULE_1__.google.calendar({\n                version: \"v3\",\n                auth: oauth2Client\n            });\n            try {\n                console.log(`Fetching event details for deletion: ${eventId}`);\n                const event = await calendar.events.get({\n                    calendarId: \"primary\",\n                    eventId: eventId\n                });\n                originalStartDate = event.data.start?.dateTime || event.data.start?.date;\n                originalEndDate = event.data.end?.dateTime || event.data.end?.date;\n                eventSummary = event.data.summary || eventId; // Use summary if available for result message\n                console.log(`Found event \"${eventSummary}\" starting ${originalStartDate}`);\n            } catch (getError) {\n                // Handle case where event doesn't exist (e.g., already deleted)\n                if (getError.code === 404) {\n                    console.log(`Event ${eventId} not found for deletion (may already be deleted).`);\n                    return {\n                        success: true,\n                        message: `Event ${eventId} not found (already deleted?).`,\n                        eventId: eventId,\n                        summary: eventId\n                    };\n                }\n                // Rethrow other errors during get\n                throw new Error(`Failed to retrieve event details before delete: ${getError.message}`);\n            }\n            // **Requires deleteGCalendarEventInternal function**\n            console.log(`Attempting to delete event: ${eventId}`);\n            await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.deleteCalendarEvent)(tokens, eventId); // Assume this throws on API error\n            console.log(`Successfully deleted event: ${eventId}`);\n            // Invalidate cache for the specific range if known\n            // **Requires invalidateCache function**\n            if (originalStartDate && originalEndDate) {\n                try {\n                    await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__.invalidateCache)(tokens, originalStartDate, originalEndDate);\n                } catch (cacheError) {\n                    console.error(\"Error invalidating cache after delete:\", cacheError);\n                }\n            } else {\n                // Fallback: maybe invalidate a broader range or just memory cache if range unknown\n                console.warn(`Could not determine date range for event ${eventId}, broad cache invalidation might be needed.`);\n                try {\n                    await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__.invalidateCache)(tokens);\n                } catch (cacheError) {\n                    console.error(\"Error invalidating cache after delete (fallback):\", cacheError);\n                }\n            }\n            return {\n                success: true,\n                eventId: eventId,\n                summary: eventSummary\n            }; // Return success object\n        } catch (error) {\n            console.error(`Error deleting event ${eventId}:`, error);\n            // Don't invalidate cache on error here, as the state is uncertain\n            return {\n                success: false,\n                error: `Failed to delete event ${eventId}: ${error.message}`,\n                eventId: eventId\n            };\n        }\n    },\n    updateCalendarEvent: async (args, userId = \"default\", accessToken = null)=>{\n        // Uses google.calendar API directly for 'get', then updateGCalendarEventInternal, invalidateCache\n        if (!accessToken) return {\n            error: \"User not authenticated.\",\n            success: false,\n            eventId: args.eventId\n        };\n        const tokens = {\n            access_token: accessToken\n        };\n        const { eventId, updates } = args;\n        if (!eventId || !updates || typeof updates !== \"object\" || Object.keys(updates).length === 0) {\n            return {\n                error: \"Event ID and a non-empty updates object are required.\",\n                success: false,\n                eventId: eventId\n            };\n        }\n        // Validate update values (basic check for ISO dates if provided)\n        try {\n            if (updates.start && !luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(updates.start).isValid) throw new Error(\"Invalid start date format\");\n            if (updates.end && !luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(updates.end).isValid) throw new Error(\"Invalid end date format\");\n            if (updates.start && updates.end && luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(updates.start) >= luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(updates.end)) {\n                throw new Error(\"Start time must be before end time\");\n            }\n        } catch (validationError) {\n            return {\n                error: `Invalid update data: ${validationError.message}. Use ISO 8601 format.`,\n                success: false,\n                eventId: eventId\n            };\n        }\n        let originalStartDate, originalEndDate;\n        try {\n            // Get original event times for cache invalidation\n            // **Requires createOAuth2Client function**\n            const oauth2Client = (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.createOAuth2Client)(tokens);\n            const calendar = googleapis__WEBPACK_IMPORTED_MODULE_1__.google.calendar({\n                version: \"v3\",\n                auth: oauth2Client\n            });\n            try {\n                console.log(`Fetching event details for update: ${eventId}`);\n                const event = await calendar.events.get({\n                    calendarId: \"primary\",\n                    eventId: eventId\n                });\n                originalStartDate = event.data.start?.dateTime || event.data.start?.date;\n                originalEndDate = event.data.end?.dateTime || event.data.end?.date;\n                console.log(`Found event \"${event.data.summary}\" starting ${originalStartDate}`);\n            } catch (getError) {\n                if (getError.code === 404) {\n                    return {\n                        success: false,\n                        error: `Event ${eventId} not found for update.`,\n                        eventId: eventId\n                    };\n                }\n                throw new Error(`Failed to retrieve event details before update: ${getError.message}`);\n            }\n            // **Requires updateGCalendarEventInternal function**\n            console.log(`Attempting to update event: ${eventId} with updates:`, updates);\n            const updatedEvent = await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.updateCalendarEvent)(tokens, eventId, updates); // Assume throws on API error\n            console.log(`Successfully updated event: ${eventId}`);\n            // Invalidate cache for both original and new ranges\n            // **Requires invalidateCache function**\n            const rangesToInvalidate = [];\n            if (originalStartDate && originalEndDate) rangesToInvalidate.push({\n                start: originalStartDate,\n                end: originalEndDate\n            });\n            // Use updated event data for new range\n            const newStartDate = updatedEvent.start?.dateTime || updatedEvent.start?.date;\n            const newEndDate = updatedEvent.end?.dateTime || updatedEvent.end?.date;\n            if (newStartDate && newEndDate) rangesToInvalidate.push({\n                start: newStartDate,\n                end: newEndDate\n            });\n            if (rangesToInvalidate.length > 0) {\n                const uniqueRanges = [\n                    ...new Set(rangesToInvalidate.map(JSON.stringify))\n                ].map(JSON.parse);\n                console.log(\"Invalidating cache ranges:\", uniqueRanges);\n                for (const range of uniqueRanges){\n                    try {\n                        await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__.invalidateCache)(tokens, range.start, range.end);\n                    } catch (cacheError) {\n                        console.error(`Error invalidating cache range ${range.start}-${range.end}:`, cacheError);\n                    }\n                }\n            } else {\n                console.warn(`Could not determine date range(s) for event ${eventId} update, broad cache invalidation might be needed.`);\n                try {\n                    await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__.invalidateCache)(tokens);\n                } catch (cacheError) {\n                    console.error(\"Error invalidating cache after update (fallback):\", cacheError);\n                }\n            }\n            // Return the updated event object, adding a success flag\n            return {\n                ...updatedEvent,\n                success: true\n            };\n        } catch (error) {\n            console.error(`Error updating event ${eventId}:`, error);\n            return {\n                success: false,\n                error: `Failed to update event ${eventId}: ${error.message}`,\n                eventId: eventId\n            };\n        }\n    },\n    findAvailableSlots: async (args, userId = \"default\", accessToken = null)=>{\n        // Uses getCachedEventsForDateRange, findAvailableSlotsUtil\n        if (!accessToken) return {\n            error: \"User not authenticated.\",\n            slots: []\n        };\n        const tokens = {\n            access_token: accessToken\n        };\n        const { duration, startDate: reqStartDate, endDate: reqEndDate, timePreference = \"any\", activity = \"event\" } = args;\n        if (!duration || typeof duration !== \"number\" || duration <= 0) {\n            return {\n                error: \"Valid duration (in minutes) is required.\",\n                slots: []\n            };\n        }\n        // Default search range: next 7 days from now\n        const now = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.now();\n        const startDate = reqStartDate ? luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(reqStartDate) : now;\n        const endDate = reqEndDate ? luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(reqEndDate) : startDate.plus({\n            days: 7\n        });\n        if (!startDate.isValid || !endDate.isValid) {\n            return {\n                error: `Invalid date format. Use ISO 8601. Received start=${reqStartDate}, end=${reqEndDate}`,\n                slots: []\n            };\n        }\n        if (startDate >= endDate) {\n            return {\n                error: \"Start date must be before end date.\",\n                slots: []\n            };\n        }\n        try {\n            // Fetch events for the entire search range first (cache-aware)\n            // **Requires getCachedEventsForDateRange function**\n            const cacheKeyStart = startDate.startOf(\"day\").toISODate();\n            const cacheKeyEnd = endDate.endOf(\"day\").toISODate(); // Cache daily granularity\n            const tokenHash = accessToken.substring(accessToken.length - 10);\n            const userIdCachePrefix = `user_${tokenHash}`;\n            let events = await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_3__.getCachedEventsForDateRange)(userIdCachePrefix, cacheKeyStart, cacheKeyEnd);\n            if (!events) {\n                console.log(`Cache MISS for slot search events ${cacheKeyStart} to ${cacheKeyEnd}`);\n                // **Requires fetchGCalendarEventsInternal function**\n                const apiEvents = await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.getCalendarEvents)(tokens, startDate.startOf(\"day\").toJSDate(), endDate.endOf(\"day\").toJSDate());\n                if (apiEvents && Array.isArray(apiEvents)) {\n                    events = apiEvents;\n                    await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_3__.cacheEventsForDateRange)(userIdCachePrefix, cacheKeyStart, cacheKeyEnd, events, 300);\n                } else {\n                    events = []; // Assume no events if fetch fails\n                }\n            } else {\n                console.log(`Cache HIT for slot search events ${cacheKeyStart} to ${cacheKeyEnd}`);\n            }\n            // Filter events to the precise requested time window *before* finding slots\n            const relevantEvents = events.filter((event)=>{\n                const eventStart = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.start?.dateTime || event.start?.date);\n                const eventEnd = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.end?.dateTime || event.end?.date);\n                return eventStart.isValid && eventEnd.isValid && eventStart < endDate && eventEnd > startDate;\n            });\n            // Use the imported findAvailableSlots function\n            const slots = await (0,_schedulingUtils_js__WEBPACK_IMPORTED_MODULE_5__.findAvailableSlots)(relevantEvents, duration, startDate.toISO(), endDate.toISO(), activity, timePreference);\n            return slots; // Return raw slots array (formatToolResponse handles presentation)\n        } catch (error) {\n            console.error(`Error in findAvailableSlots tool (${duration}min, ${startDate.toISO()} to ${endDate.toISO()}):`, error);\n            // Return an error object instead of throwing\n            return {\n                error: `Failed to find available slots: ${error.message}`,\n                slots: []\n            };\n        }\n    },\n    getWeatherForecast: async (args, userId = \"default\", accessToken = null)=>{\n        // Placeholder - requires actual weather API integration\n        const { location, date: dateString } = args;\n        if (!location) return {\n            error: \"Location is required for weather forecast.\",\n            success: false\n        };\n        // Default to today if date is missing or invalid\n        let forecastDate = dateString ? luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(dateString) : luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.now();\n        if (!forecastDate.isValid) {\n            console.warn(`Invalid date provided for weather forecast: ${dateString}. Defaulting to today.`);\n            forecastDate = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.now();\n        }\n        const formattedDate = forecastDate.toISODate(); // YYYY-MM-DD\n        console.log(`Placeholder: Fetching weather for ${location} on ${formattedDate}`);\n        try {\n            // --- Replace with actual weather API call ---\n            // Example: const weatherData = await getWeatherData(location, formattedDate);\n            // return { ...weatherData, success: true };\n            // --- Placeholder response ---\n            return {\n                location: location,\n                date: formattedDate,\n                forecast: `Weather data for ${location} on ${formattedDate} is currently unavailable.`,\n                success: false // Indicate data is not actual\n            };\n        } catch (error) {\n            console.error(`Error fetching weather for ${location}, ${formattedDate}:`, error);\n            return {\n                location: location,\n                date: formattedDate,\n                error: `Failed to get weather forecast: ${error.message}`,\n                success: false\n            };\n        }\n    },\n    deleteCalendarEventsByQuery: async (args, userId = \"default\", accessToken = null)=>{\n        // Uses getCachedEventsForDateRange, deleteGCalendarEventInternal, invalidateCache\n        if (!accessToken) {\n            return {\n                error: \"User not authenticated.\",\n                success: false,\n                deletedCount: 0\n            };\n        }\n        const tokens = {\n            access_token: accessToken\n        };\n        const { query, start_date, end_date } = args;\n        if (!query || !start_date || !end_date) {\n            return {\n                error: \"Query, start date, and end date are required.\",\n                success: false,\n                deletedCount: 0\n            };\n        }\n        const startDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(start_date);\n        const endDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(end_date);\n        if (!startDt.isValid || !endDt.isValid) {\n            return {\n                error: `Invalid date format. Use ISO 8601.`,\n                success: false,\n                deletedCount: 0\n            };\n        }\n        if (startDt >= endDt) {\n            return {\n                error: \"Start date must be before end date.\",\n                success: false,\n                deletedCount: 0\n            };\n        }\n        console.log(`Attempting to delete events matching \"${query}\" between ${startDt.toISO()} and ${endDt.toISO()}`);\n        try {\n            // 1. Get all events in the range (use cache)\n            // **Requires getCachedEventsForDateRange function**\n            const cacheKeyStart = startDt.startOf(\"day\").toISODate();\n            const cacheKeyEnd = endDt.endOf(\"day\").toISODate();\n            const tokenHash = accessToken.substring(accessToken.length - 10);\n            const userIdCachePrefix = `user_${tokenHash}`;\n            let events = await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_3__.getCachedEventsForDateRange)(userIdCachePrefix, cacheKeyStart, cacheKeyEnd);\n            if (!events) {\n                console.log(`Cache MISS for bulk delete search ${cacheKeyStart} to ${cacheKeyEnd}`);\n                // **Requires fetchGCalendarEventsInternal function**\n                const apiEvents = await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.getCalendarEvents)(tokens, startDt.startOf(\"day\").toJSDate(), endDt.endOf(\"day\").toJSDate());\n                events = Array.isArray(apiEvents) ? apiEvents : [];\n            // No need to cache here as we are about to delete potentially many events\n            } else {\n                console.log(`Cache HIT for bulk delete search ${cacheKeyStart} to ${cacheKeyEnd}`);\n            }\n            // Filter events precisely by requested time *and* query\n            const queryLower = query.toLowerCase();\n            const matchingEvents = events.filter((event)=>{\n                const eventStart = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.start?.dateTime || event.start?.date);\n                const eventEnd = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.end?.dateTime || event.end?.date);\n                const summaryLower = event.summary?.toLowerCase() || \"\";\n                return eventStart.isValid && eventEnd.isValid && eventStart < endDt && eventEnd > startDt && // Check time overlap\n                summaryLower.includes(queryLower); // Check summary match\n            });\n            if (matchingEvents.length === 0) {\n                console.log(`No events matching \"${query}\" found in the specified range.`);\n                return {\n                    success: true,\n                    message: `No events matching \"${query}\" found.`,\n                    deletedCount: 0\n                };\n            }\n            console.log(`Found ${matchingEvents.length} events matching query. Proceeding with deletion...`);\n            // 2. Delete each matching event\n            const deleteResults = [];\n            const failedDeletes = [];\n            for (const event of matchingEvents){\n                try {\n                    // **Requires deleteGCalendarEventInternal function**\n                    const result = await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.deleteCalendarEvent)(tokens, event.id); // Assume returns minimal info or throws\n                    deleteResults.push({\n                        id: event.id,\n                        summary: event.summary\n                    });\n                    // **Requires invalidateCache function** - Invalidate immediately after successful delete\n                    try {\n                        const eventStartIso = event.start?.dateTime || event.start?.date;\n                        const eventEndIso = event.end?.dateTime || event.end?.date;\n                        if (eventStartIso && eventEndIso) {\n                            await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__.invalidateCache)(tokens, eventStartIso, eventEndIso);\n                        } else {\n                            await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__.invalidateCache)(tokens); // Fallback\n                        }\n                    } catch (cacheError) {\n                        console.error(`Cache invalidation error during bulk delete for ${event.id}:`, cacheError);\n                    }\n                } catch (deleteError) {\n                    console.error(`Failed to delete event ${event.id} (\"${event.summary}\") during bulk operation:`, deleteError);\n                    failedDeletes.push({\n                        id: event.id,\n                        summary: event.summary,\n                        error: deleteError.message\n                    });\n                }\n            }\n            // 3. Compile and return result\n            const successCount = deleteResults.length;\n            let message = `Successfully deleted ${successCount} event(s) matching \"${query}\".`;\n            if (failedDeletes.length > 0) {\n                message += ` Failed to delete ${failedDeletes.length} event(s).`;\n                console.warn(\"Failures during bulk delete:\", failedDeletes);\n            }\n            return {\n                success: failedDeletes.length === 0,\n                message: message,\n                deletedCount: successCount,\n                deletedItems: deleteResults,\n                failedItems: failedDeletes // List failures\n            };\n        } catch (error) {\n            console.error(`Error during deleteCalendarEventsByQuery (${query}, ${start_date}-${end_date}):`, error);\n            return {\n                success: false,\n                error: `An error occurred during the bulk delete operation: ${error.message}`,\n                deletedCount: 0\n            };\n        }\n    }\n};\n// --- Exports ---\n// Export the schema and the implementation map\n // processToolCalls is not typically exported from here, but kept for reference\n // export { processToolCalls };\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/tools/toolIndex.js\n");

/***/ }),

/***/ "(api)/./pages/api/auth/[...nextauth].js":
/*!*****************************************!*\
  !*** ./pages/api/auth/[...nextauth].js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"next-auth\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/google */ \"next-auth/providers/google\");\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst authOptions = {\n    providers: [\n        next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1___default()({\n            clientId: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n            authorization: {\n                params: {\n                    scope: \"https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/calendar\",\n                    access_type: \"offline\",\n                    prompt: \"consent\"\n                }\n            }\n        })\n    ],\n    callbacks: {\n        async jwt ({ token, account, user }) {\n            // Initial sign in\n            if (account && user) {\n                return {\n                    accessToken: account.access_token,\n                    refreshToken: account.refresh_token,\n                    accessTokenExpires: account.expires_at * 1000,\n                    user\n                };\n            }\n            // Return previous token if the access token has not expired yet\n            if (Date.now() < token.accessTokenExpires) {\n                return token;\n            }\n            // Access token has expired, try to refresh it\n            try {\n                const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n                    headers: {\n                        \"Content-Type\": \"application/x-www-form-urlencoded\"\n                    },\n                    body: new URLSearchParams({\n                        client_id: process.env.GOOGLE_CLIENT_ID,\n                        client_secret: process.env.GOOGLE_CLIENT_SECRET,\n                        grant_type: \"refresh_token\",\n                        refresh_token: token.refreshToken\n                    }),\n                    method: \"POST\"\n                });\n                const refreshedTokens = await response.json();\n                if (!response.ok) {\n                    throw refreshedTokens;\n                }\n                return {\n                    ...token,\n                    accessToken: refreshedTokens.access_token,\n                    accessTokenExpires: Date.now() + refreshedTokens.expires_in * 1000,\n                    // Fall back to old refresh token, but note that\n                    // many providers may only allow using a refresh token once\n                    refreshToken: refreshedTokens.refresh_token ?? token.refreshToken\n                };\n            } catch (error) {\n                console.error(\"Error refreshing access token\", error);\n                // The error property will be used client-side to handle the refresh token error\n                return {\n                    ...token,\n                    error: \"RefreshAccessTokenError\"\n                };\n            }\n        },\n        async session ({ session, token }) {\n            session.user = token.user;\n            session.accessToken = token.accessToken;\n            session.error = token.error;\n            return session;\n        }\n    },\n    // Enable debug messages in the console if you are having problems\n    debug: \"development\" === \"development\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (next_auth__WEBPACK_IMPORTED_MODULE_0___default()(authOptions));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpQztBQUN1QjtBQUVqRCxNQUFNRSxjQUFjO0lBQ3pCQyxXQUFXO1FBQ1RGLGlFQUFjQSxDQUFDO1lBQ2JHLFVBQVVDLFFBQVFDLEdBQUcsQ0FBQ0MsZ0JBQWdCO1lBQ3RDQyxjQUFjSCxRQUFRQyxHQUFHLENBQUNHLG9CQUFvQjtZQUM5Q0MsZUFBZTtnQkFDYkMsUUFBUTtvQkFDTkMsT0FBTztvQkFDUEMsYUFBYTtvQkFDYkMsUUFBUTtnQkFDVjtZQUNGO1FBQ0Y7S0FDRDtJQUNEQyxXQUFXO1FBQ1QsTUFBTUMsS0FBSSxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRUMsSUFBSSxFQUFFO1lBQ2hDLGtCQUFrQjtZQUNsQixJQUFJRCxXQUFXQyxNQUFNO2dCQUNuQixPQUFPO29CQUNMQyxhQUFhRixRQUFRRyxZQUFZO29CQUNqQ0MsY0FBY0osUUFBUUssYUFBYTtvQkFDbkNDLG9CQUFvQk4sUUFBUU8sVUFBVSxHQUFHO29CQUN6Q047Z0JBQ0Y7WUFDRjtZQUVBLGdFQUFnRTtZQUNoRSxJQUFJTyxLQUFLQyxHQUFHLEtBQUtWLE1BQU1PLGtCQUFrQixFQUFFO2dCQUN6QyxPQUFPUDtZQUNUO1lBRUEsOENBQThDO1lBQzlDLElBQUk7Z0JBQ0YsTUFBTVcsV0FBVyxNQUFNQyxNQUFNLHVDQUF1QztvQkFDbEVDLFNBQVM7d0JBQUUsZ0JBQWdCO29CQUFvQztvQkFDL0RDLE1BQU0sSUFBSUMsZ0JBQWdCO3dCQUN4QkMsV0FBVzVCLFFBQVFDLEdBQUcsQ0FBQ0MsZ0JBQWdCO3dCQUN2QzJCLGVBQWU3QixRQUFRQyxHQUFHLENBQUNHLG9CQUFvQjt3QkFDL0MwQixZQUFZO3dCQUNaWixlQUFlTixNQUFNSyxZQUFZO29CQUNuQztvQkFDQWMsUUFBUTtnQkFDVjtnQkFFQSxNQUFNQyxrQkFBa0IsTUFBTVQsU0FBU1UsSUFBSTtnQkFFM0MsSUFBSSxDQUFDVixTQUFTVyxFQUFFLEVBQUU7b0JBQ2hCLE1BQU1GO2dCQUNSO2dCQUVBLE9BQU87b0JBQ0wsR0FBR3BCLEtBQUs7b0JBQ1JHLGFBQWFpQixnQkFBZ0JoQixZQUFZO29CQUN6Q0csb0JBQW9CRSxLQUFLQyxHQUFHLEtBQUtVLGdCQUFnQkcsVUFBVSxHQUFHO29CQUM5RCxnREFBZ0Q7b0JBQ2hELDJEQUEyRDtvQkFDM0RsQixjQUFjZSxnQkFBZ0JkLGFBQWEsSUFBSU4sTUFBTUssWUFBWTtnQkFDbkU7WUFDRixFQUFFLE9BQU9tQixPQUFPO2dCQUNkQyxRQUFRRCxLQUFLLENBQUMsaUNBQWlDQTtnQkFDL0MsZ0ZBQWdGO2dCQUNoRixPQUFPO29CQUFFLEdBQUd4QixLQUFLO29CQUFFd0IsT0FBTztnQkFBMEI7WUFDdEQ7UUFDRjtRQUNBLE1BQU1FLFNBQVEsRUFBRUEsT0FBTyxFQUFFMUIsS0FBSyxFQUFFO1lBQzlCMEIsUUFBUXhCLElBQUksR0FBR0YsTUFBTUUsSUFBSTtZQUN6QndCLFFBQVF2QixXQUFXLEdBQUdILE1BQU1HLFdBQVc7WUFDdkN1QixRQUFRRixLQUFLLEdBQUd4QixNQUFNd0IsS0FBSztZQUMzQixPQUFPRTtRQUNUO0lBQ0Y7SUFDQSxrRUFBa0U7SUFDbEVDLE9BQU92QyxrQkFBeUI7QUFDbEMsRUFBRTtBQUVGLGlFQUFlTCxnREFBUUEsQ0FBQ0UsWUFBWUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2djYWxlbmRhcmFwcC8uL3BhZ2VzL2FwaS9hdXRoL1suLi5uZXh0YXV0aF0uanM/NTI3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTmV4dEF1dGggZnJvbSAnbmV4dC1hdXRoJztcbmltcG9ydCBHb29nbGVQcm92aWRlciBmcm9tICduZXh0LWF1dGgvcHJvdmlkZXJzL2dvb2dsZSc7XG5cbmV4cG9ydCBjb25zdCBhdXRoT3B0aW9ucyA9IHtcbiAgcHJvdmlkZXJzOiBbXG4gICAgR29vZ2xlUHJvdmlkZXIoe1xuICAgICAgY2xpZW50SWQ6IHByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfSUQsXG4gICAgICBjbGllbnRTZWNyZXQ6IHByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfU0VDUkVULFxuICAgICAgYXV0aG9yaXphdGlvbjoge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBzY29wZTogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvdXNlcmluZm8ucHJvZmlsZSBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3VzZXJpbmZvLmVtYWlsIGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2FsZW5kYXInLFxuICAgICAgICAgIGFjY2Vzc190eXBlOiAnb2ZmbGluZScsXG4gICAgICAgICAgcHJvbXB0OiAnY29uc2VudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLFxuICBdLFxuICBjYWxsYmFja3M6IHtcbiAgICBhc3luYyBqd3QoeyB0b2tlbiwgYWNjb3VudCwgdXNlciB9KSB7XG4gICAgICAvLyBJbml0aWFsIHNpZ24gaW5cbiAgICAgIGlmIChhY2NvdW50ICYmIHVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhY2Nlc3NUb2tlbjogYWNjb3VudC5hY2Nlc3NfdG9rZW4sXG4gICAgICAgICAgcmVmcmVzaFRva2VuOiBhY2NvdW50LnJlZnJlc2hfdG9rZW4sXG4gICAgICAgICAgYWNjZXNzVG9rZW5FeHBpcmVzOiBhY2NvdW50LmV4cGlyZXNfYXQgKiAxMDAwLCAvLyBDb252ZXJ0IHRvIG1pbGxpc2Vjb25kc1xuICAgICAgICAgIHVzZXJcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIHByZXZpb3VzIHRva2VuIGlmIHRoZSBhY2Nlc3MgdG9rZW4gaGFzIG5vdCBleHBpcmVkIHlldFxuICAgICAgaWYgKERhdGUubm93KCkgPCB0b2tlbi5hY2Nlc3NUb2tlbkV4cGlyZXMpIHtcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfVxuXG4gICAgICAvLyBBY2Nlc3MgdG9rZW4gaGFzIGV4cGlyZWQsIHRyeSB0byByZWZyZXNoIGl0XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbicsIHtcbiAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyB9LFxuICAgICAgICAgIGJvZHk6IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgICAgICAgY2xpZW50X2lkOiBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX0lELFxuICAgICAgICAgICAgY2xpZW50X3NlY3JldDogcHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9TRUNSRVQsXG4gICAgICAgICAgICBncmFudF90eXBlOiAncmVmcmVzaF90b2tlbicsXG4gICAgICAgICAgICByZWZyZXNoX3Rva2VuOiB0b2tlbi5yZWZyZXNoVG9rZW4sXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlZnJlc2hlZFRva2VucyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgdGhyb3cgcmVmcmVzaGVkVG9rZW5zO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi50b2tlbixcbiAgICAgICAgICBhY2Nlc3NUb2tlbjogcmVmcmVzaGVkVG9rZW5zLmFjY2Vzc190b2tlbixcbiAgICAgICAgICBhY2Nlc3NUb2tlbkV4cGlyZXM6IERhdGUubm93KCkgKyByZWZyZXNoZWRUb2tlbnMuZXhwaXJlc19pbiAqIDEwMDAsXG4gICAgICAgICAgLy8gRmFsbCBiYWNrIHRvIG9sZCByZWZyZXNoIHRva2VuLCBidXQgbm90ZSB0aGF0XG4gICAgICAgICAgLy8gbWFueSBwcm92aWRlcnMgbWF5IG9ubHkgYWxsb3cgdXNpbmcgYSByZWZyZXNoIHRva2VuIG9uY2VcbiAgICAgICAgICByZWZyZXNoVG9rZW46IHJlZnJlc2hlZFRva2Vucy5yZWZyZXNoX3Rva2VuID8/IHRva2VuLnJlZnJlc2hUb2tlbixcbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlZnJlc2hpbmcgYWNjZXNzIHRva2VuJywgZXJyb3IpO1xuICAgICAgICAvLyBUaGUgZXJyb3IgcHJvcGVydHkgd2lsbCBiZSB1c2VkIGNsaWVudC1zaWRlIHRvIGhhbmRsZSB0aGUgcmVmcmVzaCB0b2tlbiBlcnJvclxuICAgICAgICByZXR1cm4geyAuLi50b2tlbiwgZXJyb3I6ICdSZWZyZXNoQWNjZXNzVG9rZW5FcnJvcicgfTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHNlc3Npb24oeyBzZXNzaW9uLCB0b2tlbiB9KSB7XG4gICAgICBzZXNzaW9uLnVzZXIgPSB0b2tlbi51c2VyO1xuICAgICAgc2Vzc2lvbi5hY2Nlc3NUb2tlbiA9IHRva2VuLmFjY2Vzc1Rva2VuO1xuICAgICAgc2Vzc2lvbi5lcnJvciA9IHRva2VuLmVycm9yO1xuICAgICAgcmV0dXJuIHNlc3Npb247XG4gICAgfVxuICB9LFxuICAvLyBFbmFibGUgZGVidWcgbWVzc2FnZXMgaW4gdGhlIGNvbnNvbGUgaWYgeW91IGFyZSBoYXZpbmcgcHJvYmxlbXNcbiAgZGVidWc6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTmV4dEF1dGgoYXV0aE9wdGlvbnMpOyJdLCJuYW1lcyI6WyJOZXh0QXV0aCIsIkdvb2dsZVByb3ZpZGVyIiwiYXV0aE9wdGlvbnMiLCJwcm92aWRlcnMiLCJjbGllbnRJZCIsInByb2Nlc3MiLCJlbnYiLCJHT09HTEVfQ0xJRU5UX0lEIiwiY2xpZW50U2VjcmV0IiwiR09PR0xFX0NMSUVOVF9TRUNSRVQiLCJhdXRob3JpemF0aW9uIiwicGFyYW1zIiwic2NvcGUiLCJhY2Nlc3NfdHlwZSIsInByb21wdCIsImNhbGxiYWNrcyIsImp3dCIsInRva2VuIiwiYWNjb3VudCIsInVzZXIiLCJhY2Nlc3NUb2tlbiIsImFjY2Vzc190b2tlbiIsInJlZnJlc2hUb2tlbiIsInJlZnJlc2hfdG9rZW4iLCJhY2Nlc3NUb2tlbkV4cGlyZXMiLCJleHBpcmVzX2F0IiwiRGF0ZSIsIm5vdyIsInJlc3BvbnNlIiwiZmV0Y2giLCJoZWFkZXJzIiwiYm9keSIsIlVSTFNlYXJjaFBhcmFtcyIsImNsaWVudF9pZCIsImNsaWVudF9zZWNyZXQiLCJncmFudF90eXBlIiwibWV0aG9kIiwicmVmcmVzaGVkVG9rZW5zIiwianNvbiIsIm9rIiwiZXhwaXJlc19pbiIsImVycm9yIiwiY29uc29sZSIsInNlc3Npb24iLCJkZWJ1ZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/auth/[...nextauth].js\n");

/***/ }),

/***/ "(api)/./pages/api/chat-stream.js":
/*!**********************************!*\
  !*** ./pages/api/chat-stream.js ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_chatbot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/chatbot */ \"(api)/./lib/chatbot.js\");\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/next */ \"next-auth/next\");\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_next__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _api_auth_nextauth___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/auth/[...nextauth] */ \"(api)/./pages/api/auth/[...nextauth].js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_chatbot__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_chatbot__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst config = {\n    api: {\n        responseLimit: false\n    }\n};\nasync function handler(req, res) {\n    // This endpoint only accepts GET requests for SSE\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const session = await (0,next_auth_next__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(req, res, _api_auth_nextauth___WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        const { message, startNew } = req.query; // Read startNew query param\n        const startNewConversation = startNew === \"true\"; // Convert to boolean\n        if (!message) {\n            return res.status(400).json({\n                error: \"Message is required\"\n            });\n        }\n        // Check if user is authenticated\n        if (!session) {\n            return res.status(401).json({\n                error: \"Authentication required\"\n            });\n        }\n        // Check if token has an error (failed refresh)\n        if (session.error === \"RefreshAccessTokenError\") {\n            return res.status(401).json({\n                error: \"Your session has expired. Please sign in again.\"\n            });\n        }\n        // Get user ID from session\n        const userId = session.user?.email || \"default\";\n        // Get access token from session\n        const accessToken = session.accessToken;\n        // Set up Server-Sent Events\n        res.writeHead(200, {\n            \"Content-Type\": \"text/event-stream\",\n            \"Cache-Control\": \"no-cache, no-transform, no-store\",\n            \"Connection\": \"keep-alive\",\n            \"X-Accel-Buffering\": \"no\" // Disable buffering in Nginx\n        });\n        // Send initial message\n        res.write(`data: ${JSON.stringify({\n            type: \"start\"\n        })}\\n\\n`);\n        // Force flush the initial message\n        if (res.flush) {\n            try {\n                res.flush();\n            } catch (flushError) {\n                console.warn(\"Error flushing initial message:\", flushError);\n            }\n        }\n        // Create a callback function to handle streaming chunks\n        const streamCallback = (chunk)=>{\n            try {\n                const chunkData = JSON.stringify(chunk);\n                res.write(`data: ${chunkData}\\n\\n`);\n            } catch (writeError) {\n                console.error(\"Error writing chunk to response:\", writeError);\n            }\n            // Flush the response to ensure chunks are sent immediately\n            if (res.flush) {\n                try {\n                    res.flush();\n                } catch (flushError) {\n                    console.warn(\"Error flushing response:\", flushError);\n                }\n            }\n        };\n        try {\n            // Call the chatbot with streaming enabled\n            await (0,_lib_chatbot__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(message, userId, accessToken, streamCallback, startNewConversation);\n            // Add a small delay before sending the end message\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n            // Send completion message\n            const endMessage = JSON.stringify({\n                type: \"end\"\n            });\n            res.write(`data: ${endMessage}\\n\\n`);\n            // Final flush before ending\n            if (res.flush) {\n                try {\n                    res.flush();\n                } catch (flushError) {\n                    console.warn(\"Error flushing final response:\", flushError);\n                }\n            }\n            // Add another small delay before ending the response\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            res.end();\n        } catch (error) {\n            // Send error message\n            console.error(\"Error in chat-stream processing:\", error);\n            res.write(`data: ${JSON.stringify({\n                type: \"error\",\n                content: error.message\n            })}\\n\\n`);\n            // Flush error message\n            if (res.flush) {\n                try {\n                    res.flush();\n                } catch (flushError) {\n                    console.warn(\"Error flushing error response:\", flushError);\n                }\n            }\n            res.end();\n        }\n    } catch (error) {\n        console.error(\"Error in chat-stream API:\", error);\n        return res.status(500).json({\n            error: \"An error occurred while processing your request\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/chat-stream.js\n");

/***/ }),

/***/ "(api)/./credentials.json":
/*!**************************!*\
  !*** ./credentials.json ***!
  \**************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"web":{"client_id":"1067969091630-i858c64u30bsfafv6803adcbropoiqpl.apps.googleusercontent.com","project_id":"gcalendarmate","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_secret":"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","redirect_uris":["http://localhost:3000/auth/google/callback","https://gcalendarapp.vercel.app/auth/google","https://gcalendarapp.vercel.app/auth/google/callback","http://localhost:3000/api/auth/callback/google"],"javascript_origins":["http://localhost:3000","https://gcalendarapp.vercel.app"]}}');

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat-stream&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fchat-stream.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();