"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/chat-stream";
exports.ids = ["pages/api/chat-stream"];
exports.modules = {

/***/ "dotenv/config":
/*!********************************!*\
  !*** external "dotenv/config" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("dotenv/config");

/***/ }),

/***/ "google-auth-library":
/*!**************************************!*\
  !*** external "google-auth-library" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("google-auth-library");

/***/ }),

/***/ "googleapis":
/*!*****************************!*\
  !*** external "googleapis" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("googleapis");

/***/ }),

/***/ "ioredis":
/*!**************************!*\
  !*** external "ioredis" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("ioredis");

/***/ }),

/***/ "next-auth":
/*!****************************!*\
  !*** external "next-auth" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("next-auth");

/***/ }),

/***/ "next-auth/next":
/*!*********************************!*\
  !*** external "next-auth/next" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("next-auth/next");

/***/ }),

/***/ "next-auth/providers/google":
/*!*********************************************!*\
  !*** external "next-auth/providers/google" ***!
  \*********************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/google");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "node-cache":
/*!*****************************!*\
  !*** external "node-cache" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node-cache");

/***/ }),

/***/ "chrono-node":
/*!******************************!*\
  !*** external "chrono-node" ***!
  \******************************/
/***/ ((module) => {

module.exports = import("chrono-node");;

/***/ }),

/***/ "luxon":
/*!************************!*\
  !*** external "luxon" ***!
  \************************/
/***/ ((module) => {

module.exports = import("luxon");;

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "sequelize":
/*!****************************!*\
  !*** external "sequelize" ***!
  \****************************/
/***/ ((module) => {

module.exports = import("sequelize");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat-stream&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fchat-stream.js&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat-stream&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fchat-stream.js&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_chat_stream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/chat-stream.js */ \"(api)/./pages/api/chat-stream.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_chat_stream_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_chat_stream_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_chat_stream_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_chat_stream_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/chat-stream\",\n        pathname: \"/api/chat-stream\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_chat_stream_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmNoYXQtc3RyZWFtJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZjaGF0LXN0cmVhbS5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUN1RDtBQUN2RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsc0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHNEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2djYWxlbmRhcmFwcC8/NzRiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2NoYXQtc3RyZWFtLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvY2hhdC1zdHJlYW1cIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jaGF0LXN0cmVhbVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat-stream&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fchat-stream.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./googleCalendar.js":
/*!***************************!*\
  !*** ./googleCalendar.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { google } = __webpack_require__(/*! googleapis */ \"googleapis\");\nconst { OAuth2Client } = __webpack_require__(/*! google-auth-library */ \"google-auth-library\");\n/**\n * Creates and configures an OAuth2Client with the provided tokens\n * @param {Object} tokens - The tokens object containing access_token and optionally refresh_token\n * @returns {OAuth2Client} - Configured OAuth2Client instance\n */ function createOAuth2Client(tokens) {\n    try {\n        const credentials = __webpack_require__(/*! ./credentials.json */ \"(api)/./credentials.json\");\n        const { client_secret, client_id, redirect_uris } = credentials.web;\n        const oauth2Client = new OAuth2Client(client_id, client_secret, redirect_uris[0]);\n        // Handle both full tokens object and just access_token\n        if (typeof tokens === \"object\" && tokens !== null) {\n            if (tokens.access_token) {\n                // If it's just the access_token from NextAuth session\n                oauth2Client.setCredentials({\n                    access_token: tokens.access_token,\n                    refresh_token: tokens.refresh_token,\n                    token_type: \"Bearer\"\n                });\n            } else {\n                // If it's a full tokens object\n                oauth2Client.setCredentials(tokens);\n            }\n        } else {\n            console.error(\"Invalid tokens format:\", tokens);\n            throw new Error(\"Invalid tokens format\");\n        }\n        return oauth2Client;\n    } catch (error) {\n        console.error(\"Error creating OAuth2Client:\", error);\n        throw error;\n    }\n}\n/**\n * Get calendar events for a specific date range\n * @param {Object} tokens - User's OAuth tokens\n * @param {Date} start_date - Start date for events\n * @param {Date} end_date - End date for events\n * @returns {Array} - List of calendar events\n */ async function getCalendarEvents(tokens, start_date, end_date) {\n    try {\n        const oauth2Client = createOAuth2Client(tokens);\n        const calendar = google.calendar({\n            version: \"v3\",\n            auth: oauth2Client\n        });\n        const res = await calendar.events.list({\n            calendarId: \"primary\",\n            timeMin: start_date.toISOString(),\n            timeMax: end_date.toISOString(),\n            singleEvents: true,\n            orderBy: \"startTime\"\n        });\n        return res.data.items || [];\n    } catch (error) {\n        console.error(\"Error fetching events:\", error);\n        return [];\n    }\n}\n/**\n * Add a new calendar event\n * @param {Object} tokens - User's OAuth tokens\n * @param {string} summary - Event title\n * @param {string} start - Event start time\n * @param {string} end - Event end time\n * @param {string} description - Event description\n * @param {string} location - Event location\n * @param {Array} reminders - Optional reminders in minutes\n * @returns {Object} - Created event data\n */ async function addCalendarEvent(tokens, summary, start, end, description, location, reminders) {\n    const oauth2Client = createOAuth2Client(tokens);\n    const calendar = google.calendar({\n        version: \"v3\",\n        auth: oauth2Client\n    });\n    const event = {\n        summary,\n        description,\n        location,\n        start: {\n            dateTime: start\n        },\n        end: {\n            dateTime: end\n        }\n    };\n    // Add reminders if provided\n    if (reminders && Array.isArray(reminders) && reminders.length > 0) {\n        event.reminders = {\n            useDefault: false,\n            overrides: reminders.map((minutes)=>({\n                    method: \"popup\",\n                    minutes: minutes\n                }))\n        };\n    }\n    try {\n        const res = await calendar.events.insert({\n            calendarId: \"primary\",\n            resource: event\n        });\n        return res.data;\n    } catch (error) {\n        console.error(\"Error adding event:\", error);\n        throw error;\n    }\n}\n/**\n * Delete a calendar event\n * @param {Object} tokens - User's OAuth tokens\n * @param {string} eventId - ID of the event to delete \n * @param {string} calendarId - Calendar ID (defaults to 'primary')\n * @returns {Object} - Deleted event summary\n */ async function deleteCalendarEvent(tokens, eventId, calendarId = \"primary\") {\n    // Validate inputs\n    if (!tokens) {\n        throw new Error(\"OAuth tokens are required\");\n    }\n    if (!eventId) {\n        throw new Error(\"Event ID is required\");\n    }\n    const oauth2Client = createOAuth2Client(tokens);\n    const calendar = google.calendar({\n        version: \"v3\",\n        auth: oauth2Client\n    });\n    try {\n        // First get the event to return its summary after deletion\n        let eventSummary = null;\n        try {\n            const event = await calendar.events.get({\n                calendarId: calendarId,\n                eventId: eventId\n            });\n            eventSummary = event.data.summary;\n        } catch (getError) {\n            console.warn(`Could not retrieve event details before deletion: ${getError.message}`);\n        }\n        await calendar.events.delete({\n            calendarId: calendarId,\n            eventId: eventId\n        });\n        return {\n            success: true,\n            summary: eventSummary,\n            eventId: eventId\n        };\n    } catch (error) {\n        console.error(`Error deleting event ${eventId}:`, error.message);\n        return {\n            success: false,\n            error: error.message,\n            eventId: eventId\n        };\n    }\n}\n/**\n * Update a calendar event\n * @param {Object} tokens - User's OAuth tokens\n * @param {string} eventId - ID of the event to update\n * @param {Object} updates - Object containing fields to update\n * @returns {Object} - Updated event data\n */ async function updateCalendarEvent(tokens, eventId, updates) {\n    const oauth2Client = createOAuth2Client(tokens);\n    const calendar = google.calendar({\n        version: \"v3\",\n        auth: oauth2Client\n    });\n    try {\n        // First get the current event\n        const currentEvent = await calendar.events.get({\n            calendarId: \"primary\",\n            eventId: eventId\n        });\n        // Prepare the update payload\n        const updatedEvent = {\n            ...currentEvent.data\n        };\n        if (updates.summary) updatedEvent.summary = updates.summary;\n        if (updates.description) updatedEvent.description = updates.description;\n        if (updates.location) updatedEvent.location = updates.location;\n        if (updates.start) {\n            updatedEvent.start = {\n                dateTime: updates.start,\n                timeZone: currentEvent.data.start.timeZone\n            };\n        }\n        if (updates.end) {\n            updatedEvent.end = {\n                dateTime: updates.end,\n                timeZone: currentEvent.data.end.timeZone\n            };\n        }\n        // Update the event\n        const res = await calendar.events.update({\n            calendarId: \"primary\",\n            eventId: eventId,\n            resource: updatedEvent\n        });\n        return res.data;\n    } catch (error) {\n        console.error(\"Error updating event:\", error);\n        throw error;\n    }\n}\nmodule.exports = {\n    createOAuth2Client,\n    getCalendarEvents,\n    addCalendarEvent,\n    deleteCalendarEvent,\n    updateCalendarEvent\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./googleCalendar.js\n");

/***/ }),

/***/ "(api)/./lib/chatbot.js":
/*!************************!*\
  !*** ./lib/chatbot.js ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ chat),\n/* harmony export */   getConversationsByUserId: () => (/* reexport safe */ _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.getConversationsByUserId),\n/* harmony export */   listTodaysEvents: () => (/* reexport safe */ _tools_eventHelpers_js__WEBPACK_IMPORTED_MODULE_6__.listTodaysEvents),\n/* harmony export */   suggestEventTime: () => (/* reexport safe */ _tools_eventHelpers_js__WEBPACK_IMPORTED_MODULE_6__.suggestEventTime)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! luxon */ \"luxon\");\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node-cache */ \"node-cache\");\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(node_cache__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dotenv/config */ \"dotenv/config\");\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(dotenv_config__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _data_prompts_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./data/prompts.js */ \"(api)/./lib/data/prompts.js\");\n/* harmony import */ var _tools_schedulingUtils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tools/schedulingUtils.js */ \"(api)/./lib/tools/schedulingUtils.js\");\n/* harmony import */ var _tools_eventHelpers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tools/eventHelpers.js */ \"(api)/./lib/tools/eventHelpers.js\");\n/* harmony import */ var _tools_toolIndex_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tools/toolIndex.js */ \"(api)/./lib/tools/toolIndex.js\");\n/* harmony import */ var _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./postgresClient.js */ \"(api)/./lib/postgresClient.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__, luxon__WEBPACK_IMPORTED_MODULE_1__, _tools_schedulingUtils_js__WEBPACK_IMPORTED_MODULE_5__, _tools_eventHelpers_js__WEBPACK_IMPORTED_MODULE_6__, _tools_toolIndex_js__WEBPACK_IMPORTED_MODULE_7__, _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__]);\n([openai__WEBPACK_IMPORTED_MODULE_0__, luxon__WEBPACK_IMPORTED_MODULE_1__, _tools_schedulingUtils_js__WEBPACK_IMPORTED_MODULE_5__, _tools_eventHelpers_js__WEBPACK_IMPORTED_MODULE_6__, _tools_toolIndex_js__WEBPACK_IMPORTED_MODULE_7__, _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// lib/chatbot.js\n// --- IMPORTS ---\n\n\n\n\n// Local Modules\n// Import system prompt\n\n\n\n\n\n// Weather client function (if used)\n// import { getWeatherData } from './weatherClient.js'; // Example path\n// Google APIs library (needed for direct calls in tool functions like delete/update)\n// **FIX:** Use import instead of require for consistency if possible (depends on project setup)\n// If using ES modules: import { google } from 'googleapis';\n// If require is necessary:\nconst { google } = __webpack_require__(/*! googleapis */ \"googleapis\"); // Keep require if necessary for googleapis\n// --- Database Initialization ---\n// (Keep the getDatabaseInitPromise function as is)\nlet dbInitPromise = null;\n// Initialize OpenAI client\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n// --- Helper Functions (Formatting & Time) ---\nfunction formatEventTime(eventTime) {\n    try {\n        const dt = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(eventTime);\n        if (dt.isValid) {\n            return dt.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.DATETIME_FULL);\n        }\n        const dateOnly = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(eventTime, {\n            zone: \"utc\"\n        });\n        if (dateOnly.isValid) {\n            return dateOnly.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.DATE_FULL) + \" (All day)\";\n        }\n        return eventTime;\n    } catch (e) {\n        console.warn(\"Error formatting event time:\", eventTime, e);\n        return String(eventTime); // Ensure returns string\n    }\n}\nfunction formatCalendarEvents(events) {\n    if (!events) return \"No events found or an error occurred.\";\n    if (!Array.isArray(events)) return \"An error occurred processing events.\";\n    if (events.length === 0) return \"No events found for the specified time period.\";\n    return events.map((event)=>{\n        try {\n            const start = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(event.start?.dateTime || event.start?.date);\n            const end = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(event.end?.dateTime || event.end?.date);\n            if (!start.isValid || !end.isValid) return `❓ Invalid date found for event: ${event.summary || event.id}`;\n            const isAllDay = !event.start?.dateTime;\n            // Include the event ID in the formatted output (hidden with a zero-width space for reference)\n            let formattedEvent = `📅 ${event.summary || \"(No Title)\"} [ID:​${event.id}]\\n`;\n            formattedEvent += `   📆 ${start.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.DATE_FULL)}\\n`;\n            if (!isAllDay) {\n                formattedEvent += `   🕒 ${start.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.TIME_SIMPLE)} - ${end.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.TIME_SIMPLE)}\\n`;\n            } else {\n                formattedEvent += `   🕒 All Day\\n`;\n            }\n            if (event.description) formattedEvent += `   📝 ${event.description}\\n`;\n            if (event.location) formattedEvent += `   📍 ${event.location}\\n`;\n            if (event.reminders?.useDefault === false && Array.isArray(event.reminders.overrides)) {\n                formattedEvent += `   🔔 Reminders: ${event.reminders.overrides.map((r)=>`${r.minutes} min`).join(\", \")}\\n`;\n            }\n            return formattedEvent.trim(); // Trim each event string\n        } catch (mapError) {\n            console.error(\"Error mapping event:\", event, mapError);\n            return `❓ Error processing event: ${event.summary || event.id}`;\n        }\n    }).join(\"\\n\\n\"); // Add space between events\n}\n// --- Formatting Tool Responses for the LLM ---\nfunction formatToolResponse(functionName, result) {\n    try {\n        // Explicitly handle null/undefined results first\n        if (result == null) {\n            console.warn(`Tool ${functionName} returned null or undefined.`);\n            return `Tool ${functionName} did not return a result. (Status: FAILED)`;\n        }\n        // Handle known error shapes returned by tool functions\n        if (typeof result === \"string\" && result.toLowerCase().startsWith(\"error:\")) return `${result} (Status: FAILED)`;\n        if (typeof result === \"object\" && result.error) return `Error executing ${functionName}: ${result.error} (Status: FAILED)`;\n        if (typeof result === \"object\" && result.success === false) return `Tool ${functionName} failed: ${result.message || \"No details.\"} (Status: FAILED)`;\n        // --- Format successful results ---\n        switch(functionName){\n            case \"saveUserPreference\":\n                return result.success ? `✅ Pref saved: ${result.message} (Status: SUCCESS)` : `❌ Pref fail: ${result.message} (Status: FAILED)`;\n            case \"addCalendarEvents\":\n                if (!Array.isArray(result)) return \"Error: Invalid response format from addCalendarEvents. (Status: FAILED)\";\n                if (result.length === 0) return \"No events were processed. (Status: NEUTRAL)\";\n                return result.map((item)=>{\n                    if (!item) return \"❓ Invalid item in result array. (Status: FAILED)\";\n                    if (item.error) {\n                        const summary = item.summary || \"?\";\n                        if (item.conflict) {\n                            // Include suggestions if available\n                            const suggestionText = item.suggestions && item.suggestions.length > 0 ? ` Suggested slots: ${item.suggestions.map((s)=>`${luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(s.start).toFormat(\"h:mma\")} - ${luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(s.end).toFormat(\"h:mma\")}`).join(\", \")}` : \"\";\n                            return `⚠️ Conflict detected for event \"${summary}\".${suggestionText} (Status: CONFLICT)`;\n                        } else {\n                            return `❌ Failed to add event \"${summary}\": ${item.error} (Status: FAILED)`;\n                        }\n                    } else if (item.id && item.summary && (item.start?.dateTime || item.start?.date)) {\n                        try {\n                            const startStr = formatEventTime(item.start.dateTime || item.start.date); // Use existing helper\n                            return `✅ Event added: \"${item.summary}\" starting ${startStr}. (ID: ${item.id}) (Status: SUCCESS)`;\n                        } catch (e) {\n                            console.error(\"Error formatting success message for added event:\", item, e);\n                            return `✅ Event added: \"${item.summary}\" (details unavailable). (ID: ${item.id}) (Status: SUCCESS)`;\n                        }\n                    } else {\n                        console.warn(\"Unexpected item shape in addCalendarEvents result:\", item);\n                        return `❓ Unknown outcome for an event attempt. (Status: UNKNOWN)`;\n                    }\n                }).join(\"\\n\");\n            case \"getCalendarEvents\":\n                if (typeof result === \"string\") return `🗓️ Events: ${result} (Status: ${result.toLowerCase().startsWith(\"error\") ? \"FAILED\" : \"SUCCESS\"})`;\n                if (!Array.isArray(result)) return \"Error: Invalid getCalendarEvents response. (Status: FAILED)\";\n                return result.length === 0 ? \"\\uD83D\\uDDD3️ No events found. (Status: SUCCESS)\" : `🗓️ Found ${result.length} event(s):\\n\\n${formatCalendarEvents(result)} (Status: SUCCESS)`;\n            case \"deleteCalendarEvent\":\n                return result.success ? `🗑️ Event \"${result.summary || result.eventId}\" deleted. (Status: SUCCESS)` // Use eventId if summary wasn't fetched/returned\n                 : `❌ Failed to delete event ${result.eventId || \"?\"}: ${result.error || result.message || \"?\"} (Status: FAILED)`;\n            case \"updateCalendarEvent\":\n                // Check if result has an ID, indicating success from googleCalendar update function\n                if (result && result.id) {\n                    return `✏️ Event \"${result.summary || eventId}\" updated. (ID: ${result.id}) (Status: SUCCESS)`;\n                } else {\n                    // Handle potential error objects passed back\n                    const errorMsg = result?.error || result?.message || JSON.stringify(result);\n                    return `❌ Failed to update event: ${errorMsg} (Status: FAILED)`;\n                }\n            case \"findAvailableSlots\":\n                if (!Array.isArray(result)) return \"Error: Invalid findAvailableSlots response. (Status: FAILED)\";\n                if (result.length === 0) return `🕒 No available slots found matching criteria. (Status: SUCCESS)`;\n                // Format slots with success status\n                const formattedSlots = result.map((slot)=>`${luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(slot.start).toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.DATETIME_SHORT)} - ${luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(slot.end).toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.TIME_SIMPLE)}`).join(\"\\n\");\n                return `🕒 Found ${result.length} available slot(s):\\n\\n${formattedSlots}\\n\\n(Status: SUCCESS)`;\n            case \"getWeatherForecast\":\n                return `🌤️ Weather for ${result.location} on ${result.date}: ${result.forecast || \"N/A\"} (Status: ${result.forecast && !result.forecast.includes(\"unavailable\") ? \"SUCCESS\" : \"PARTIAL\"})`;\n            case \"deleteCalendarEventsByQuery\":\n                return result.success ? `🗑️ ${result.message} (Deleted Count: ${result.deletedCount}) (Status: SUCCESS)` : `❌ Failed bulk delete: ${result.message || result.error || \"?\"} (Status: FAILED)`;\n            default:\n                // Safely stringify other results with status indicators\n                if (typeof result === \"object\" && result !== null) {\n                    const status = result.success === true ? \"SUCCESS\" : result.success === false ? \"FAILED\" : \"UNKNOWN\";\n                    return `${JSON.stringify(result)} (Status: ${status})`;\n                } else {\n                    return `${String(result)} (Status: UNKNOWN)`;\n                }\n        }\n    } catch (formatError) {\n        console.error(`CRITICAL: Error *within* formatToolResponse for ${functionName}:`, formatError, \"Raw result:\", result);\n        // Return a guaranteed string error message\n        return `Internal Error: Failed to format the result for ${functionName}. (Status: ERROR)`;\n    }\n}\n// Helper function to process tool calls\nasync function processToolCalls(toolCalls, messages, conversationId, userId, accessToken) {\n    try {\n        console.log(`Processing ${toolCalls.length} tool calls`);\n        // Use Promise.allSettled for robustness\n        const toolPromises = toolCalls.map(async (toolCall)=>{\n            const toolCallId = toolCall.id;\n            const functionName = toolCall.function?.name;\n            let toolResponseContent = \"\";\n            try {\n                // 1. Basic Validation\n                if (!toolCallId || toolCall.type !== \"function\" || !functionName) {\n                    throw new Error(`Invalid tool call structure received: ${JSON.stringify(toolCall)}`);\n                }\n                if (!_tools_toolIndex_js__WEBPACK_IMPORTED_MODULE_7__.toolFunctions[functionName]) {\n                    throw new Error(`Tool function \"${functionName}\" is not available.`);\n                }\n                // 2. Parse Arguments\n                let parsedArgs = {};\n                try {\n                    parsedArgs = JSON.parse(toolCall.function.arguments || \"{}\");\n                } catch (parseError) {\n                    throw new Error(`Invalid JSON arguments for ${functionName}. Args: ${toolCall.function.arguments}. Error: ${parseError.message}`);\n                }\n                // 3. Execute Tool Function\n                console.log(`Executing tool: ${functionName} (ID: ${toolCallId}) with args:`, parsedArgs);\n                const result = await _tools_toolIndex_js__WEBPACK_IMPORTED_MODULE_7__.toolFunctions[functionName](parsedArgs, userId, accessToken);\n                console.log(`Tool ${functionName} (ID: ${toolCallId}) raw result:`, result);\n                // 4. Format Result\n                toolResponseContent = formatToolResponse(functionName, result);\n                console.log(`Tool ${functionName} (ID: ${toolCallId}) formatted response:`, toolResponseContent);\n                // Add a success indicator to the tool response for context tracking\n                let successIndicator = \"\";\n                if (functionName === \"deleteCalendarEvent\" && result.success) {\n                    successIndicator = \"\\n\\n[✅ Event successfully deleted]\";\n                } else if (functionName === \"addCalendarEvent\" && result.id) {\n                    successIndicator = \"\\n\\n[✅ Event successfully added]\";\n                } else if (functionName === \"updateCalendarEvent\" && result.id) {\n                    successIndicator = \"\\n\\n[✅ Event successfully updated]\";\n                }\n                // Add success indicator to the response if applicable\n                return {\n                    status: \"fulfilled\",\n                    value: {\n                        role: \"tool\",\n                        content: toolResponseContent + successIndicator,\n                        tool_call_id: toolCallId\n                    }\n                };\n            } catch (error) {\n                console.error(`ERROR processing tool call ${toolCallId} (${functionName || \"?\"}):`, error);\n                toolResponseContent = `Error processing tool ${functionName || \"?\"}: ${error.message || error}`;\n                return {\n                    status: \"rejected\",\n                    reason: error,\n                    value: {\n                        role: \"tool\",\n                        content: toolResponseContent,\n                        tool_call_id: toolCallId\n                    }\n                };\n            }\n        });\n        const settledToolResults = await Promise.allSettled(toolPromises);\n        const toolResponses = settledToolResults.map((settledResult)=>{\n            if (settledResult.status === \"fulfilled\") {\n                return settledResult.value.value;\n            } else {\n                return settledResult.reason.value;\n            }\n        }).filter(Boolean);\n        // Add tool responses to history\n        messages.push(...toolResponses);\n        // Store tool responses in DB (best effort, loop through results)\n        if (conversationId) {\n            try {\n                // Use Promise.all to store all tool responses in parallel\n                await Promise.all(toolResponses.map((toolMsg)=>(0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.addMessageToConversation)(conversationId, \"tool\", toolMsg.content, {\n                        tool_call_id: toolMsg.tool_call_id\n                    }).catch((dbError)=>{\n                        console.error(`DB Error storing tool response ${toolMsg.tool_call_id}:`, dbError);\n                        // Don't throw, allow other messages to be stored\n                        return null;\n                    })));\n                console.log(`Stored ${toolResponses.length} tool responses in database`);\n            } catch (batchError) {\n                console.error(`Error in batch storing tool responses:`, batchError);\n            // Individual errors are already caught in the map function\n            // This catch is for errors outside the individual promises\n            }\n        }\n        return toolResponses;\n    } catch (error) {\n        console.error(\"FATAL Error in runConversation pipeline:\", error);\n        // Log history specifically for 400 errors to help debug sequence issues\n        if (error.status === 400) {\n            console.error(\"Message history at time of 400 error:\", JSON.stringify(messages, null, 2));\n        }\n        responseCallback?.({\n            type: \"error\",\n            content: `An error occurred: ${error.message || \"Check server logs.\"}`\n        });\n        throw error; // Re-throw\n    }\n}\nasync function runConversation(messages, userInput, conversationId = null, userId = \"default\", accessToken = null, responseCallback1 = null) {\n    console.log(`Running conversation ${conversationId} for user ${userId}. AccessToken: ${!!accessToken}`);\n    const model = \"gpt-4o\"; // Use a capable model for reasoning\n    const maxToolIterations = 5; // Limit sequential tool calls to prevent infinite loops\n    try {\n        let currentMessages = [\n            ...messages\n        ]; // Use a mutable copy for this turn\n        let iteration = 0;\n        let finalContent = null; // Stores the final text response for the user\n        // Helper to filter messages (Keep existing filterMessagesForAPI)\n        const filterMessagesForAPI = (msgs)=>{\n            // ... (keep existing implementation) ...\n            if (!msgs || !Array.isArray(msgs)) {\n                console.error(\"Invalid messages array passed to filter:\", msgs);\n                return []; // Return empty array to prevent further errors\n            }\n            // Create a copy to avoid modifying the original\n            const filteredMsgs = [\n                ...msgs\n            ];\n            // Track tool call IDs from assistant messages\n            const validToolCallIds = new Set();\n            // First pass: collect all valid tool call IDs from assistant messages\n            filteredMsgs.forEach((msg)=>{\n                if (msg.role === \"assistant\" && msg.tool_calls && Array.isArray(msg.tool_calls)) {\n                    msg.tool_calls.forEach((toolCall)=>{\n                        if (toolCall.id) {\n                            validToolCallIds.add(toolCall.id);\n                        }\n                    });\n                }\n            });\n            // Second pass: filter out invalid tool messages\n            const result = filteredMsgs.filter((msg, index)=>{\n                // Keep all non-tool messages\n                if (msg.role !== \"tool\") return true;\n                // For tool messages, check if they have a valid tool_call_id\n                if (!msg.tool_call_id) {\n                    console.warn(`Filtering TOOL message with missing tool_call_id at index ${index}`);\n                    return false;\n                }\n                // Check if this tool message has a corresponding tool call from an assistant\n                if (!validToolCallIds.has(msg.tool_call_id)) {\n                    console.warn(`Filtering TOOL message not correctly preceded by assistant tool_call. Index=${index}, ToolCallID=${msg.tool_call_id}`);\n                    return false;\n                }\n                // Also ensure content exists for tool messages\n                if (msg.content == null || msg.content === \"\") {\n                    console.warn(`Filtering TOOL message with missing/empty content. Index=${index}, ToolCallID=${msg.tool_call_id}`);\n                    return false;\n                }\n                return true;\n            });\n            // Final sanity check: Ensure alternating user/assistant/tool sequence where appropriate\n            // Remove consecutive messages of the same role (except 'tool' which follows 'assistant')\n            const finalFiltered = [];\n            for(let i = 0; i < result.length; i++){\n                const currentMsg = result[i];\n                const prevMsg = finalFiltered[finalFiltered.length - 1];\n                if (prevMsg && currentMsg.role === prevMsg.role && currentMsg.role !== \"tool\") {\n                    console.warn(`Filtering consecutive message of role ${currentMsg.role} at index ${i}`);\n                    continue; // Skip adding the consecutive message\n                }\n                // Ensure tool message follows an assistant message (loosely, filter handles specific ID matching)\n                // if (currentMsg.role === 'tool' && (!prevMsg || prevMsg.role !== 'assistant')) {\n                //     console.warn(`Filtering TOOL message not following an assistant message at index ${i}`);\n                //     continue; // Skip adding the out-of-place tool message\n                // }\n                finalFiltered.push(currentMsg);\n            }\n            console.log(`Filtered ${msgs.length - finalFiltered.length} invalid/malformed messages`);\n            return finalFiltered;\n        };\n        // --- Main Reasoning Loop ---\n        while(iteration < maxToolIterations){\n            iteration++;\n            console.log(`\\n--- Conversation Turn ${iteration}/${maxToolIterations} ---`);\n            const messagesForAPI = filterMessagesForAPI(currentMessages);\n            if (messagesForAPI.length === 0) {\n                console.error(\"Message history became empty during filtering.\");\n                throw new Error(\"Internal error: Cannot proceed with empty message history.\");\n            }\n            // ***** DEBUG LOG *****\n            console.log(`Making API call #${iteration} with model: ${model}`);\n            console.log(`Message History (Length: ${messagesForAPI.length}):`);\n            messagesForAPI.forEach((msg, index)=>{\n                console.log(`  [${index}] Role: ${msg.role}`);\n                if (msg.content) console.log(`      Content: ${String(msg.content).substring(0, 100)}...`); // Truncate, ensure string\n                if (msg.tool_calls) console.log(`      Tool Calls: ${JSON.stringify(msg.tool_calls.map((tc)=>tc.id + \":\" + tc.function?.name))}`);\n                if (msg.tool_call_id) console.log(`      Tool Call ID: ${msg.tool_call_id}`);\n            });\n            console.log(`--- End API Call #${iteration} History --- \\n`);\n            // ***** END DEBUG LOG *****\n            // --- Call OpenAI ---\n            const response = await openai.chat.completions.create({\n                model: model,\n                messages: messagesForAPI,\n                tools: _tools_toolIndex_js__WEBPACK_IMPORTED_MODULE_7__.tools,\n                tool_choice: \"auto\"\n            });\n            const responseMessage = response.choices[0].message;\n            // --- Add Assistant Message to History (Local & DB) ---\n            currentMessages.push(responseMessage);\n            if (conversationId) {\n                try {\n                    await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.addMessageToConversation)(conversationId, \"assistant\", responseMessage.content || null, {\n                        tool_calls: responseMessage.tool_calls || null\n                    } // Always pass an object, even if tool_calls is null\n                    );\n                } catch (dbError) {\n                    console.error(`DB Error storing assistant message (iteration ${iteration}):`, dbError);\n                // Continue even if DB store fails for this message\n                }\n            }\n            // --- Check for Tool Calls ---\n            const assistantToolCalls = responseMessage.tool_calls;\n            if (assistantToolCalls && assistantToolCalls.length > 0) {\n                console.log(`Assistant requested ${assistantToolCalls.length} tool call(s) in iteration ${iteration}:`, JSON.stringify(assistantToolCalls.map((tc)=>({\n                        id: tc.id,\n                        name: tc.function?.name\n                    }))));\n                // Inform client we're processing (if streaming)\n                responseCallback1?.({\n                    type: \"processing\",\n                    content: `Thinking (step ${iteration})...`\n                });\n                await new Promise((resolve)=>setTimeout(resolve, 200)); // Small delay for UI update\n                // --- Process the requested tools ---\n                // processToolCalls adds the tool responses to currentMessages and stores them in DB\n                const toolResponses = await processToolCalls(assistantToolCalls, currentMessages, conversationId, userId, accessToken);\n                // Check if any tool call failed critically, maybe stop early? (Optional enhancement)\n                const hasCriticalFailure = toolResponses.some((tr)=>tr.content?.includes(\"(Status: FAILED)\"));\n                if (hasCriticalFailure) {\n                    console.warn(`Critical tool failure detected in iteration ${iteration}. LLM will be informed.`);\n                // Let the loop continue, LLM should see the failure message\n                }\n            // --- Loop continues: Send tool results back to LLM ---\n            } else {\n                // --- No Tool Calls: This is the final response ---\n                console.log(`No tool calls requested in iteration ${iteration}. Final response generated.`);\n                finalContent = responseMessage.content ?? \"\"; // Use nullish coalescing for safety\n                break; // Exit the loop\n            }\n        } // End of while loop\n        // --- Handle loop exit ---\n        if (iteration >= maxToolIterations) {\n            console.warn(`Maximum tool iterations (${maxToolIterations}) reached. Returning last generated content or error.`);\n            // Attempt to return the last content generated, even if it wasn't intended as final\n            const lastAssistantMsg = currentMessages[currentMessages.length - 1];\n            if (lastAssistantMsg?.role === \"assistant\" && lastAssistantMsg.content) {\n                finalContent = lastAssistantMsg.content;\n            } else {\n                finalContent = \"I seem to be stuck in a loop trying to process that request. Could you try rephrasing it?\";\n                responseCallback1?.({\n                    type: \"error\",\n                    content: finalContent\n                });\n            }\n        }\n        if (finalContent === null) {\n            console.error(\"Loop finished without generating final content.\");\n            finalContent = \"Sorry, I wasn't able to generate a final response after processing your request.\";\n            responseCallback1?.({\n                type: \"error\",\n                content: finalContent\n            });\n        }\n        // --- Stream the FINAL response ---\n        if (responseCallback1 && finalContent) {\n            // Send the final content chunk by chunk if desired, or as one piece\n            // Simplified: Send as one piece after the loop\n            responseCallback1({\n                type: \"content\",\n                content: finalContent\n            });\n            await new Promise((resolve)=>setTimeout(resolve, 50)); // Short delay before end\n            responseCallback1({\n                type: \"end\"\n            });\n        } else if (!responseCallback1 && finalContent) {\n            // Non-streaming mode: return the final content\n            return finalContent;\n        } else if (!finalContent) {\n            // Ensure something is returned/sent even if content is empty/null\n            if (responseCallback1) {\n                responseCallback1({\n                    type: \"content\",\n                    content: \"\"\n                }); // Send empty content\n                responseCallback1({\n                    type: \"end\"\n                });\n            }\n            return \"\";\n        }\n        console.log(\"Final response content:\", finalContent);\n        // The function implicitly returns finalContent if not streaming, or handles streaming via callback\n        return finalContent; // Return for non-streaming case\n    } catch (error) {\n        console.error(\"FATAL Error in runConversation pipeline:\", error);\n        if (error.status === 400) {\n            console.error(\"Message history at time of 400 error:\", JSON.stringify(messages, null, 2)); // Log initial history state\n        }\n        // Ensure error is propagated to the client\n        const errorMessage = `An error occurred: ${error.message || \"Check server logs.\"}`;\n        responseCallback1?.({\n            type: \"error\",\n            content: errorMessage\n        });\n        // Throw or return error string based on expected caller behavior\n        // throw error; // Re-throwing might be better for chat() function to catch\n        return errorMessage; // Or return error string for non-streaming\n    }\n}\n// --- Helper function to format user preferences ---\nfunction formatUserPreferences(preferencesData) {\n    // Handle the case where preferencesData might be a Sequelize model instance\n    // or might have a dataValues property\n    let actualPrefsData = preferencesData;\n    // If it's a Sequelize model instance with dataValues\n    if (preferencesData && typeof preferencesData === \"object\" && preferencesData.dataValues) {\n        actualPrefsData = preferencesData.dataValues;\n        console.log(\"DEBUG: Using dataValues from preferencesData object\");\n    }\n    // Log the actual data we're working with\n    console.log(\"DEBUG: Actual preferences data to format:\", JSON.stringify(actualPrefsData));\n    // Check if we have valid data to format\n    if (!preferencesData || Object.keys(preferencesData).length === 0) {\n        console.log(\"DEBUG: formatUserPreferences called with empty or undefined preferencesData:\", JSON.stringify(preferencesData));\n        return \"\";\n    }\n    try {\n        // Format preferences as a clear, human-readable string\n        let prefsString = \"\\n\\nUser Preferences Context (Consider when relevant):\\n\";\n        prefsString += JSON.stringify(actualPrefsData, null, 2);\n        console.log(\"DEBUG: Formatted preferences string:\", prefsString);\n        return prefsString;\n    } catch (error) {\n        console.error(\"Error formatting user preferences:\", error);\n        return \"\"; // Return empty string on error\n    }\n}\n// --- Main Chat Entry Point ---\nasync function chat(userInput, userId = \"default\", accessToken = null, streamCallback = null, startNewConversation = false) {\n    console.log(`Chat request: User=${userId}, Input=\"${userInput}\", StartNew=${startNewConversation}`); // Log the flag\n    if (!userId || userId === \"default\") {\n        streamCallback?.({\n            type: \"error\",\n            content: \"User ID missing.\"\n        });\n        return \"Error: User ID required.\";\n    }\n    if (!userInput?.trim()) {\n        streamCallback?.({\n            type: \"info\",\n            content: \"Enter a message.\"\n        });\n        return \"\";\n    }\n    // Send 'start' signal immediately for streaming\n    streamCallback?.({\n        type: \"start\"\n    });\n    try {\n        const tokens = accessToken ? {\n            access_token: accessToken\n        } : null;\n        let user;\n        let conversation;\n        let historyMessages = []; // Formatted history for OpenAI API\n        // --- Load User & Conversation History ---\n        if (!startNewConversation) {\n            try {\n                // **FIX:** Use the optimized query\n                user = await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.getUserWithLatestConversation)(userId);\n                if (user?.Conversations?.length > 0) {\n                    conversation = user.Conversations[0];\n                    console.log(`Found active conversation ${conversation.conversation_id}`);\n                    if (conversation.ConversationMessages?.length > 0) {\n                        // Sort ASCENDING for API\n                        conversation.ConversationMessages.sort((a, b)=>a.sequence_number - b.sequence_number);\n                        // **CRITICAL FIX: Robust History Mapping**\n                        historyMessages = conversation.ConversationMessages.map((msg, index, allMsgs)=>{\n                            const messageObject = {\n                                role: msg.role\n                            };\n                            // Content: Mandatory unless assistant w/ tool calls\n                            if (msg.content != null) {\n                                messageObject.content = msg.content;\n                            } else if (msg.role === \"assistant\" && msg.tool_calls) {\n                                // Check if tool_calls field actually contains valid calls\n                                let validToolCallsExist = false;\n                                if (msg.tool_calls.tool_calls && Array.isArray(msg.tool_calls.tool_calls) && msg.tool_calls.tool_calls.length > 0) {\n                                    validToolCallsExist = msg.tool_calls.tool_calls.some((tc)=>tc.id && tc.function?.name);\n                                } else if (Array.isArray(msg.tool_calls) && msg.tool_calls.length > 0) {\n                                    validToolCallsExist = msg.tool_calls.some((tc)=>tc.id && tc.function?.name);\n                                }\n                                if (validToolCallsExist) {\n                                    messageObject.content = null; // API expects null/\"\" if only tool_calls\n                                } else {\n                                    messageObject.content = \"\"; // Treat as empty content if tool_calls invalid/empty\n                                }\n                            } else {\n                                messageObject.content = \"\"; // Default empty string\n                            }\n                            // Tool Calls (Assistant): Extract the array\n                            if (msg.role === \"assistant\" && msg.tool_calls) {\n                                let toolCallsArray = null;\n                                // Case 1: Stored as { tool_calls: [...] }\n                                if (msg.tool_calls.tool_calls && Array.isArray(msg.tool_calls.tool_calls)) {\n                                    toolCallsArray = msg.tool_calls.tool_calls;\n                                // Case 2: Stored as [...] (fallback)\n                                } else if (Array.isArray(msg.tool_calls)) {\n                                    toolCallsArray = msg.tool_calls;\n                                }\n                                // Add ONLY if valid and non-empty\n                                if (toolCallsArray && toolCallsArray.length > 0) {\n                                    const validToolCalls = toolCallsArray.filter((tc)=>tc.id && tc.type === \"function\" && tc.function?.name);\n                                    if (validToolCalls.length > 0) {\n                                        messageObject.tool_calls = validToolCalls;\n                                        // Re-ensure content is null if ONLY tool calls\n                                        if (messageObject.content === \"\" && validToolCalls.length === toolCallsArray.length) {\n                                            messageObject.content = null;\n                                        }\n                                    } else {\n                                        console.warn(`DB message ${msg.message_id} had tool_calls object but no valid calls.`);\n                                    // Don't add empty/invalid tool_calls array to API message\n                                    }\n                                }\n                            }\n                            // Tool Call ID (Tool): Extract the ID string\n                            if (msg.role === \"tool\") {\n                                let toolId = null;\n                                // Case 1: Stored as { tool_call_id: \"...\" }\n                                if (typeof msg.tool_call_id === \"object\" && msg.tool_call_id !== null && msg.tool_call_id.tool_call_id) {\n                                    toolId = msg.tool_call_id.tool_call_id;\n                                // Case 2: Stored as \"...\" (fallback)\n                                } else if (typeof msg.tool_call_id === \"string\") {\n                                    toolId = msg.tool_call_id;\n                                }\n                                // Tool message MUST have ID and content to be valid for API\n                                if (toolId && messageObject.content != null) {\n                                    messageObject.tool_call_id = toolId;\n                                } else {\n                                    console.warn(`Filtering invalid TOOL message (missing ID or content): DB_ID=${msg.message_id}`);\n                                    return null; // Filter out invalid tool message\n                                }\n                            }\n                            // API Validation Check: tool role must follow assistant role with tool_calls\n                            // **REMOVED STRICT PRECEDING CHECK** - Relying on filterMessagesForAPI inside runConversation\n                            // if (messageObject.role === 'tool') {\n                            //     const prevMappedMessage = index > 0 ? historyMessages[index - 1] : null; // Check the *mapped* previous message\n                            //     if (!prevMappedMessage || prevMappedMessage.role !== 'assistant' || !prevMappedMessage.tool_calls || !prevMappedMessage.tool_calls.some(tc => tc.id === messageObject.tool_call_id)) {\n                            //          console.warn(`Filtering TOOL message not correctly preceded by assistant tool_call. DB_ID=${msg.message_id}, ToolCallID=${messageObject.tool_call_id}`);\n                            //          return null; // Filter out orphaned/mismatched tool message\n                            //     }\n                            // }\n                            // Filter out assistant messages that end up empty (no content, no valid tool calls)\n                            if (messageObject.role === \"assistant\" && messageObject.content == null && !messageObject.tool_calls) {\n                                console.warn(`Filtering empty ASSISTANT message. DB_ID=${msg.message_id}`);\n                                return null;\n                            }\n                            return messageObject;\n                        }).filter(Boolean); // Remove nulls from filtering\n                        console.log(`Loaded and mapped ${historyMessages.length} valid messages from history.`);\n                    // DEBUG: Log the final history being sent, ONLY FOR DEBUGGING SENSITIVE DATA\n                    // console.log(\"Final history for API:\", JSON.stringify(historyMessages, null, 2));\n                    } else {\n                        console.log(`Conversation ${conversation.conversation_id} has no messages.`);\n                    }\n                } else {\n                    console.log(`No existing user/conversation found for ${userId}. Creating.`);\n                    if (!user) {\n                        const isEmail = userId.includes(\"@\");\n                        const email = isEmail ? userId : `${userId}@example.com`;\n                        const provider = isEmail ? \"email\" : \"system\"; // Adjust as needed\n                        user = await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.getOrCreateUser)(email, provider, userId, userId);\n                    }\n                }\n            } catch (error) {\n                console.error(\"CRITICAL: Error loading user/history:\", error);\n                try {\n                    const isEmail = userId.includes(\"@\");\n                    const email = isEmail ? userId : `${userId}@example.com`;\n                    user = await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.getOrCreateUser)(email, isEmail ? \"email\" : \"system\", userId, userId);\n                } catch (userError) {\n                    console.error(\"CRITICAL: Failed user recovery:\", userError);\n                    streamCallback?.({\n                        type: \"error\",\n                        content: \"Failed to load user profile.\"\n                    });\n                    return \"Error: Could not load user profile.\";\n                }\n                conversation = null;\n                historyMessages = []; // Reset state\n            }\n        } else {\n            console.log(\"Starting a new conversation as requested.\");\n            // Ensure user object is loaded, even if history loading was skipped\n            console.log(\"DEBUG: startNewConversation=true, user object before loading:\", user ? `User exists: ${user.user_id}` : \"User is null\");\n            if (!user) {\n                try {\n                    const isEmail = userId.includes(\"@\");\n                    const email = isEmail ? userId : `${userId}@example.com`;\n                    console.log(`DEBUG: About to call getOrCreateUser with email=${email}`);\n                    user = await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.getOrCreateUser)(email, isEmail ? \"email\" : \"system\", userId, userId);\n                    console.log(\"DEBUG: After getOrCreateUser call, user object:\", JSON.stringify({\n                        user_id: user.user_id,\n                        email: user.email,\n                        hasUserPreference: !!user.UserPreference,\n                        userPreferenceKeys: user.UserPreference ? Object.keys(user.UserPreference) : null,\n                        preferencesDataKeys: user.UserPreference?.preferences_data ? Object.keys(user.UserPreference.preferences_data) : null\n                    }));\n                } catch (userError) {\n                    console.error(\"CRITICAL: Failed user creation/retrieval when starting new conversation:\", userError);\n                    streamCallback?.({\n                        type: \"error\",\n                        content: \"Failed to load user profile for new chat.\"\n                    });\n                    return \"Error: Could not load user profile.\";\n                }\n            }\n            // Explicitly clear conversation and history\n            conversation = null;\n            historyMessages = [];\n        }\n        // --- Create Conversation if needed & Add System Prompt ---\n        if (!conversation) {\n            try {\n                conversation = await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.createConversation)(user.user_id);\n                console.log(`Created new conversation ${conversation.conversation_id}. Preparing system prompt.`);\n                // Get base system prompt\n                let systemPromptContent = (0,_data_prompts_js__WEBPACK_IMPORTED_MODULE_4__.getAthenaSystemPrompt)();\n                // Debug log the user object structure\n                console.log(\"DEBUG: User object structure when creating new conversation:\", JSON.stringify({\n                    user_id: user.user_id,\n                    email: user.email,\n                    hasUserPreference: !!user.UserPreference,\n                    userPreferenceDataValues: user.UserPreference ? !!user.UserPreference.dataValues : null,\n                    preferencesDataRaw: user.UserPreference ? user.UserPreference.preferences_data : null,\n                    preferencesDataFromDataValues: user.UserPreference ? user.UserPreference.dataValues?.preferences_data : null\n                }));\n                // Format and append user preferences if they exist\n                // Access preferences_data from dataValues if direct access fails\n                const preferencesData = user.UserPreference?.preferences_data || (user.UserPreference?.dataValues ? user.UserPreference.dataValues.preferences_data : null) || {};\n                // Log the raw UserPreference object to help diagnose issues\n                console.log(\"DEBUG: Raw UserPreference object:\", user.UserPreference ? JSON.stringify(user.UserPreference).substring(0, 200) + \"...\" : \"null\");\n                const prefsString = formatUserPreferences(preferencesData);\n                systemPromptContent += prefsString;\n                // Log the final system prompt\n                console.log(\"DEBUG: Final system prompt for new conversation:\", systemPromptContent.substring(0, 200) + \"... [truncated]\");\n                console.log(\"DEBUG: Does new conversation system prompt contain preferences?\", systemPromptContent.includes(\"User Preferences Context\"));\n                // Store the base system prompt in DB first\n                await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.addMessageToConversation)(conversation.conversation_id, \"system\", systemPromptContent);\n                // Add the potentially combined system prompt to the START of the local history array\n                historyMessages.unshift({\n                    role: \"system\",\n                    content: systemPromptContent\n                });\n            } catch (createError) {\n                console.error(\"CRITICAL: Failed to create conversation:\", createError);\n                streamCallback?.({\n                    type: \"error\",\n                    content: \"Failed to start chat session.\"\n                });\n                return \"Error: Could not start chat session.\";\n            }\n        }\n        // --- Prepare messages for API ---\n        // Create a copy of history messages\n        let currentMessages = [\n            ...historyMessages\n        ];\n        // Dynamically inject user preferences into system prompt for every API call\n        if (currentMessages.length > 0 && currentMessages[0].role === \"system\") {\n            // Get the base system prompt content\n            let baseSystemPrompt = (0,_data_prompts_js__WEBPACK_IMPORTED_MODULE_4__.getAthenaSystemPrompt)();\n            // Debug log the user object structure\n            console.log(\"DEBUG: User object structure before API call:\", JSON.stringify({\n                user_id: user.user_id,\n                email: user.email,\n                hasUserPreference: !!user.UserPreference,\n                userPreferenceDataValues: user.UserPreference ? !!user.UserPreference.dataValues : null,\n                preferencesDataRaw: user.UserPreference ? user.UserPreference.preferences_data : null,\n                preferencesDataFromDataValues: user.UserPreference ? user.UserPreference.dataValues?.preferences_data : null\n            }));\n            // Format and append user preferences if they exist\n            // Access preferences_data from dataValues if direct access fails\n            const preferencesData = user.UserPreference?.preferences_data || (user.UserPreference?.dataValues ? user.UserPreference.dataValues.preferences_data : null) || {};\n            // Log the raw UserPreference object to help diagnose issues\n            console.log(\"DEBUG: Raw UserPreference object:\", user.UserPreference ? JSON.stringify(user.UserPreference).substring(0, 200) + \"...\" : \"null\");\n            const prefsString = formatUserPreferences(preferencesData);\n            // Create the combined system prompt\n            const combinedPromptContent = baseSystemPrompt + prefsString;\n            // Log the final system prompt\n            console.log(\"DEBUG: Final system prompt:\", combinedPromptContent.substring(0, 200) + \"... [truncated]\");\n            console.log(\"DEBUG: Does system prompt contain preferences?\", combinedPromptContent.includes(\"User Preferences Context\"));\n            // Replace the existing system message with the updated one\n            currentMessages[0] = {\n                role: \"system\",\n                content: combinedPromptContent\n            };\n            console.log(\"Dynamically injected user preferences into system prompt for this API call.\");\n        }\n        // Add current user input\n        const userMessageForAPI = {\n            role: \"user\",\n            content: userInput\n        };\n        currentMessages.push(userMessageForAPI);\n        // Store user message in DB reliably\n        try {\n            await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.addMessageToConversation)(conversation.conversation_id, \"user\", userInput);\n        } catch (dbError) {\n            console.error(\"Error storing user message:\", dbError);\n        // Non-critical? Log and continue.\n        }\n        // --- Run the conversation logic ---\n        const response = await runConversation(currentMessages, userInput, conversation.conversation_id, user.user_id, accessToken, streamCallback);\n        // If not streaming, return the response.\n        // If streaming, runConversation handles sending via callback, so we might just return void or true/false\n        if (!streamCallback) {\n            return response; // Final text response for non-streaming\n        } else {\n            // Streaming handled by runConversation's callbacks\n            // Ensure 'end' was sent if an error occurred within runConversation before completion\n            // (runConversation should ideally handle sending 'end' or 'error' in most cases)\n            return; // Indicate success or simply complete for streaming\n        }\n    } catch (error) {\n        console.error(\"Error in main chat function:\", error);\n        const errorMessage = `An unexpected error occurred: ${error.message || \"Please try again.\"}`;\n        // Ensure 'end' or 'error' is sent in case of top-level failure\n        streamCallback?.({\n            type: \"error\",\n            content: errorMessage\n        });\n        streamCallback?.({\n            type: \"end\"\n        }); // Send end signal after error in streaming mode\n        return errorMessage; // Return error string for non-streaming\n    }\n}\n// --- Exports ---\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TTtZQUFTUyxTQUFTd0Q7UUFBYTtRQUN4RFEsaUJBQWlCO1lBQUV6RSxNQUFNO1FBQU0sSUFBSSxnREFBZ0Q7UUFDbkYsT0FBT2lFLGNBQWMsd0NBQXdDO0lBQy9EO0FBQ0Y7QUFHQSxrQkFBa0I7QUFNaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nY2FsZW5kYXJhcHAvLi9saWIvY2hhdGJvdC5qcz82NzA3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYi9jaGF0Ym90LmpzXG4vLyAtLS0gSU1QT1JUUyAtLS1cbmltcG9ydCBPcGVuQUkgZnJvbSAnb3BlbmFpJztcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnbHV4b24nO1xuaW1wb3J0IE5vZGVDYWNoZSBmcm9tICdub2RlLWNhY2hlJztcbmltcG9ydCAnZG90ZW52L2NvbmZpZyc7XG5cbi8vIExvY2FsIE1vZHVsZXNcbi8vIEltcG9ydCBzeXN0ZW0gcHJvbXB0XG5pbXBvcnQgeyBnZXRBdGhlbmFTeXN0ZW1Qcm9tcHQgfSBmcm9tICcuL2RhdGEvcHJvbXB0cy5qcyc7XG5pbXBvcnQgeyBmaW5kQXZhaWxhYmxlU2xvdHMgYXMgZmluZEF2YWlsYWJsZVNsb3RzVXRpbCwgZm9ybWF0QXZhaWxhYmxlU2xvdHMgfSBmcm9tICcuL3Rvb2xzL3NjaGVkdWxpbmdVdGlscy5qcyc7XG5pbXBvcnQgeyBsaXN0VG9kYXlzRXZlbnRzLCBzdWdnZXN0RXZlbnRUaW1lIH0gZnJvbSAnLi90b29scy9ldmVudEhlbHBlcnMuanMnO1xuaW1wb3J0IHsgdG9vbHMsIHRvb2xGdW5jdGlvbnMgfSBmcm9tICcuL3Rvb2xzL3Rvb2xJbmRleC5qcyc7XG5pbXBvcnQge1xuICBnZXRPckNyZWF0ZVVzZXIsXG4gIGNyZWF0ZUNvbnZlcnNhdGlvbixcbiAgLy8gZ2V0Q29udmVyc2F0aW9uLCAvLyBMZXNzIGxpa2VseSBuZWVkZWQgZGlyZWN0bHkgaWYgdXNpbmcgZ2V0VXNlcldpdGhMYXRlc3RDb252ZXJzYXRpb25cbiAgLy8gZ2V0Q29udmVyc2F0aW9uTWVzc2FnZXMsIC8vIExlc3MgbGlrZWx5IG5lZWRlZCBkaXJlY3RseVxuICBDb252ZXJzYXRpb25NZXNzYWdlLCAvLyBOZWVkZWQgZm9yIHR5cGUgaGludHMvY2hlY2tzIGlmIGFueVxuICBhZGRNZXNzYWdlVG9Db252ZXJzYXRpb24sXG4gIGluaXRpYWxpemVEYXRhYmFzZSxcbiAgZ2V0Q29udmVyc2F0aW9uc0J5VXNlcklkLFxuICBnZXRVc2VyV2l0aExhdGVzdENvbnZlcnNhdGlvbixcbiAgVXNlclByZWZlcmVuY2UgLy8gSW1wb3J0IFVzZXJQcmVmZXJlbmNlIG1vZGVsIGZvciB0b29sIGZ1bmN0aW9uIHVzYWdlXG59IGZyb20gJy4vcG9zdGdyZXNDbGllbnQuanMnO1xuXG4vLyBXZWF0aGVyIGNsaWVudCBmdW5jdGlvbiAoaWYgdXNlZClcbi8vIGltcG9ydCB7IGdldFdlYXRoZXJEYXRhIH0gZnJvbSAnLi93ZWF0aGVyQ2xpZW50LmpzJzsgLy8gRXhhbXBsZSBwYXRoXG5cbi8vIEdvb2dsZSBBUElzIGxpYnJhcnkgKG5lZWRlZCBmb3IgZGlyZWN0IGNhbGxzIGluIHRvb2wgZnVuY3Rpb25zIGxpa2UgZGVsZXRlL3VwZGF0ZSlcbi8vICoqRklYOioqIFVzZSBpbXBvcnQgaW5zdGVhZCBvZiByZXF1aXJlIGZvciBjb25zaXN0ZW5jeSBpZiBwb3NzaWJsZSAoZGVwZW5kcyBvbiBwcm9qZWN0IHNldHVwKVxuLy8gSWYgdXNpbmcgRVMgbW9kdWxlczogaW1wb3J0IHsgZ29vZ2xlIH0gZnJvbSAnZ29vZ2xlYXBpcyc7XG4vLyBJZiByZXF1aXJlIGlzIG5lY2Vzc2FyeTpcbmNvbnN0IHsgZ29vZ2xlIH0gPSByZXF1aXJlKCdnb29nbGVhcGlzJyk7IC8vIEtlZXAgcmVxdWlyZSBpZiBuZWNlc3NhcnkgZm9yIGdvb2dsZWFwaXNcblxuLy8gLS0tIERhdGFiYXNlIEluaXRpYWxpemF0aW9uIC0tLVxuLy8gKEtlZXAgdGhlIGdldERhdGFiYXNlSW5pdFByb21pc2UgZnVuY3Rpb24gYXMgaXMpXG5sZXQgZGJJbml0UHJvbWlzZSA9IG51bGw7XG5cbi8vIEluaXRpYWxpemUgT3BlbkFJIGNsaWVudFxuY29uc3Qgb3BlbmFpID0gbmV3IE9wZW5BSSh7IGFwaUtleTogcHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVkgfSk7XG5cblxuXG4vLyAtLS0gSGVscGVyIEZ1bmN0aW9ucyAoRm9ybWF0dGluZyAmIFRpbWUpIC0tLVxuZnVuY3Rpb24gZm9ybWF0RXZlbnRUaW1lKGV2ZW50VGltZSkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGR0ID0gRGF0ZVRpbWUuZnJvbUlTTyhldmVudFRpbWUpO1xuICAgICAgICBpZiAoZHQuaXNWYWxpZCkge1xuICAgICAgICAgICAgcmV0dXJuIGR0LnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVUSU1FX0ZVTEwpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGVPbmx5ID0gRGF0ZVRpbWUuZnJvbUlTTyhldmVudFRpbWUsIHsgem9uZTogJ3V0YycgfSk7XG4gICAgICAgIGlmIChkYXRlT25seS5pc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZU9ubHkudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuREFURV9GVUxMKSArIFwiIChBbGwgZGF5KVwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudFRpbWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJFcnJvciBmb3JtYXR0aW5nIGV2ZW50IHRpbWU6XCIsIGV2ZW50VGltZSwgZSk7XG4gICAgICAgIHJldHVybiBTdHJpbmcoZXZlbnRUaW1lKTsgLy8gRW5zdXJlIHJldHVybnMgc3RyaW5nXG4gICAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRDYWxlbmRhckV2ZW50cyhldmVudHMpIHtcbiAgICBpZiAoIWV2ZW50cykgcmV0dXJuIFwiTm8gZXZlbnRzIGZvdW5kIG9yIGFuIGVycm9yIG9jY3VycmVkLlwiO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShldmVudHMpKSByZXR1cm4gXCJBbiBlcnJvciBvY2N1cnJlZCBwcm9jZXNzaW5nIGV2ZW50cy5cIjtcbiAgICBpZiAoZXZlbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFwiTm8gZXZlbnRzIGZvdW5kIGZvciB0aGUgc3BlY2lmaWVkIHRpbWUgcGVyaW9kLlwiO1xuXG4gICAgcmV0dXJuIGV2ZW50cy5tYXAoZXZlbnQgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlVGltZS5mcm9tSVNPKGV2ZW50LnN0YXJ0Py5kYXRlVGltZSB8fCBldmVudC5zdGFydD8uZGF0ZSk7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSBEYXRlVGltZS5mcm9tSVNPKGV2ZW50LmVuZD8uZGF0ZVRpbWUgfHwgZXZlbnQuZW5kPy5kYXRlKTtcbiAgICAgICAgICAgIGlmICghc3RhcnQuaXNWYWxpZCB8fCAhZW5kLmlzVmFsaWQpIHJldHVybiBg4p2TIEludmFsaWQgZGF0ZSBmb3VuZCBmb3IgZXZlbnQ6ICR7ZXZlbnQuc3VtbWFyeSB8fCBldmVudC5pZH1gO1xuXG4gICAgICAgICAgICBjb25zdCBpc0FsbERheSA9ICFldmVudC5zdGFydD8uZGF0ZVRpbWU7XG4gICAgICAgICAgICAvLyBJbmNsdWRlIHRoZSBldmVudCBJRCBpbiB0aGUgZm9ybWF0dGVkIG91dHB1dCAoaGlkZGVuIHdpdGggYSB6ZXJvLXdpZHRoIHNwYWNlIGZvciByZWZlcmVuY2UpXG4gICAgICAgICAgICBsZXQgZm9ybWF0dGVkRXZlbnQgPSBg8J+ThSAke2V2ZW50LnN1bW1hcnkgfHwgJyhObyBUaXRsZSknfSBbSUQ64oCLJHtldmVudC5pZH1dXFxuYDtcbiAgICAgICAgICAgIGZvcm1hdHRlZEV2ZW50ICs9IGAgICDwn5OGICR7c3RhcnQudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuREFURV9GVUxMKX1cXG5gO1xuICAgICAgICAgICAgaWYgKCFpc0FsbERheSkge1xuICAgICAgICAgICAgICAgIGZvcm1hdHRlZEV2ZW50ICs9IGAgICDwn5WSICR7c3RhcnQudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuVElNRV9TSU1QTEUpfSAtICR7ZW5kLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLlRJTUVfU0lNUExFKX1cXG5gO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRFdmVudCArPSBgICAg8J+VkiBBbGwgRGF5XFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChldmVudC5kZXNjcmlwdGlvbikgZm9ybWF0dGVkRXZlbnQgKz0gYCAgIPCfk50gJHtldmVudC5kZXNjcmlwdGlvbn1cXG5gO1xuICAgICAgICAgICAgaWYgKGV2ZW50LmxvY2F0aW9uKSBmb3JtYXR0ZWRFdmVudCArPSBgICAg8J+TjSAke2V2ZW50LmxvY2F0aW9ufVxcbmA7XG4gICAgICAgICAgICBpZiAoZXZlbnQucmVtaW5kZXJzPy51c2VEZWZhdWx0ID09PSBmYWxzZSAmJiBBcnJheS5pc0FycmF5KGV2ZW50LnJlbWluZGVycy5vdmVycmlkZXMpKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkRXZlbnQgKz0gYCAgIPCflJQgUmVtaW5kZXJzOiAke2V2ZW50LnJlbWluZGVycy5vdmVycmlkZXMubWFwKHIgPT4gYCR7ci5taW51dGVzfSBtaW5gKS5qb2luKCcsICcpfVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVkRXZlbnQudHJpbSgpOyAvLyBUcmltIGVhY2ggZXZlbnQgc3RyaW5nXG4gICAgICAgIH0gY2F0Y2ggKG1hcEVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgbWFwcGluZyBldmVudDpcIiwgZXZlbnQsIG1hcEVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBg4p2TIEVycm9yIHByb2Nlc3NpbmcgZXZlbnQ6ICR7ZXZlbnQuc3VtbWFyeSB8fCBldmVudC5pZH1gO1xuICAgICAgICB9XG4gICAgfSkuam9pbignXFxuXFxuJyk7IC8vIEFkZCBzcGFjZSBiZXR3ZWVuIGV2ZW50c1xufVxuXG4vLyAtLS0gRm9ybWF0dGluZyBUb29sIFJlc3BvbnNlcyBmb3IgdGhlIExMTSAtLS1cbmZ1bmN0aW9uIGZvcm1hdFRvb2xSZXNwb25zZShmdW5jdGlvbk5hbWUsIHJlc3VsdCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIEV4cGxpY2l0bHkgaGFuZGxlIG51bGwvdW5kZWZpbmVkIHJlc3VsdHMgZmlyc3RcbiAgICAgICAgaWYgKHJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFRvb2wgJHtmdW5jdGlvbk5hbWV9IHJldHVybmVkIG51bGwgb3IgdW5kZWZpbmVkLmApO1xuICAgICAgICAgICAgcmV0dXJuIGBUb29sICR7ZnVuY3Rpb25OYW1lfSBkaWQgbm90IHJldHVybiBhIHJlc3VsdC4gKFN0YXR1czogRkFJTEVEKWA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUga25vd24gZXJyb3Igc2hhcGVzIHJldHVybmVkIGJ5IHRvb2wgZnVuY3Rpb25zXG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJyAmJiByZXN1bHQudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKCdlcnJvcjonKSlcbiAgICAgICAgICAgIHJldHVybiBgJHtyZXN1bHR9IChTdGF0dXM6IEZBSUxFRClgO1xuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcgJiYgcmVzdWx0LmVycm9yKVxuICAgICAgICAgICAgcmV0dXJuIGBFcnJvciBleGVjdXRpbmcgJHtmdW5jdGlvbk5hbWV9OiAke3Jlc3VsdC5lcnJvcn0gKFN0YXR1czogRkFJTEVEKWA7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0JyAmJiByZXN1bHQuc3VjY2VzcyA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXR1cm4gYFRvb2wgJHtmdW5jdGlvbk5hbWV9IGZhaWxlZDogJHtyZXN1bHQubWVzc2FnZSB8fCAnTm8gZGV0YWlscy4nfSAoU3RhdHVzOiBGQUlMRUQpYDtcblxuICAgICAgICAvLyAtLS0gRm9ybWF0IHN1Y2Nlc3NmdWwgcmVzdWx0cyAtLS1cbiAgICAgICAgc3dpdGNoIChmdW5jdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NhdmVVc2VyUHJlZmVyZW5jZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5zdWNjZXNzID8gYOKchSBQcmVmIHNhdmVkOiAke3Jlc3VsdC5tZXNzYWdlfSAoU3RhdHVzOiBTVUNDRVNTKWAgOiBg4p2MIFByZWYgZmFpbDogJHtyZXN1bHQubWVzc2FnZX0gKFN0YXR1czogRkFJTEVEKWA7XG5cbiAgICAgICAgICAgIGNhc2UgJ2FkZENhbGVuZGFyRXZlbnRzJzpcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0KSkgcmV0dXJuIFwiRXJyb3I6IEludmFsaWQgcmVzcG9uc2UgZm9ybWF0IGZyb20gYWRkQ2FsZW5kYXJFdmVudHMuIChTdGF0dXM6IEZBSUxFRClcIjtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIFwiTm8gZXZlbnRzIHdlcmUgcHJvY2Vzc2VkLiAoU3RhdHVzOiBORVVUUkFMKVwiO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQubWFwKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWl0ZW0pIHJldHVybiAn4p2TIEludmFsaWQgaXRlbSBpbiByZXN1bHQgYXJyYXkuIChTdGF0dXM6IEZBSUxFRCknO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5lcnJvcikgeyAvLyBIYW5kbGUgZXhwbGljaXQgZXJyb3JzIGZpcnN0IChjb25mbGljdCwgdmFsaWRhdGlvbiwgQVBJKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3VtbWFyeSA9IGl0ZW0uc3VtbWFyeSB8fCAnPyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5jb25mbGljdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluY2x1ZGUgc3VnZ2VzdGlvbnMgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3VnZ2VzdGlvblRleHQgPSBpdGVtLnN1Z2dlc3Rpb25zICYmIGl0ZW0uc3VnZ2VzdGlvbnMubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGAgU3VnZ2VzdGVkIHNsb3RzOiAke2l0ZW0uc3VnZ2VzdGlvbnMubWFwKHMgPT4gYCR7RGF0ZVRpbWUuZnJvbUlTTyhzLnN0YXJ0KS50b0Zvcm1hdCgnaDptbWEnKX0gLSAke0RhdGVUaW1lLmZyb21JU08ocy5lbmQpLnRvRm9ybWF0KCdoOm1tYScpfWApLmpvaW4oJywgJyl9YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBg4pqg77iPIENvbmZsaWN0IGRldGVjdGVkIGZvciBldmVudCBcIiR7c3VtbWFyeX1cIi4ke3N1Z2dlc3Rpb25UZXh0fSAoU3RhdHVzOiBDT05GTElDVClgO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYOKdjCBGYWlsZWQgdG8gYWRkIGV2ZW50IFwiJHtzdW1tYXJ5fVwiOiAke2l0ZW0uZXJyb3J9IChTdGF0dXM6IEZBSUxFRClgO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uaWQgJiYgaXRlbS5zdW1tYXJ5ICYmIChpdGVtLnN0YXJ0Py5kYXRlVGltZSB8fCBpdGVtLnN0YXJ0Py5kYXRlKSkgeyAvLyBBc3N1bWUgc3VjY2VzcyBpZiBrZXkgZmllbGRzIGV4aXN0XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0U3RyID0gZm9ybWF0RXZlbnRUaW1lKGl0ZW0uc3RhcnQuZGF0ZVRpbWUgfHwgaXRlbS5zdGFydC5kYXRlKTsgLy8gVXNlIGV4aXN0aW5nIGhlbHBlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBg4pyFIEV2ZW50IGFkZGVkOiBcIiR7aXRlbS5zdW1tYXJ5fVwiIHN0YXJ0aW5nICR7c3RhcnRTdHJ9LiAoSUQ6ICR7aXRlbS5pZH0pIChTdGF0dXM6IFNVQ0NFU1MpYDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZm9ybWF0dGluZyBzdWNjZXNzIG1lc3NhZ2UgZm9yIGFkZGVkIGV2ZW50OlwiLCBpdGVtLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYOKchSBFdmVudCBhZGRlZDogXCIke2l0ZW0uc3VtbWFyeX1cIiAoZGV0YWlscyB1bmF2YWlsYWJsZSkuIChJRDogJHtpdGVtLmlkfSkgKFN0YXR1czogU1VDQ0VTUylgO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBGYWxsYmFjayBmb3IgdW5leHBlY3RlZCBzaGFwZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlVuZXhwZWN0ZWQgaXRlbSBzaGFwZSBpbiBhZGRDYWxlbmRhckV2ZW50cyByZXN1bHQ6XCIsIGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGDinZMgVW5rbm93biBvdXRjb21lIGZvciBhbiBldmVudCBhdHRlbXB0LiAoU3RhdHVzOiBVTktOT1dOKWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcblxuICAgICAgICAgICAgY2FzZSAnZ2V0Q2FsZW5kYXJFdmVudHMnOlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGDwn5eT77iPIEV2ZW50czogJHtyZXN1bHR9IChTdGF0dXM6ICR7cmVzdWx0LnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCgnZXJyb3InKSA/ICdGQUlMRUQnIDogJ1NVQ0NFU1MnfSlgO1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJFcnJvcjogSW52YWxpZCBnZXRDYWxlbmRhckV2ZW50cyByZXNwb25zZS4gKFN0YXR1czogRkFJTEVEKVwiO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICAgICAgID8gXCLwn5eT77iPIE5vIGV2ZW50cyBmb3VuZC4gKFN0YXR1czogU1VDQ0VTUylcIlxuICAgICAgICAgICAgICAgICAgICA6IGDwn5eT77iPIEZvdW5kICR7cmVzdWx0Lmxlbmd0aH0gZXZlbnQocyk6XFxuXFxuJHtmb3JtYXRDYWxlbmRhckV2ZW50cyhyZXN1bHQpfSAoU3RhdHVzOiBTVUNDRVNTKWA7XG5cbiAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZUNhbGVuZGFyRXZlbnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuc3VjY2Vzc1xuICAgICAgICAgICAgICAgICAgICA/IGDwn5eR77iPIEV2ZW50IFwiJHtyZXN1bHQuc3VtbWFyeSB8fCByZXN1bHQuZXZlbnRJZH1cIiBkZWxldGVkLiAoU3RhdHVzOiBTVUNDRVNTKWAgLy8gVXNlIGV2ZW50SWQgaWYgc3VtbWFyeSB3YXNuJ3QgZmV0Y2hlZC9yZXR1cm5lZFxuICAgICAgICAgICAgICAgICAgICA6IGDinYwgRmFpbGVkIHRvIGRlbGV0ZSBldmVudCAke3Jlc3VsdC5ldmVudElkIHx8ICc/J306ICR7cmVzdWx0LmVycm9yIHx8IHJlc3VsdC5tZXNzYWdlIHx8ICc/J30gKFN0YXR1czogRkFJTEVEKWA7XG5cbiAgICAgICAgICAgIGNhc2UgJ3VwZGF0ZUNhbGVuZGFyRXZlbnQnOlxuICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiByZXN1bHQgaGFzIGFuIElELCBpbmRpY2F0aW5nIHN1Y2Nlc3MgZnJvbSBnb29nbGVDYWxlbmRhciB1cGRhdGUgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5pZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYOKcj++4jyBFdmVudCBcIiR7cmVzdWx0LnN1bW1hcnkgfHwgZXZlbnRJZH1cIiB1cGRhdGVkLiAoSUQ6ICR7cmVzdWx0LmlkfSkgKFN0YXR1czogU1VDQ0VTUylgO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBwb3RlbnRpYWwgZXJyb3Igb2JqZWN0cyBwYXNzZWQgYmFja1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1zZyA9IHJlc3VsdD8uZXJyb3IgfHwgcmVzdWx0Py5tZXNzYWdlIHx8IEpTT04uc3RyaW5naWZ5KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBg4p2MIEZhaWxlZCB0byB1cGRhdGUgZXZlbnQ6ICR7ZXJyb3JNc2d9IChTdGF0dXM6IEZBSUxFRClgO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSAnZmluZEF2YWlsYWJsZVNsb3RzJzpcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRXJyb3I6IEludmFsaWQgZmluZEF2YWlsYWJsZVNsb3RzIHJlc3BvbnNlLiAoU3RhdHVzOiBGQUlMRUQpXCI7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBg8J+VkiBObyBhdmFpbGFibGUgc2xvdHMgZm91bmQgbWF0Y2hpbmcgY3JpdGVyaWEuIChTdGF0dXM6IFNVQ0NFU1MpYDtcbiAgICAgICAgICAgICAgICAvLyBGb3JtYXQgc2xvdHMgd2l0aCBzdWNjZXNzIHN0YXR1c1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZFNsb3RzID0gcmVzdWx0Lm1hcChzbG90ID0+XG4gICAgICAgICAgICAgICAgICAgIGAke0RhdGVUaW1lLmZyb21JU08oc2xvdC5zdGFydCkudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuREFURVRJTUVfU0hPUlQpfSAtICR7RGF0ZVRpbWUuZnJvbUlTTyhzbG90LmVuZCkudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuVElNRV9TSU1QTEUpfWBcbiAgICAgICAgICAgICAgICApLmpvaW4oJ1xcbicpO1xuICAgICAgICAgICAgICAgIHJldHVybiBg8J+VkiBGb3VuZCAke3Jlc3VsdC5sZW5ndGh9IGF2YWlsYWJsZSBzbG90KHMpOlxcblxcbiR7Zm9ybWF0dGVkU2xvdHN9XFxuXFxuKFN0YXR1czogU1VDQ0VTUylgO1xuXG4gICAgICAgICAgICBjYXNlICdnZXRXZWF0aGVyRm9yZWNhc3QnOlxuICAgICAgICAgICAgICAgIHJldHVybiBg8J+MpO+4jyBXZWF0aGVyIGZvciAke3Jlc3VsdC5sb2NhdGlvbn0gb24gJHtyZXN1bHQuZGF0ZX06ICR7cmVzdWx0LmZvcmVjYXN0IHx8ICdOL0EnfSAoU3RhdHVzOiAke3Jlc3VsdC5mb3JlY2FzdCAmJiAhcmVzdWx0LmZvcmVjYXN0LmluY2x1ZGVzKCd1bmF2YWlsYWJsZScpID8gJ1NVQ0NFU1MnIDogJ1BBUlRJQUwnfSlgO1xuXG4gICAgICAgICAgICBjYXNlICdkZWxldGVDYWxlbmRhckV2ZW50c0J5UXVlcnknOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuc3VjY2Vzc1xuICAgICAgICAgICAgICAgICAgICA/IGDwn5eR77iPICR7cmVzdWx0Lm1lc3NhZ2V9IChEZWxldGVkIENvdW50OiAke3Jlc3VsdC5kZWxldGVkQ291bnR9KSAoU3RhdHVzOiBTVUNDRVNTKWBcbiAgICAgICAgICAgICAgICAgICAgOiBg4p2MIEZhaWxlZCBidWxrIGRlbGV0ZTogJHtyZXN1bHQubWVzc2FnZSB8fCByZXN1bHQuZXJyb3IgfHwgJz8nfSAoU3RhdHVzOiBGQUlMRUQpYDtcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBTYWZlbHkgc3RyaW5naWZ5IG90aGVyIHJlc3VsdHMgd2l0aCBzdGF0dXMgaW5kaWNhdG9yc1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0JyAmJiByZXN1bHQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gcmVzdWx0LnN1Y2Nlc3MgPT09IHRydWUgPyAnU1VDQ0VTUycgOiAocmVzdWx0LnN1Y2Nlc3MgPT09IGZhbHNlID8gJ0ZBSUxFRCcgOiAnVU5LTk9XTicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7SlNPTi5zdHJpbmdpZnkocmVzdWx0KX0gKFN0YXR1czogJHtzdGF0dXN9KWA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke1N0cmluZyhyZXN1bHQpfSAoU3RhdHVzOiBVTktOT1dOKWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZm9ybWF0RXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgQ1JJVElDQUw6IEVycm9yICp3aXRoaW4qIGZvcm1hdFRvb2xSZXNwb25zZSBmb3IgJHtmdW5jdGlvbk5hbWV9OmAsIGZvcm1hdEVycm9yLCBcIlJhdyByZXN1bHQ6XCIsIHJlc3VsdCk7XG4gICAgICAgIC8vIFJldHVybiBhIGd1YXJhbnRlZWQgc3RyaW5nIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgcmV0dXJuIGBJbnRlcm5hbCBFcnJvcjogRmFpbGVkIHRvIGZvcm1hdCB0aGUgcmVzdWx0IGZvciAke2Z1bmN0aW9uTmFtZX0uIChTdGF0dXM6IEVSUk9SKWA7XG4gICAgfVxufVxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gcHJvY2VzcyB0b29sIGNhbGxzXG5hc3luYyBmdW5jdGlvbiBwcm9jZXNzVG9vbENhbGxzKHRvb2xDYWxscywgbWVzc2FnZXMsIGNvbnZlcnNhdGlvbklkLCB1c2VySWQsIGFjY2Vzc1Rva2VuKSB7XG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coYFByb2Nlc3NpbmcgJHt0b29sQ2FsbHMubGVuZ3RofSB0b29sIGNhbGxzYCk7XG4gICAgXG4gICAgLy8gVXNlIFByb21pc2UuYWxsU2V0dGxlZCBmb3Igcm9idXN0bmVzc1xuICAgIGNvbnN0IHRvb2xQcm9taXNlcyA9IHRvb2xDYWxscy5tYXAoYXN5bmMgKHRvb2xDYWxsKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvb2xDYWxsSWQgPSB0b29sQ2FsbC5pZDtcbiAgICAgICAgY29uc3QgZnVuY3Rpb25OYW1lID0gdG9vbENhbGwuZnVuY3Rpb24/Lm5hbWU7XG4gICAgICAgIGxldCB0b29sUmVzcG9uc2VDb250ZW50ID0gJyc7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIDEuIEJhc2ljIFZhbGlkYXRpb25cbiAgICAgICAgICAgIGlmICghdG9vbENhbGxJZCB8fCB0b29sQ2FsbC50eXBlICE9PSAnZnVuY3Rpb24nIHx8ICFmdW5jdGlvbk5hbWUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdG9vbCBjYWxsIHN0cnVjdHVyZSByZWNlaXZlZDogJHtKU09OLnN0cmluZ2lmeSh0b29sQ2FsbCl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRvb2xGdW5jdGlvbnNbZnVuY3Rpb25OYW1lXSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVG9vbCBmdW5jdGlvbiBcIiR7ZnVuY3Rpb25OYW1lfVwiIGlzIG5vdCBhdmFpbGFibGUuYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIDIuIFBhcnNlIEFyZ3VtZW50c1xuICAgICAgICAgICAgbGV0IHBhcnNlZEFyZ3MgPSB7fTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkQXJncyA9IEpTT04ucGFyc2UodG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzIHx8ICd7fScpO1xuICAgICAgICAgICAgfSBjYXRjaCAocGFyc2VFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBKU09OIGFyZ3VtZW50cyBmb3IgJHtmdW5jdGlvbk5hbWV9LiBBcmdzOiAke3Rvb2xDYWxsLmZ1bmN0aW9uLmFyZ3VtZW50c30uIEVycm9yOiAke3BhcnNlRXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gMy4gRXhlY3V0ZSBUb29sIEZ1bmN0aW9uXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRXhlY3V0aW5nIHRvb2w6ICR7ZnVuY3Rpb25OYW1lfSAoSUQ6ICR7dG9vbENhbGxJZH0pIHdpdGggYXJnczpgLCBwYXJzZWRBcmdzKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRvb2xGdW5jdGlvbnNbZnVuY3Rpb25OYW1lXShwYXJzZWRBcmdzLCB1c2VySWQsIGFjY2Vzc1Rva2VuKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUb29sICR7ZnVuY3Rpb25OYW1lfSAoSUQ6ICR7dG9vbENhbGxJZH0pIHJhdyByZXN1bHQ6YCwgcmVzdWx0KTtcblxuICAgICAgICAgICAgLy8gNC4gRm9ybWF0IFJlc3VsdFxuICAgICAgICAgICAgdG9vbFJlc3BvbnNlQ29udGVudCA9IGZvcm1hdFRvb2xSZXNwb25zZShmdW5jdGlvbk5hbWUsIHJlc3VsdCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgVG9vbCAke2Z1bmN0aW9uTmFtZX0gKElEOiAke3Rvb2xDYWxsSWR9KSBmb3JtYXR0ZWQgcmVzcG9uc2U6YCwgdG9vbFJlc3BvbnNlQ29udGVudCk7XG5cbiAgICAgICAgICAgIC8vIEFkZCBhIHN1Y2Nlc3MgaW5kaWNhdG9yIHRvIHRoZSB0b29sIHJlc3BvbnNlIGZvciBjb250ZXh0IHRyYWNraW5nXG4gICAgICAgICAgICBsZXQgc3VjY2Vzc0luZGljYXRvciA9IFwiXCI7XG4gICAgICAgICAgICBpZiAoZnVuY3Rpb25OYW1lID09PSAnZGVsZXRlQ2FsZW5kYXJFdmVudCcgJiYgcmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzSW5kaWNhdG9yID0gXCJcXG5cXG5b4pyFIEV2ZW50IHN1Y2Nlc3NmdWxseSBkZWxldGVkXVwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmdW5jdGlvbk5hbWUgPT09ICdhZGRDYWxlbmRhckV2ZW50JyAmJiByZXN1bHQuaWQpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzSW5kaWNhdG9yID0gXCJcXG5cXG5b4pyFIEV2ZW50IHN1Y2Nlc3NmdWxseSBhZGRlZF1cIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZnVuY3Rpb25OYW1lID09PSAndXBkYXRlQ2FsZW5kYXJFdmVudCcgJiYgcmVzdWx0LmlkKSB7XG4gICAgICAgICAgICAgICAgc3VjY2Vzc0luZGljYXRvciA9IFwiXFxuXFxuW+KchSBFdmVudCBzdWNjZXNzZnVsbHkgdXBkYXRlZF1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQWRkIHN1Y2Nlc3MgaW5kaWNhdG9yIHRvIHRoZSByZXNwb25zZSBpZiBhcHBsaWNhYmxlXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogJ2Z1bGZpbGxlZCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHsgcm9sZTogXCJ0b29sXCIsIGNvbnRlbnQ6IHRvb2xSZXNwb25zZUNvbnRlbnQgKyBzdWNjZXNzSW5kaWNhdG9yLCB0b29sX2NhbGxfaWQ6IHRvb2xDYWxsSWQgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRVJST1IgcHJvY2Vzc2luZyB0b29sIGNhbGwgJHt0b29sQ2FsbElkfSAoJHtmdW5jdGlvbk5hbWUgfHwgJz8nfSk6YCwgZXJyb3IpO1xuICAgICAgICAgICAgdG9vbFJlc3BvbnNlQ29udGVudCA9IGBFcnJvciBwcm9jZXNzaW5nIHRvb2wgJHtmdW5jdGlvbk5hbWUgfHwgJz8nfTogJHtlcnJvci5tZXNzYWdlIHx8IGVycm9yfWA7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAncmVqZWN0ZWQnLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogZXJyb3IsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHsgcm9sZTogXCJ0b29sXCIsIGNvbnRlbnQ6IHRvb2xSZXNwb25zZUNvbnRlbnQsIHRvb2xfY2FsbF9pZDogdG9vbENhbGxJZCB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBzZXR0bGVkVG9vbFJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQodG9vbFByb21pc2VzKTtcbiAgICBcbiAgICBjb25zdCB0b29sUmVzcG9uc2VzID0gc2V0dGxlZFRvb2xSZXN1bHRzLm1hcChzZXR0bGVkUmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHNldHRsZWRSZXN1bHQuc3RhdHVzID09PSAnZnVsZmlsbGVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHNldHRsZWRSZXN1bHQudmFsdWUudmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0dGxlZFJlc3VsdC5yZWFzb24udmFsdWU7XG4gICAgICAgIH1cbiAgICB9KS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICAvLyBBZGQgdG9vbCByZXNwb25zZXMgdG8gaGlzdG9yeVxuICAgIG1lc3NhZ2VzLnB1c2goLi4udG9vbFJlc3BvbnNlcyk7XG5cbiAgICAvLyBTdG9yZSB0b29sIHJlc3BvbnNlcyBpbiBEQiAoYmVzdCBlZmZvcnQsIGxvb3AgdGhyb3VnaCByZXN1bHRzKVxuICAgIGlmIChjb252ZXJzYXRpb25JZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gVXNlIFByb21pc2UuYWxsIHRvIHN0b3JlIGFsbCB0b29sIHJlc3BvbnNlcyBpbiBwYXJhbGxlbFxuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwodG9vbFJlc3BvbnNlcy5tYXAodG9vbE1zZyA9PiBcbiAgICAgICAgICAgICAgICBhZGRNZXNzYWdlVG9Db252ZXJzYXRpb24oY29udmVyc2F0aW9uSWQsIFwidG9vbFwiLCB0b29sTXNnLmNvbnRlbnQsIHsgdG9vbF9jYWxsX2lkOiB0b29sTXNnLnRvb2xfY2FsbF9pZCB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChkYkVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgREIgRXJyb3Igc3RvcmluZyB0b29sIHJlc3BvbnNlICR7dG9vbE1zZy50b29sX2NhbGxfaWR9OmAsIGRiRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCB0aHJvdywgYWxsb3cgb3RoZXIgbWVzc2FnZXMgdG8gYmUgc3RvcmVkXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBTdG9yZWQgJHt0b29sUmVzcG9uc2VzLmxlbmd0aH0gdG9vbCByZXNwb25zZXMgaW4gZGF0YWJhc2VgKTtcbiAgICAgICAgfSBjYXRjaCAoYmF0Y2hFcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgaW4gYmF0Y2ggc3RvcmluZyB0b29sIHJlc3BvbnNlczpgLCBiYXRjaEVycm9yKTtcbiAgICAgICAgICAgIC8vIEluZGl2aWR1YWwgZXJyb3JzIGFyZSBhbHJlYWR5IGNhdWdodCBpbiB0aGUgbWFwIGZ1bmN0aW9uXG4gICAgICAgICAgICAvLyBUaGlzIGNhdGNoIGlzIGZvciBlcnJvcnMgb3V0c2lkZSB0aGUgaW5kaXZpZHVhbCBwcm9taXNlc1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0b29sUmVzcG9uc2VzO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8vIENhdGNoIGVycm9ycyBmcm9tIHRoZSBlbnRpcmUgcnVuQ29udmVyc2F0aW9uIGZsb3dcbiAgICBjb25zb2xlLmVycm9yKFwiRkFUQUwgRXJyb3IgaW4gcnVuQ29udmVyc2F0aW9uIHBpcGVsaW5lOlwiLCBlcnJvcik7XG4gICAgLy8gTG9nIGhpc3Rvcnkgc3BlY2lmaWNhbGx5IGZvciA0MDAgZXJyb3JzIHRvIGhlbHAgZGVidWcgc2VxdWVuY2UgaXNzdWVzXG4gICAgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNZXNzYWdlIGhpc3RvcnkgYXQgdGltZSBvZiA0MDAgZXJyb3I6XCIsIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2VzLCBudWxsLCAyKSk7XG4gICAgfVxuICAgIHJlc3BvbnNlQ2FsbGJhY2s/Lih7IHR5cGU6ICdlcnJvcicsIGNvbnRlbnQ6IGBBbiBlcnJvciBvY2N1cnJlZDogJHtlcnJvci5tZXNzYWdlIHx8IFwiQ2hlY2sgc2VydmVyIGxvZ3MuXCJ9YCB9KTtcbiAgICB0aHJvdyBlcnJvcjsgLy8gUmUtdGhyb3dcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBydW5Db252ZXJzYXRpb24obWVzc2FnZXMsIHVzZXJJbnB1dCwgY29udmVyc2F0aW9uSWQgPSBudWxsLCB1c2VySWQgPSAnZGVmYXVsdCcsIGFjY2Vzc1Rva2VuID0gbnVsbCwgcmVzcG9uc2VDYWxsYmFjayA9IG51bGwpIHtcbiAgY29uc29sZS5sb2coYFJ1bm5pbmcgY29udmVyc2F0aW9uICR7Y29udmVyc2F0aW9uSWR9IGZvciB1c2VyICR7dXNlcklkfS4gQWNjZXNzVG9rZW46ICR7ISFhY2Nlc3NUb2tlbn1gKTtcbiAgY29uc3QgbW9kZWwgPSBcImdwdC00b1wiOyAvLyBVc2UgYSBjYXBhYmxlIG1vZGVsIGZvciByZWFzb25pbmdcbiAgY29uc3QgbWF4VG9vbEl0ZXJhdGlvbnMgPSA1OyAvLyBMaW1pdCBzZXF1ZW50aWFsIHRvb2wgY2FsbHMgdG8gcHJldmVudCBpbmZpbml0ZSBsb29wc1xuXG4gIHRyeSB7XG4gICAgICBsZXQgY3VycmVudE1lc3NhZ2VzID0gWy4uLm1lc3NhZ2VzXTsgLy8gVXNlIGEgbXV0YWJsZSBjb3B5IGZvciB0aGlzIHR1cm5cbiAgICAgIGxldCBpdGVyYXRpb24gPSAwO1xuICAgICAgbGV0IGZpbmFsQ29udGVudCA9IG51bGw7IC8vIFN0b3JlcyB0aGUgZmluYWwgdGV4dCByZXNwb25zZSBmb3IgdGhlIHVzZXJcblxuICAgICAgLy8gSGVscGVyIHRvIGZpbHRlciBtZXNzYWdlcyAoS2VlcCBleGlzdGluZyBmaWx0ZXJNZXNzYWdlc0ZvckFQSSlcbiAgICAgIGNvbnN0IGZpbHRlck1lc3NhZ2VzRm9yQVBJID0gKG1zZ3MpID0+IHtcbiAgICAgICAgICAvLyAuLi4gKGtlZXAgZXhpc3RpbmcgaW1wbGVtZW50YXRpb24pIC4uLlxuICAgICAgICAgICBpZiAoIW1zZ3MgfHwgIUFycmF5LmlzQXJyYXkobXNncykpIHtcbiAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBtZXNzYWdlcyBhcnJheSBwYXNzZWQgdG8gZmlsdGVyOlwiLCBtc2dzKTtcbiAgICAgICAgICAgICByZXR1cm4gW107IC8vIFJldHVybiBlbXB0eSBhcnJheSB0byBwcmV2ZW50IGZ1cnRoZXIgZXJyb3JzXG4gICAgICAgICAgIH1cblxuICAgICAgICAgICAvLyBDcmVhdGUgYSBjb3B5IHRvIGF2b2lkIG1vZGlmeWluZyB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAgY29uc3QgZmlsdGVyZWRNc2dzID0gWy4uLm1zZ3NdO1xuXG4gICAgICAgICAgIC8vIFRyYWNrIHRvb2wgY2FsbCBJRHMgZnJvbSBhc3Npc3RhbnQgbWVzc2FnZXNcbiAgICAgICAgICAgY29uc3QgdmFsaWRUb29sQ2FsbElkcyA9IG5ldyBTZXQoKTtcblxuICAgICAgICAgICAvLyBGaXJzdCBwYXNzOiBjb2xsZWN0IGFsbCB2YWxpZCB0b29sIGNhbGwgSURzIGZyb20gYXNzaXN0YW50IG1lc3NhZ2VzXG4gICAgICAgICAgIGZpbHRlcmVkTXNncy5mb3JFYWNoKG1zZyA9PiB7XG4gICAgICAgICAgICAgaWYgKG1zZy5yb2xlID09PSAnYXNzaXN0YW50JyAmJiBtc2cudG9vbF9jYWxscyAmJiBBcnJheS5pc0FycmF5KG1zZy50b29sX2NhbGxzKSkge1xuICAgICAgICAgICAgICAgbXNnLnRvb2xfY2FsbHMuZm9yRWFjaCh0b29sQ2FsbCA9PiB7XG4gICAgICAgICAgICAgICAgIGlmICh0b29sQ2FsbC5pZCkge1xuICAgICAgICAgICAgICAgICAgIHZhbGlkVG9vbENhbGxJZHMuYWRkKHRvb2xDYWxsLmlkKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAvLyBTZWNvbmQgcGFzczogZmlsdGVyIG91dCBpbnZhbGlkIHRvb2wgbWVzc2FnZXNcbiAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZmlsdGVyZWRNc2dzLmZpbHRlcigobXNnLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgIC8vIEtlZXAgYWxsIG5vbi10b29sIG1lc3NhZ2VzXG4gICAgICAgICAgICAgaWYgKG1zZy5yb2xlICE9PSAndG9vbCcpIHJldHVybiB0cnVlO1xuXG4gICAgICAgICAgICAgLy8gRm9yIHRvb2wgbWVzc2FnZXMsIGNoZWNrIGlmIHRoZXkgaGF2ZSBhIHZhbGlkIHRvb2xfY2FsbF9pZFxuICAgICAgICAgICAgIGlmICghbXNnLnRvb2xfY2FsbF9pZCkge1xuICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBGaWx0ZXJpbmcgVE9PTCBtZXNzYWdlIHdpdGggbWlzc2luZyB0b29sX2NhbGxfaWQgYXQgaW5kZXggJHtpbmRleH1gKTtcbiAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGlzIHRvb2wgbWVzc2FnZSBoYXMgYSBjb3JyZXNwb25kaW5nIHRvb2wgY2FsbCBmcm9tIGFuIGFzc2lzdGFudFxuICAgICAgICAgICAgIGlmICghdmFsaWRUb29sQ2FsbElkcy5oYXMobXNnLnRvb2xfY2FsbF9pZCkpIHtcbiAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgRmlsdGVyaW5nIFRPT0wgbWVzc2FnZSBub3QgY29ycmVjdGx5IHByZWNlZGVkIGJ5IGFzc2lzdGFudCB0b29sX2NhbGwuIEluZGV4PSR7aW5kZXh9LCBUb29sQ2FsbElEPSR7bXNnLnRvb2xfY2FsbF9pZH1gKTtcbiAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgLy8gQWxzbyBlbnN1cmUgY29udGVudCBleGlzdHMgZm9yIHRvb2wgbWVzc2FnZXNcbiAgICAgICAgICAgICBpZiAobXNnLmNvbnRlbnQgPT0gbnVsbCB8fCBtc2cuY29udGVudCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgRmlsdGVyaW5nIFRPT0wgbWVzc2FnZSB3aXRoIG1pc3NpbmcvZW1wdHkgY29udGVudC4gSW5kZXg9JHtpbmRleH0sIFRvb2xDYWxsSUQ9JHttc2cudG9vbF9jYWxsX2lkfWApO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gRmluYWwgc2FuaXR5IGNoZWNrOiBFbnN1cmUgYWx0ZXJuYXRpbmcgdXNlci9hc3Npc3RhbnQvdG9vbCBzZXF1ZW5jZSB3aGVyZSBhcHByb3ByaWF0ZVxuICAgICAgICAgICAvLyBSZW1vdmUgY29uc2VjdXRpdmUgbWVzc2FnZXMgb2YgdGhlIHNhbWUgcm9sZSAoZXhjZXB0ICd0b29sJyB3aGljaCBmb2xsb3dzICdhc3Npc3RhbnQnKVxuICAgICAgICAgICBjb25zdCBmaW5hbEZpbHRlcmVkID0gW107XG4gICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRNc2cgPSByZXN1bHRbaV07XG4gICAgICAgICAgICAgIGNvbnN0IHByZXZNc2cgPSBmaW5hbEZpbHRlcmVkW2ZpbmFsRmlsdGVyZWQubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICAgICAgaWYgKHByZXZNc2cgJiYgY3VycmVudE1zZy5yb2xlID09PSBwcmV2TXNnLnJvbGUgJiYgY3VycmVudE1zZy5yb2xlICE9PSAndG9vbCcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgRmlsdGVyaW5nIGNvbnNlY3V0aXZlIG1lc3NhZ2Ugb2Ygcm9sZSAke2N1cnJlbnRNc2cucm9sZX0gYXQgaW5kZXggJHtpfWApO1xuICAgICAgICAgICAgICAgICAgY29udGludWU7IC8vIFNraXAgYWRkaW5nIHRoZSBjb25zZWN1dGl2ZSBtZXNzYWdlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gRW5zdXJlIHRvb2wgbWVzc2FnZSBmb2xsb3dzIGFuIGFzc2lzdGFudCBtZXNzYWdlIChsb29zZWx5LCBmaWx0ZXIgaGFuZGxlcyBzcGVjaWZpYyBJRCBtYXRjaGluZylcbiAgICAgICAgICAgICAgLy8gaWYgKGN1cnJlbnRNc2cucm9sZSA9PT0gJ3Rvb2wnICYmICghcHJldk1zZyB8fCBwcmV2TXNnLnJvbGUgIT09ICdhc3Npc3RhbnQnKSkge1xuICAgICAgICAgICAgICAvLyAgICAgY29uc29sZS53YXJuKGBGaWx0ZXJpbmcgVE9PTCBtZXNzYWdlIG5vdCBmb2xsb3dpbmcgYW4gYXNzaXN0YW50IG1lc3NhZ2UgYXQgaW5kZXggJHtpfWApO1xuICAgICAgICAgICAgICAvLyAgICAgY29udGludWU7IC8vIFNraXAgYWRkaW5nIHRoZSBvdXQtb2YtcGxhY2UgdG9vbCBtZXNzYWdlXG4gICAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgICBmaW5hbEZpbHRlcmVkLnB1c2goY3VycmVudE1zZyk7XG4gICAgICAgICAgIH1cblxuXG4gICAgICAgICAgIGNvbnNvbGUubG9nKGBGaWx0ZXJlZCAke21zZ3MubGVuZ3RoIC0gZmluYWxGaWx0ZXJlZC5sZW5ndGh9IGludmFsaWQvbWFsZm9ybWVkIG1lc3NhZ2VzYCk7XG4gICAgICAgICAgIHJldHVybiBmaW5hbEZpbHRlcmVkO1xuICAgICAgfTtcblxuXG4gICAgICAvLyAtLS0gTWFpbiBSZWFzb25pbmcgTG9vcCAtLS1cbiAgICAgIHdoaWxlIChpdGVyYXRpb24gPCBtYXhUb29sSXRlcmF0aW9ucykge1xuICAgICAgICAgIGl0ZXJhdGlvbisrO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGBcXG4tLS0gQ29udmVyc2F0aW9uIFR1cm4gJHtpdGVyYXRpb259LyR7bWF4VG9vbEl0ZXJhdGlvbnN9IC0tLWApO1xuXG4gICAgICAgICAgY29uc3QgbWVzc2FnZXNGb3JBUEkgPSBmaWx0ZXJNZXNzYWdlc0ZvckFQSShjdXJyZW50TWVzc2FnZXMpO1xuICAgICAgICAgIGlmIChtZXNzYWdlc0ZvckFQSS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk1lc3NhZ2UgaGlzdG9yeSBiZWNhbWUgZW1wdHkgZHVyaW5nIGZpbHRlcmluZy5cIik7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludGVybmFsIGVycm9yOiBDYW5ub3QgcHJvY2VlZCB3aXRoIGVtcHR5IG1lc3NhZ2UgaGlzdG9yeS5cIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gKioqKiogREVCVUcgTE9HICoqKioqXG4gICAgICAgICAgY29uc29sZS5sb2coYE1ha2luZyBBUEkgY2FsbCAjJHtpdGVyYXRpb259IHdpdGggbW9kZWw6ICR7bW9kZWx9YCk7XG4gICAgICAgICAgY29uc29sZS5sb2coYE1lc3NhZ2UgSGlzdG9yeSAoTGVuZ3RoOiAke21lc3NhZ2VzRm9yQVBJLmxlbmd0aH0pOmApO1xuICAgICAgICAgIG1lc3NhZ2VzRm9yQVBJLmZvckVhY2goKG1zZywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYCAgWyR7aW5kZXh9XSBSb2xlOiAke21zZy5yb2xlfWApO1xuICAgICAgICAgICAgICBpZiAobXNnLmNvbnRlbnQpIGNvbnNvbGUubG9nKGAgICAgICBDb250ZW50OiAke1N0cmluZyhtc2cuY29udGVudCkuc3Vic3RyaW5nKDAsIDEwMCl9Li4uYCk7IC8vIFRydW5jYXRlLCBlbnN1cmUgc3RyaW5nXG4gICAgICAgICAgICAgIGlmIChtc2cudG9vbF9jYWxscykgY29uc29sZS5sb2coYCAgICAgIFRvb2wgQ2FsbHM6ICR7SlNPTi5zdHJpbmdpZnkobXNnLnRvb2xfY2FsbHMubWFwKHRjID0+IHRjLmlkICsgXCI6XCIgKyB0Yy5mdW5jdGlvbj8ubmFtZSkpfWApO1xuICAgICAgICAgICAgICBpZiAobXNnLnRvb2xfY2FsbF9pZCkgY29uc29sZS5sb2coYCAgICAgIFRvb2wgQ2FsbCBJRDogJHttc2cudG9vbF9jYWxsX2lkfWApO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGAtLS0gRW5kIEFQSSBDYWxsICMke2l0ZXJhdGlvbn0gSGlzdG9yeSAtLS0gXFxuYCk7XG4gICAgICAgICAgLy8gKioqKiogRU5EIERFQlVHIExPRyAqKioqKlxuXG4gICAgICAgICAgLy8gLS0tIENhbGwgT3BlbkFJIC0tLVxuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgb3BlbmFpLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgICAgICAgICAgbW9kZWw6IG1vZGVsLFxuICAgICAgICAgICAgICBtZXNzYWdlczogbWVzc2FnZXNGb3JBUEksXG4gICAgICAgICAgICAgIHRvb2xzOiB0b29scywgLy8gTWFrZSB0b29scyBhdmFpbGFibGUgb24gZXZlcnkgdHVyblxuICAgICAgICAgICAgICB0b29sX2Nob2ljZTogXCJhdXRvXCIsIC8vIExldCB0aGUgbW9kZWwgZGVjaWRlIGlmIGl0IG5lZWRzIHRvb2xzXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBjb25zdCByZXNwb25zZU1lc3NhZ2UgPSByZXNwb25zZS5jaG9pY2VzWzBdLm1lc3NhZ2U7XG5cbiAgICAgICAgICAvLyAtLS0gQWRkIEFzc2lzdGFudCBNZXNzYWdlIHRvIEhpc3RvcnkgKExvY2FsICYgREIpIC0tLVxuICAgICAgICAgIGN1cnJlbnRNZXNzYWdlcy5wdXNoKHJlc3BvbnNlTWVzc2FnZSk7XG4gICAgICAgICAgaWYgKGNvbnZlcnNhdGlvbklkKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBhd2FpdCBhZGRNZXNzYWdlVG9Db252ZXJzYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgY29udmVyc2F0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgXCJhc3Npc3RhbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZU1lc3NhZ2UuY29udGVudCB8fCBudWxsLCAvLyBTdG9yZSBudWxsIGlmIG5vIGNvbnRlbnQgXG4gICAgICAgICAgICAgICAgICAgICAgeyB0b29sX2NhbGxzOiByZXNwb25zZU1lc3NhZ2UudG9vbF9jYWxscyB8fCBudWxsIH0gLy8gQWx3YXlzIHBhc3MgYW4gb2JqZWN0LCBldmVuIGlmIHRvb2xfY2FsbHMgaXMgbnVsbFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZGJFcnJvcikge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgREIgRXJyb3Igc3RvcmluZyBhc3Npc3RhbnQgbWVzc2FnZSAoaXRlcmF0aW9uICR7aXRlcmF0aW9ufSk6YCwgZGJFcnJvcik7XG4gICAgICAgICAgICAgICAgICAvLyBDb250aW51ZSBldmVuIGlmIERCIHN0b3JlIGZhaWxzIGZvciB0aGlzIG1lc3NhZ2VcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIC0tLSBDaGVjayBmb3IgVG9vbCBDYWxscyAtLS1cbiAgICAgICAgICBjb25zdCBhc3Npc3RhbnRUb29sQ2FsbHMgPSByZXNwb25zZU1lc3NhZ2UudG9vbF9jYWxscztcblxuICAgICAgICAgIGlmIChhc3Npc3RhbnRUb29sQ2FsbHMgJiYgYXNzaXN0YW50VG9vbENhbGxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYEFzc2lzdGFudCByZXF1ZXN0ZWQgJHthc3Npc3RhbnRUb29sQ2FsbHMubGVuZ3RofSB0b29sIGNhbGwocykgaW4gaXRlcmF0aW9uICR7aXRlcmF0aW9ufTpgLCBKU09OLnN0cmluZ2lmeShhc3Npc3RhbnRUb29sQ2FsbHMubWFwKHRjID0+ICh7IGlkOiB0Yy5pZCwgbmFtZTogdGMuZnVuY3Rpb24/Lm5hbWUgfSkpKSk7XG5cbiAgICAgICAgICAgICAgLy8gSW5mb3JtIGNsaWVudCB3ZSdyZSBwcm9jZXNzaW5nIChpZiBzdHJlYW1pbmcpXG4gICAgICAgICAgICAgIHJlc3BvbnNlQ2FsbGJhY2s/Lih7IHR5cGU6ICdwcm9jZXNzaW5nJywgY29udGVudDogYFRoaW5raW5nIChzdGVwICR7aXRlcmF0aW9ufSkuLi5gIH0pO1xuICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMjAwKSk7IC8vIFNtYWxsIGRlbGF5IGZvciBVSSB1cGRhdGVcblxuICAgICAgICAgICAgICAvLyAtLS0gUHJvY2VzcyB0aGUgcmVxdWVzdGVkIHRvb2xzIC0tLVxuICAgICAgICAgICAgICAvLyBwcm9jZXNzVG9vbENhbGxzIGFkZHMgdGhlIHRvb2wgcmVzcG9uc2VzIHRvIGN1cnJlbnRNZXNzYWdlcyBhbmQgc3RvcmVzIHRoZW0gaW4gREJcbiAgICAgICAgICAgICAgY29uc3QgdG9vbFJlc3BvbnNlcyA9IGF3YWl0IHByb2Nlc3NUb29sQ2FsbHMoYXNzaXN0YW50VG9vbENhbGxzLCBjdXJyZW50TWVzc2FnZXMsIGNvbnZlcnNhdGlvbklkLCB1c2VySWQsIGFjY2Vzc1Rva2VuKTtcblxuICAgICAgICAgICAgICAvLyBDaGVjayBpZiBhbnkgdG9vbCBjYWxsIGZhaWxlZCBjcml0aWNhbGx5LCBtYXliZSBzdG9wIGVhcmx5PyAoT3B0aW9uYWwgZW5oYW5jZW1lbnQpXG4gICAgICAgICAgICAgIGNvbnN0IGhhc0NyaXRpY2FsRmFpbHVyZSA9IHRvb2xSZXNwb25zZXMuc29tZSh0ciA9PiB0ci5jb250ZW50Py5pbmNsdWRlcygnKFN0YXR1czogRkFJTEVEKScpKTtcbiAgICAgICAgICAgICAgaWYgKGhhc0NyaXRpY2FsRmFpbHVyZSkge1xuICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgQ3JpdGljYWwgdG9vbCBmYWlsdXJlIGRldGVjdGVkIGluIGl0ZXJhdGlvbiAke2l0ZXJhdGlvbn0uIExMTSB3aWxsIGJlIGluZm9ybWVkLmApO1xuICAgICAgICAgICAgICAgICAgIC8vIExldCB0aGUgbG9vcCBjb250aW51ZSwgTExNIHNob3VsZCBzZWUgdGhlIGZhaWx1cmUgbWVzc2FnZVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gLS0tIExvb3AgY29udGludWVzOiBTZW5kIHRvb2wgcmVzdWx0cyBiYWNrIHRvIExMTSAtLS1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIC0tLSBObyBUb29sIENhbGxzOiBUaGlzIGlzIHRoZSBmaW5hbCByZXNwb25zZSAtLS1cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYE5vIHRvb2wgY2FsbHMgcmVxdWVzdGVkIGluIGl0ZXJhdGlvbiAke2l0ZXJhdGlvbn0uIEZpbmFsIHJlc3BvbnNlIGdlbmVyYXRlZC5gKTtcbiAgICAgICAgICAgICAgZmluYWxDb250ZW50ID0gcmVzcG9uc2VNZXNzYWdlLmNvbnRlbnQgPz8gXCJcIjsgLy8gVXNlIG51bGxpc2ggY29hbGVzY2luZyBmb3Igc2FmZXR5XG4gICAgICAgICAgICAgIGJyZWFrOyAvLyBFeGl0IHRoZSBsb29wXG4gICAgICAgICAgfVxuICAgICAgfSAvLyBFbmQgb2Ygd2hpbGUgbG9vcFxuXG4gICAgICAvLyAtLS0gSGFuZGxlIGxvb3AgZXhpdCAtLS1cbiAgICAgIGlmIChpdGVyYXRpb24gPj0gbWF4VG9vbEl0ZXJhdGlvbnMpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYE1heGltdW0gdG9vbCBpdGVyYXRpb25zICgke21heFRvb2xJdGVyYXRpb25zfSkgcmVhY2hlZC4gUmV0dXJuaW5nIGxhc3QgZ2VuZXJhdGVkIGNvbnRlbnQgb3IgZXJyb3IuYCk7XG4gICAgICAgICAgLy8gQXR0ZW1wdCB0byByZXR1cm4gdGhlIGxhc3QgY29udGVudCBnZW5lcmF0ZWQsIGV2ZW4gaWYgaXQgd2Fzbid0IGludGVuZGVkIGFzIGZpbmFsXG4gICAgICAgICAgY29uc3QgbGFzdEFzc2lzdGFudE1zZyA9IGN1cnJlbnRNZXNzYWdlc1tjdXJyZW50TWVzc2FnZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKGxhc3RBc3Npc3RhbnRNc2c/LnJvbGUgPT09ICdhc3Npc3RhbnQnICYmIGxhc3RBc3Npc3RhbnRNc2cuY29udGVudCkge1xuICAgICAgICAgICAgICAgZmluYWxDb250ZW50ID0gbGFzdEFzc2lzdGFudE1zZy5jb250ZW50O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZpbmFsQ29udGVudCA9IFwiSSBzZWVtIHRvIGJlIHN0dWNrIGluIGEgbG9vcCB0cnlpbmcgdG8gcHJvY2VzcyB0aGF0IHJlcXVlc3QuIENvdWxkIHlvdSB0cnkgcmVwaHJhc2luZyBpdD9cIjtcbiAgICAgICAgICAgICAgcmVzcG9uc2VDYWxsYmFjaz8uKHsgdHlwZTogJ2Vycm9yJywgY29udGVudDogZmluYWxDb250ZW50IH0pO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsQ29udGVudCA9PT0gbnVsbCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJMb29wIGZpbmlzaGVkIHdpdGhvdXQgZ2VuZXJhdGluZyBmaW5hbCBjb250ZW50LlwiKTtcbiAgICAgICAgICBmaW5hbENvbnRlbnQgPSBcIlNvcnJ5LCBJIHdhc24ndCBhYmxlIHRvIGdlbmVyYXRlIGEgZmluYWwgcmVzcG9uc2UgYWZ0ZXIgcHJvY2Vzc2luZyB5b3VyIHJlcXVlc3QuXCI7XG4gICAgICAgICAgcmVzcG9uc2VDYWxsYmFjaz8uKHsgdHlwZTogJ2Vycm9yJywgY29udGVudDogZmluYWxDb250ZW50IH0pO1xuICAgICAgfVxuXG4gICAgICAvLyAtLS0gU3RyZWFtIHRoZSBGSU5BTCByZXNwb25zZSAtLS1cbiAgICAgIGlmIChyZXNwb25zZUNhbGxiYWNrICYmIGZpbmFsQ29udGVudCkge1xuICAgICAgICAgIC8vIFNlbmQgdGhlIGZpbmFsIGNvbnRlbnQgY2h1bmsgYnkgY2h1bmsgaWYgZGVzaXJlZCwgb3IgYXMgb25lIHBpZWNlXG4gICAgICAgICAgLy8gU2ltcGxpZmllZDogU2VuZCBhcyBvbmUgcGllY2UgYWZ0ZXIgdGhlIGxvb3BcbiAgICAgICAgICAgcmVzcG9uc2VDYWxsYmFjayh7IHR5cGU6ICdjb250ZW50JywgY29udGVudDogZmluYWxDb250ZW50IH0pO1xuICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNTApKTsgLy8gU2hvcnQgZGVsYXkgYmVmb3JlIGVuZFxuICAgICAgICAgICByZXNwb25zZUNhbGxiYWNrKHsgdHlwZTogJ2VuZCcgfSk7XG5cbiAgICAgIH0gZWxzZSBpZiAoIXJlc3BvbnNlQ2FsbGJhY2sgJiYgZmluYWxDb250ZW50KSB7XG4gICAgICAgICAgLy8gTm9uLXN0cmVhbWluZyBtb2RlOiByZXR1cm4gdGhlIGZpbmFsIGNvbnRlbnRcbiAgICAgICAgICByZXR1cm4gZmluYWxDb250ZW50O1xuICAgICAgfSBlbHNlIGlmICghZmluYWxDb250ZW50KSB7XG4gICAgICAgICAgIC8vIEVuc3VyZSBzb21ldGhpbmcgaXMgcmV0dXJuZWQvc2VudCBldmVuIGlmIGNvbnRlbnQgaXMgZW1wdHkvbnVsbFxuICAgICAgICAgICBpZiAocmVzcG9uc2VDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlQ2FsbGJhY2soeyB0eXBlOiAnY29udGVudCcsIGNvbnRlbnQ6ICcnIH0pOyAvLyBTZW5kIGVtcHR5IGNvbnRlbnRcbiAgICAgICAgICAgICAgICByZXNwb25zZUNhbGxiYWNrKHsgdHlwZTogJ2VuZCcgfSk7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKFwiRmluYWwgcmVzcG9uc2UgY29udGVudDpcIiwgZmluYWxDb250ZW50KTtcbiAgICAgIC8vIFRoZSBmdW5jdGlvbiBpbXBsaWNpdGx5IHJldHVybnMgZmluYWxDb250ZW50IGlmIG5vdCBzdHJlYW1pbmcsIG9yIGhhbmRsZXMgc3RyZWFtaW5nIHZpYSBjYWxsYmFja1xuICAgICAgcmV0dXJuIGZpbmFsQ29udGVudDsgLy8gUmV0dXJuIGZvciBub24tc3RyZWFtaW5nIGNhc2VcblxuXG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8vIENhdGNoIGVycm9ycyBmcm9tIHRoZSBlbnRpcmUgcnVuQ29udmVyc2F0aW9uIGZsb3dcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJGQVRBTCBFcnJvciBpbiBydW5Db252ZXJzYXRpb24gcGlwZWxpbmU6XCIsIGVycm9yKTtcbiAgICAgIGlmIChlcnJvci5zdGF0dXMgPT09IDQwMCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNZXNzYWdlIGhpc3RvcnkgYXQgdGltZSBvZiA0MDAgZXJyb3I6XCIsIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2VzLCBudWxsLCAyKSk7IC8vIExvZyBpbml0aWFsIGhpc3Rvcnkgc3RhdGVcbiAgICAgIH1cbiAgICAgIC8vIEVuc3VyZSBlcnJvciBpcyBwcm9wYWdhdGVkIHRvIHRoZSBjbGllbnRcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBBbiBlcnJvciBvY2N1cnJlZDogJHtlcnJvci5tZXNzYWdlIHx8IFwiQ2hlY2sgc2VydmVyIGxvZ3MuXCJ9YDtcbiAgICAgIHJlc3BvbnNlQ2FsbGJhY2s/Lih7IHR5cGU6ICdlcnJvcicsIGNvbnRlbnQ6IGVycm9yTWVzc2FnZSB9KTtcbiAgICAgIC8vIFRocm93IG9yIHJldHVybiBlcnJvciBzdHJpbmcgYmFzZWQgb24gZXhwZWN0ZWQgY2FsbGVyIGJlaGF2aW9yXG4gICAgICAvLyB0aHJvdyBlcnJvcjsgLy8gUmUtdGhyb3dpbmcgbWlnaHQgYmUgYmV0dGVyIGZvciBjaGF0KCkgZnVuY3Rpb24gdG8gY2F0Y2hcbiAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7IC8vIE9yIHJldHVybiBlcnJvciBzdHJpbmcgZm9yIG5vbi1zdHJlYW1pbmdcbiAgfVxufVxuXG5cbi8vIC0tLSBIZWxwZXIgZnVuY3Rpb24gdG8gZm9ybWF0IHVzZXIgcHJlZmVyZW5jZXMgLS0tXG5mdW5jdGlvbiBmb3JtYXRVc2VyUHJlZmVyZW5jZXMocHJlZmVyZW5jZXNEYXRhKSB7XG4gIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBwcmVmZXJlbmNlc0RhdGEgbWlnaHQgYmUgYSBTZXF1ZWxpemUgbW9kZWwgaW5zdGFuY2VcbiAgLy8gb3IgbWlnaHQgaGF2ZSBhIGRhdGFWYWx1ZXMgcHJvcGVydHlcbiAgbGV0IGFjdHVhbFByZWZzRGF0YSA9IHByZWZlcmVuY2VzRGF0YTtcbiAgXG4gIC8vIElmIGl0J3MgYSBTZXF1ZWxpemUgbW9kZWwgaW5zdGFuY2Ugd2l0aCBkYXRhVmFsdWVzXG4gIGlmIChwcmVmZXJlbmNlc0RhdGEgJiYgdHlwZW9mIHByZWZlcmVuY2VzRGF0YSA9PT0gJ29iamVjdCcgJiYgcHJlZmVyZW5jZXNEYXRhLmRhdGFWYWx1ZXMpIHtcbiAgICBhY3R1YWxQcmVmc0RhdGEgPSBwcmVmZXJlbmNlc0RhdGEuZGF0YVZhbHVlcztcbiAgICBjb25zb2xlLmxvZyhcIkRFQlVHOiBVc2luZyBkYXRhVmFsdWVzIGZyb20gcHJlZmVyZW5jZXNEYXRhIG9iamVjdFwiKTtcbiAgfVxuICBcbiAgLy8gTG9nIHRoZSBhY3R1YWwgZGF0YSB3ZSdyZSB3b3JraW5nIHdpdGhcbiAgY29uc29sZS5sb2coXCJERUJVRzogQWN0dWFsIHByZWZlcmVuY2VzIGRhdGEgdG8gZm9ybWF0OlwiLCBKU09OLnN0cmluZ2lmeShhY3R1YWxQcmVmc0RhdGEpKTtcbiAgXG4gIC8vIENoZWNrIGlmIHdlIGhhdmUgdmFsaWQgZGF0YSB0byBmb3JtYXRcbiAgaWYgKCFwcmVmZXJlbmNlc0RhdGEgfHwgT2JqZWN0LmtleXMocHJlZmVyZW5jZXNEYXRhKS5sZW5ndGggPT09IDApIHtcbiAgICBjb25zb2xlLmxvZyhcIkRFQlVHOiBmb3JtYXRVc2VyUHJlZmVyZW5jZXMgY2FsbGVkIHdpdGggZW1wdHkgb3IgdW5kZWZpbmVkIHByZWZlcmVuY2VzRGF0YTpcIiwgXG4gICAgICBKU09OLnN0cmluZ2lmeShwcmVmZXJlbmNlc0RhdGEpKTtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBcbiAgdHJ5IHtcbiAgICAvLyBGb3JtYXQgcHJlZmVyZW5jZXMgYXMgYSBjbGVhciwgaHVtYW4tcmVhZGFibGUgc3RyaW5nXG4gICAgbGV0IHByZWZzU3RyaW5nID0gXCJcXG5cXG5Vc2VyIFByZWZlcmVuY2VzIENvbnRleHQgKENvbnNpZGVyIHdoZW4gcmVsZXZhbnQpOlxcblwiO1xuICAgIHByZWZzU3RyaW5nICs9IEpTT04uc3RyaW5naWZ5KGFjdHVhbFByZWZzRGF0YSwgbnVsbCwgMik7XG4gICAgY29uc29sZS5sb2coXCJERUJVRzogRm9ybWF0dGVkIHByZWZlcmVuY2VzIHN0cmluZzpcIiwgcHJlZnNTdHJpbmcpO1xuICAgIHJldHVybiBwcmVmc1N0cmluZztcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZm9ybWF0dGluZyB1c2VyIHByZWZlcmVuY2VzOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIFwiXCI7IC8vIFJldHVybiBlbXB0eSBzdHJpbmcgb24gZXJyb3JcbiAgfVxufVxuXG4vLyAtLS0gTWFpbiBDaGF0IEVudHJ5IFBvaW50IC0tLVxuYXN5bmMgZnVuY3Rpb24gY2hhdCh1c2VySW5wdXQsIHVzZXJJZCA9ICdkZWZhdWx0JywgYWNjZXNzVG9rZW4gPSBudWxsLCBzdHJlYW1DYWxsYmFjayA9IG51bGwsIHN0YXJ0TmV3Q29udmVyc2F0aW9uID0gZmFsc2UpIHsgLy8gQWRkZWQgc3RhcnROZXdDb252ZXJzYXRpb24gZmxhZ1xuICBjb25zb2xlLmxvZyhgQ2hhdCByZXF1ZXN0OiBVc2VyPSR7dXNlcklkfSwgSW5wdXQ9XCIke3VzZXJJbnB1dH1cIiwgU3RhcnROZXc9JHtzdGFydE5ld0NvbnZlcnNhdGlvbn1gKTsgLy8gTG9nIHRoZSBmbGFnXG4gIGlmICghdXNlcklkIHx8IHVzZXJJZCA9PT0gJ2RlZmF1bHQnKSB7XG4gICAgc3RyZWFtQ2FsbGJhY2s/Lih7IHR5cGU6ICdlcnJvcicsIGNvbnRlbnQ6IFwiVXNlciBJRCBtaXNzaW5nLlwiIH0pO1xuICAgIHJldHVybiBcIkVycm9yOiBVc2VyIElEIHJlcXVpcmVkLlwiO1xuICB9XG4gICBpZiAoIXVzZXJJbnB1dD8udHJpbSgpKSB7XG4gICAgICAgc3RyZWFtQ2FsbGJhY2s/Lih7IHR5cGU6ICdpbmZvJywgY29udGVudDogXCJFbnRlciBhIG1lc3NhZ2UuXCIgfSk7IHJldHVybiBcIlwiO1xuICAgfVxuXG4gICAvLyBTZW5kICdzdGFydCcgc2lnbmFsIGltbWVkaWF0ZWx5IGZvciBzdHJlYW1pbmdcbiAgIHN0cmVhbUNhbGxiYWNrPy4oeyB0eXBlOiAnc3RhcnQnIH0pO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgdG9rZW5zID0gYWNjZXNzVG9rZW4gPyB7IGFjY2Vzc190b2tlbjogYWNjZXNzVG9rZW4gfSA6IG51bGw7XG4gICAgbGV0IHVzZXI7XG4gICAgbGV0IGNvbnZlcnNhdGlvbjtcbiAgICBsZXQgaGlzdG9yeU1lc3NhZ2VzID0gW107IC8vIEZvcm1hdHRlZCBoaXN0b3J5IGZvciBPcGVuQUkgQVBJXG5cbiAgICAvLyAtLS0gTG9hZCBVc2VyICYgQ29udmVyc2F0aW9uIEhpc3RvcnkgLS0tXG4gICAgaWYgKCFzdGFydE5ld0NvbnZlcnNhdGlvbikge1xuXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gKipGSVg6KiogVXNlIHRoZSBvcHRpbWl6ZWQgcXVlcnlcbiAgICAgICAgdXNlciA9IGF3YWl0IGdldFVzZXJXaXRoTGF0ZXN0Q29udmVyc2F0aW9uKHVzZXJJZCk7XG5cbiAgICAgICAgaWYgKHVzZXI/LkNvbnZlcnNhdGlvbnM/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnZlcnNhdGlvbiA9IHVzZXIuQ29udmVyc2F0aW9uc1swXTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCBhY3RpdmUgY29udmVyc2F0aW9uICR7Y29udmVyc2F0aW9uLmNvbnZlcnNhdGlvbl9pZH1gKTtcbiAgICAgICAgICAgIGlmIChjb252ZXJzYXRpb24uQ29udmVyc2F0aW9uTWVzc2FnZXM/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBTb3J0IEFTQ0VORElORyBmb3IgQVBJXG4gICAgICAgICAgICAgICAgY29udmVyc2F0aW9uLkNvbnZlcnNhdGlvbk1lc3NhZ2VzLnNvcnQoKGEsIGIpID0+IGEuc2VxdWVuY2VfbnVtYmVyIC0gYi5zZXF1ZW5jZV9udW1iZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gKipDUklUSUNBTCBGSVg6IFJvYnVzdCBIaXN0b3J5IE1hcHBpbmcqKlxuICAgICAgICAgICAgICAgIGhpc3RvcnlNZXNzYWdlcyA9IGNvbnZlcnNhdGlvbi5Db252ZXJzYXRpb25NZXNzYWdlcy5tYXAoKG1zZywgaW5kZXgsIGFsbE1zZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZU9iamVjdCA9IHsgcm9sZTogbXNnLnJvbGUgfTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDb250ZW50OiBNYW5kYXRvcnkgdW5sZXNzIGFzc2lzdGFudCB3LyB0b29sIGNhbGxzXG4gICAgICAgICAgICAgICAgICAgIGlmIChtc2cuY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlT2JqZWN0LmNvbnRlbnQgPSBtc2cuY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtc2cucm9sZSA9PT0gJ2Fzc2lzdGFudCcgJiYgbXNnLnRvb2xfY2FsbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0b29sX2NhbGxzIGZpZWxkIGFjdHVhbGx5IGNvbnRhaW5zIHZhbGlkIGNhbGxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbGlkVG9vbENhbGxzRXhpc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobXNnLnRvb2xfY2FsbHMudG9vbF9jYWxscyAmJiBBcnJheS5pc0FycmF5KG1zZy50b29sX2NhbGxzLnRvb2xfY2FsbHMpICYmIG1zZy50b29sX2NhbGxzLnRvb2xfY2FsbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRUb29sQ2FsbHNFeGlzdCA9IG1zZy50b29sX2NhbGxzLnRvb2xfY2FsbHMuc29tZSh0YyA9PiB0Yy5pZCAmJiB0Yy5mdW5jdGlvbj8ubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG1zZy50b29sX2NhbGxzKSAmJiBtc2cudG9vbF9jYWxscy5sZW5ndGggPiAwKSB7IC8vIEhhbmRsZSBkaXJlY3QgYXJyYXkgc3RvcmFnZSBwb3NzaWJpbGl0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRUb29sQ2FsbHNFeGlzdCA9IG1zZy50b29sX2NhbGxzLnNvbWUodGMgPT4gdGMuaWQgJiYgdGMuZnVuY3Rpb24/Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRUb29sQ2FsbHNFeGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlT2JqZWN0LmNvbnRlbnQgPSBudWxsOyAvLyBBUEkgZXhwZWN0cyBudWxsL1wiXCIgaWYgb25seSB0b29sX2NhbGxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU9iamVjdC5jb250ZW50ID0gXCJcIjsgLy8gVHJlYXQgYXMgZW1wdHkgY29udGVudCBpZiB0b29sX2NhbGxzIGludmFsaWQvZW1wdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlT2JqZWN0LmNvbnRlbnQgPSBcIlwiOyAvLyBEZWZhdWx0IGVtcHR5IHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAvLyBUb29sIENhbGxzIChBc3Npc3RhbnQpOiBFeHRyYWN0IHRoZSBhcnJheVxuICAgICAgICAgICAgICAgICAgICBpZiAobXNnLnJvbGUgPT09ICdhc3Npc3RhbnQnICYmIG1zZy50b29sX2NhbGxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG9vbENhbGxzQXJyYXkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FzZSAxOiBTdG9yZWQgYXMgeyB0b29sX2NhbGxzOiBbLi4uXSB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobXNnLnRvb2xfY2FsbHMudG9vbF9jYWxscyAmJiBBcnJheS5pc0FycmF5KG1zZy50b29sX2NhbGxzLnRvb2xfY2FsbHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbENhbGxzQXJyYXkgPSBtc2cudG9vbF9jYWxscy50b29sX2NhbGxzO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FzZSAyOiBTdG9yZWQgYXMgWy4uLl0gKGZhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG1zZy50b29sX2NhbGxzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xDYWxsc0FycmF5ID0gbXNnLnRvb2xfY2FsbHM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBPTkxZIGlmIHZhbGlkIGFuZCBub24tZW1wdHlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b29sQ2FsbHNBcnJheSAmJiB0b29sQ2FsbHNBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkVG9vbENhbGxzID0gdG9vbENhbGxzQXJyYXkuZmlsdGVyKHRjID0+IHRjLmlkICYmIHRjLnR5cGUgPT09ICdmdW5jdGlvbicgJiYgdGMuZnVuY3Rpb24/Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRUb29sQ2FsbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU9iamVjdC50b29sX2NhbGxzID0gdmFsaWRUb29sQ2FsbHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZS1lbnN1cmUgY29udGVudCBpcyBudWxsIGlmIE9OTFkgdG9vbCBjYWxsc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VPYmplY3QuY29udGVudCA9PT0gXCJcIiAmJiB2YWxpZFRvb2xDYWxscy5sZW5ndGggPT09IHRvb2xDYWxsc0FycmF5Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlT2JqZWN0LmNvbnRlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYERCIG1lc3NhZ2UgJHttc2cubWVzc2FnZV9pZH0gaGFkIHRvb2xfY2FsbHMgb2JqZWN0IGJ1dCBubyB2YWxpZCBjYWxscy5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgYWRkIGVtcHR5L2ludmFsaWQgdG9vbF9jYWxscyBhcnJheSB0byBBUEkgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBUb29sIENhbGwgSUQgKFRvb2wpOiBFeHRyYWN0IHRoZSBJRCBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1zZy5yb2xlID09PSAndG9vbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0b29sSWQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhc2UgMTogU3RvcmVkIGFzIHsgdG9vbF9jYWxsX2lkOiBcIi4uLlwiIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbXNnLnRvb2xfY2FsbF9pZCA9PT0gJ29iamVjdCcgJiYgbXNnLnRvb2xfY2FsbF9pZCAhPT0gbnVsbCAmJiBtc2cudG9vbF9jYWxsX2lkLnRvb2xfY2FsbF9pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xJZCA9IG1zZy50b29sX2NhbGxfaWQudG9vbF9jYWxsX2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhc2UgMjogU3RvcmVkIGFzIFwiLi4uXCIgKGZhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbXNnLnRvb2xfY2FsbF9pZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sSWQgPSBtc2cudG9vbF9jYWxsX2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUb29sIG1lc3NhZ2UgTVVTVCBoYXZlIElEIGFuZCBjb250ZW50IHRvIGJlIHZhbGlkIGZvciBBUElcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b29sSWQgJiYgbWVzc2FnZU9iamVjdC5jb250ZW50ICE9IG51bGwpIHsgLy8gQ29udGVudCBjb21lcyBmcm9tIGZvcm1hdFRvb2xSZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VPYmplY3QudG9vbF9jYWxsX2lkID0gdG9vbElkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYEZpbHRlcmluZyBpbnZhbGlkIFRPT0wgbWVzc2FnZSAobWlzc2luZyBJRCBvciBjb250ZW50KTogREJfSUQ9JHttc2cubWVzc2FnZV9pZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gRmlsdGVyIG91dCBpbnZhbGlkIHRvb2wgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQVBJIFZhbGlkYXRpb24gQ2hlY2s6IHRvb2wgcm9sZSBtdXN0IGZvbGxvdyBhc3Npc3RhbnQgcm9sZSB3aXRoIHRvb2xfY2FsbHNcbiAgICAgICAgICAgICAgICAgICAgLy8gKipSRU1PVkVEIFNUUklDVCBQUkVDRURJTkcgQ0hFQ0sqKiAtIFJlbHlpbmcgb24gZmlsdGVyTWVzc2FnZXNGb3JBUEkgaW5zaWRlIHJ1bkNvbnZlcnNhdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyBpZiAobWVzc2FnZU9iamVjdC5yb2xlID09PSAndG9vbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnN0IHByZXZNYXBwZWRNZXNzYWdlID0gaW5kZXggPiAwID8gaGlzdG9yeU1lc3NhZ2VzW2luZGV4IC0gMV0gOiBudWxsOyAvLyBDaGVjayB0aGUgKm1hcHBlZCogcHJldmlvdXMgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgaWYgKCFwcmV2TWFwcGVkTWVzc2FnZSB8fCBwcmV2TWFwcGVkTWVzc2FnZS5yb2xlICE9PSAnYXNzaXN0YW50JyB8fCAhcHJldk1hcHBlZE1lc3NhZ2UudG9vbF9jYWxscyB8fCAhcHJldk1hcHBlZE1lc3NhZ2UudG9vbF9jYWxscy5zb21lKHRjID0+IHRjLmlkID09PSBtZXNzYWdlT2JqZWN0LnRvb2xfY2FsbF9pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgY29uc29sZS53YXJuKGBGaWx0ZXJpbmcgVE9PTCBtZXNzYWdlIG5vdCBjb3JyZWN0bHkgcHJlY2VkZWQgYnkgYXNzaXN0YW50IHRvb2xfY2FsbC4gREJfSUQ9JHttc2cubWVzc2FnZV9pZH0sIFRvb2xDYWxsSUQ9JHttZXNzYWdlT2JqZWN0LnRvb2xfY2FsbF9pZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgcmV0dXJuIG51bGw7IC8vIEZpbHRlciBvdXQgb3JwaGFuZWQvbWlzbWF0Y2hlZCB0b29sIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAvLyBGaWx0ZXIgb3V0IGFzc2lzdGFudCBtZXNzYWdlcyB0aGF0IGVuZCB1cCBlbXB0eSAobm8gY29udGVudCwgbm8gdmFsaWQgdG9vbCBjYWxscylcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VPYmplY3Qucm9sZSA9PT0gJ2Fzc2lzdGFudCcgJiYgbWVzc2FnZU9iamVjdC5jb250ZW50ID09IG51bGwgJiYgIW1lc3NhZ2VPYmplY3QudG9vbF9jYWxscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgRmlsdGVyaW5nIGVtcHR5IEFTU0lTVEFOVCBtZXNzYWdlLiBEQl9JRD0ke21zZy5tZXNzYWdlX2lkfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZU9iamVjdDtcblxuICAgICAgICAgICAgICAgIH0pLmZpbHRlcihCb29sZWFuKTsgLy8gUmVtb3ZlIG51bGxzIGZyb20gZmlsdGVyaW5nXG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTG9hZGVkIGFuZCBtYXBwZWQgJHtoaXN0b3J5TWVzc2FnZXMubGVuZ3RofSB2YWxpZCBtZXNzYWdlcyBmcm9tIGhpc3RvcnkuYCk7XG4gICAgICAgICAgICAgICAgLy8gREVCVUc6IExvZyB0aGUgZmluYWwgaGlzdG9yeSBiZWluZyBzZW50LCBPTkxZIEZPUiBERUJVR0dJTkcgU0VOU0lUSVZFIERBVEFcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkZpbmFsIGhpc3RvcnkgZm9yIEFQSTpcIiwgSlNPTi5zdHJpbmdpZnkoaGlzdG9yeU1lc3NhZ2VzLCBudWxsLCAyKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQ29udmVyc2F0aW9uICR7Y29udmVyc2F0aW9uLmNvbnZlcnNhdGlvbl9pZH0gaGFzIG5vIG1lc3NhZ2VzLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBObyBleGlzdGluZyB1c2VyL2NvbnZlcnNhdGlvbiBmb3VuZCBmb3IgJHt1c2VySWR9LiBDcmVhdGluZy5gKTtcbiAgICAgICAgICAgICBpZiAoIXVzZXIpIHsgLy8gRW5zdXJlIHVzZXIgZXhpc3RzXG4gICAgICAgICAgICAgICAgIGNvbnN0IGlzRW1haWwgPSB1c2VySWQuaW5jbHVkZXMoJ0AnKTtcbiAgICAgICAgICAgICAgICAgY29uc3QgZW1haWwgPSBpc0VtYWlsID8gdXNlcklkIDogYCR7dXNlcklkfUBleGFtcGxlLmNvbWA7XG4gICAgICAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gaXNFbWFpbCA/ICdlbWFpbCcgOiAnc3lzdGVtJzsgLy8gQWRqdXN0IGFzIG5lZWRlZFxuICAgICAgICAgICAgICAgICB1c2VyID0gYXdhaXQgZ2V0T3JDcmVhdGVVc2VyKGVtYWlsLCBwcm92aWRlciwgdXNlcklkLCB1c2VySWQpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDUklUSUNBTDogRXJyb3IgbG9hZGluZyB1c2VyL2hpc3Rvcnk6XCIsIGVycm9yKTtcbiAgICAgICAgdHJ5IHsgLy8gQXR0ZW1wdCByZWNvdmVyeVxuICAgICAgICAgICAgY29uc3QgaXNFbWFpbCA9IHVzZXJJZC5pbmNsdWRlcygnQCcpO1xuICAgICAgICAgICAgY29uc3QgZW1haWwgPSBpc0VtYWlsID8gdXNlcklkIDogYCR7dXNlcklkfUBleGFtcGxlLmNvbWA7XG4gICAgICAgICAgICB1c2VyID0gYXdhaXQgZ2V0T3JDcmVhdGVVc2VyKGVtYWlsLCBpc0VtYWlsID8gJ2VtYWlsJyA6ICdzeXN0ZW0nLCB1c2VySWQsIHVzZXJJZCk7XG4gICAgICAgIH0gY2F0Y2ggKHVzZXJFcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNSSVRJQ0FMOiBGYWlsZWQgdXNlciByZWNvdmVyeTpcIiwgdXNlckVycm9yKTtcbiAgICAgICAgICAgIHN0cmVhbUNhbGxiYWNrPy4oeyB0eXBlOiAnZXJyb3InLCBjb250ZW50OiBcIkZhaWxlZCB0byBsb2FkIHVzZXIgcHJvZmlsZS5cIiB9KTtcbiAgICAgICAgICAgIHJldHVybiBcIkVycm9yOiBDb3VsZCBub3QgbG9hZCB1c2VyIHByb2ZpbGUuXCI7XG4gICAgICAgIH1cbiAgICAgICAgY29udmVyc2F0aW9uID0gbnVsbDsgaGlzdG9yeU1lc3NhZ2VzID0gW107IC8vIFJlc2V0IHN0YXRlXG4gICAgfVxuICAgIH0gZWxzZSB7IC8vIEhhbmRsZSBzdGFydE5ld0NvbnZlcnNhdGlvbiA9IHRydWVcbiAgICAgICAgY29uc29sZS5sb2coXCJTdGFydGluZyBhIG5ldyBjb252ZXJzYXRpb24gYXMgcmVxdWVzdGVkLlwiKTtcbiAgICAgICAgLy8gRW5zdXJlIHVzZXIgb2JqZWN0IGlzIGxvYWRlZCwgZXZlbiBpZiBoaXN0b3J5IGxvYWRpbmcgd2FzIHNraXBwZWRcbiAgICAgICAgY29uc29sZS5sb2coXCJERUJVRzogc3RhcnROZXdDb252ZXJzYXRpb249dHJ1ZSwgdXNlciBvYmplY3QgYmVmb3JlIGxvYWRpbmc6XCIsIHVzZXIgPyBgVXNlciBleGlzdHM6ICR7dXNlci51c2VyX2lkfWAgOiBcIlVzZXIgaXMgbnVsbFwiKTtcbiAgICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzRW1haWwgPSB1c2VySWQuaW5jbHVkZXMoJ0AnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbWFpbCA9IGlzRW1haWwgPyB1c2VySWQgOiBgJHt1c2VySWR9QGV4YW1wbGUuY29tYDtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgREVCVUc6IEFib3V0IHRvIGNhbGwgZ2V0T3JDcmVhdGVVc2VyIHdpdGggZW1haWw9JHtlbWFpbH1gKTtcbiAgICAgICAgICAgICAgICB1c2VyID0gYXdhaXQgZ2V0T3JDcmVhdGVVc2VyKGVtYWlsLCBpc0VtYWlsID8gJ2VtYWlsJyA6ICdzeXN0ZW0nLCB1c2VySWQsIHVzZXJJZCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJERUJVRzogQWZ0ZXIgZ2V0T3JDcmVhdGVVc2VyIGNhbGwsIHVzZXIgb2JqZWN0OlwiLCBcbiAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcl9pZDogdXNlci51c2VyX2lkLFxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgaGFzVXNlclByZWZlcmVuY2U6ICEhdXNlci5Vc2VyUHJlZmVyZW5jZSxcbiAgICAgICAgICAgICAgICAgICAgdXNlclByZWZlcmVuY2VLZXlzOiB1c2VyLlVzZXJQcmVmZXJlbmNlID8gT2JqZWN0LmtleXModXNlci5Vc2VyUHJlZmVyZW5jZSkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBwcmVmZXJlbmNlc0RhdGFLZXlzOiB1c2VyLlVzZXJQcmVmZXJlbmNlPy5wcmVmZXJlbmNlc19kYXRhID8gT2JqZWN0LmtleXModXNlci5Vc2VyUHJlZmVyZW5jZS5wcmVmZXJlbmNlc19kYXRhKSA6IG51bGxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHVzZXJFcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDUklUSUNBTDogRmFpbGVkIHVzZXIgY3JlYXRpb24vcmV0cmlldmFsIHdoZW4gc3RhcnRpbmcgbmV3IGNvbnZlcnNhdGlvbjpcIiwgdXNlckVycm9yKTtcbiAgICAgICAgICAgICAgICBzdHJlYW1DYWxsYmFjaz8uKHsgdHlwZTogJ2Vycm9yJywgY29udGVudDogXCJGYWlsZWQgdG8gbG9hZCB1c2VyIHByb2ZpbGUgZm9yIG5ldyBjaGF0LlwiIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBcIkVycm9yOiBDb3VsZCBub3QgbG9hZCB1c2VyIHByb2ZpbGUuXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXhwbGljaXRseSBjbGVhciBjb252ZXJzYXRpb24gYW5kIGhpc3RvcnlcbiAgICAgICAgY29udmVyc2F0aW9uID0gbnVsbDtcbiAgICAgICAgaGlzdG9yeU1lc3NhZ2VzID0gW107XG4gICAgfVxuXG4gICAgLy8gLS0tIENyZWF0ZSBDb252ZXJzYXRpb24gaWYgbmVlZGVkICYgQWRkIFN5c3RlbSBQcm9tcHQgLS0tXG4gICAgaWYgKCFjb252ZXJzYXRpb24pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnZlcnNhdGlvbiA9IGF3YWl0IGNyZWF0ZUNvbnZlcnNhdGlvbih1c2VyLnVzZXJfaWQpO1xuICAgICAgICBjb25zb2xlLmxvZyhgQ3JlYXRlZCBuZXcgY29udmVyc2F0aW9uICR7Y29udmVyc2F0aW9uLmNvbnZlcnNhdGlvbl9pZH0uIFByZXBhcmluZyBzeXN0ZW0gcHJvbXB0LmApO1xuICAgICAgICAvLyBHZXQgYmFzZSBzeXN0ZW0gcHJvbXB0XG4gICAgICAgIGxldCBzeXN0ZW1Qcm9tcHRDb250ZW50ID0gZ2V0QXRoZW5hU3lzdGVtUHJvbXB0KCk7XG4gICAgICAgIFxuICAgICAgICAvLyBEZWJ1ZyBsb2cgdGhlIHVzZXIgb2JqZWN0IHN0cnVjdHVyZVxuICAgICAgICBjb25zb2xlLmxvZyhcIkRFQlVHOiBVc2VyIG9iamVjdCBzdHJ1Y3R1cmUgd2hlbiBjcmVhdGluZyBuZXcgY29udmVyc2F0aW9uOlwiLCBcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICB1c2VyX2lkOiB1c2VyLnVzZXJfaWQsXG4gICAgICAgICAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICAgICAgICAgIGhhc1VzZXJQcmVmZXJlbmNlOiAhIXVzZXIuVXNlclByZWZlcmVuY2UsXG4gICAgICAgICAgICB1c2VyUHJlZmVyZW5jZURhdGFWYWx1ZXM6IHVzZXIuVXNlclByZWZlcmVuY2UgPyAhIXVzZXIuVXNlclByZWZlcmVuY2UuZGF0YVZhbHVlcyA6IG51bGwsXG4gICAgICAgICAgICBwcmVmZXJlbmNlc0RhdGFSYXc6IHVzZXIuVXNlclByZWZlcmVuY2UgPyB1c2VyLlVzZXJQcmVmZXJlbmNlLnByZWZlcmVuY2VzX2RhdGEgOiBudWxsLFxuICAgICAgICAgICAgcHJlZmVyZW5jZXNEYXRhRnJvbURhdGFWYWx1ZXM6IHVzZXIuVXNlclByZWZlcmVuY2UgPyB1c2VyLlVzZXJQcmVmZXJlbmNlLmRhdGFWYWx1ZXM/LnByZWZlcmVuY2VzX2RhdGEgOiBudWxsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEZvcm1hdCBhbmQgYXBwZW5kIHVzZXIgcHJlZmVyZW5jZXMgaWYgdGhleSBleGlzdFxuICAgICAgICAvLyBBY2Nlc3MgcHJlZmVyZW5jZXNfZGF0YSBmcm9tIGRhdGFWYWx1ZXMgaWYgZGlyZWN0IGFjY2VzcyBmYWlsc1xuICAgICAgICBjb25zdCBwcmVmZXJlbmNlc0RhdGEgPSB1c2VyLlVzZXJQcmVmZXJlbmNlPy5wcmVmZXJlbmNlc19kYXRhIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1c2VyLlVzZXJQcmVmZXJlbmNlPy5kYXRhVmFsdWVzID8gdXNlci5Vc2VyUHJlZmVyZW5jZS5kYXRhVmFsdWVzLnByZWZlcmVuY2VzX2RhdGEgOiBudWxsKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt9O1xuICAgICAgICBcbiAgICAgICAgLy8gTG9nIHRoZSByYXcgVXNlclByZWZlcmVuY2Ugb2JqZWN0IHRvIGhlbHAgZGlhZ25vc2UgaXNzdWVzXG4gICAgICAgIGNvbnNvbGUubG9nKFwiREVCVUc6IFJhdyBVc2VyUHJlZmVyZW5jZSBvYmplY3Q6XCIsIFxuICAgICAgICAgIHVzZXIuVXNlclByZWZlcmVuY2UgPyBKU09OLnN0cmluZ2lmeSh1c2VyLlVzZXJQcmVmZXJlbmNlKS5zdWJzdHJpbmcoMCwgMjAwKSArIFwiLi4uXCIgOiBcIm51bGxcIik7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwcmVmc1N0cmluZyA9IGZvcm1hdFVzZXJQcmVmZXJlbmNlcyhwcmVmZXJlbmNlc0RhdGEpO1xuICAgICAgICBzeXN0ZW1Qcm9tcHRDb250ZW50ICs9IHByZWZzU3RyaW5nO1xuICAgICAgICBcbiAgICAgICAgLy8gTG9nIHRoZSBmaW5hbCBzeXN0ZW0gcHJvbXB0XG4gICAgICAgIGNvbnNvbGUubG9nKFwiREVCVUc6IEZpbmFsIHN5c3RlbSBwcm9tcHQgZm9yIG5ldyBjb252ZXJzYXRpb246XCIsIHN5c3RlbVByb21wdENvbnRlbnQuc3Vic3RyaW5nKDAsIDIwMCkgKyBcIi4uLiBbdHJ1bmNhdGVkXVwiKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJERUJVRzogRG9lcyBuZXcgY29udmVyc2F0aW9uIHN5c3RlbSBwcm9tcHQgY29udGFpbiBwcmVmZXJlbmNlcz9cIiwgc3lzdGVtUHJvbXB0Q29udGVudC5pbmNsdWRlcyhcIlVzZXIgUHJlZmVyZW5jZXMgQ29udGV4dFwiKSk7XG5cbiAgICAgICAgLy8gU3RvcmUgdGhlIGJhc2Ugc3lzdGVtIHByb21wdCBpbiBEQiBmaXJzdFxuICAgICAgICBhd2FpdCBhZGRNZXNzYWdlVG9Db252ZXJzYXRpb24oY29udmVyc2F0aW9uLmNvbnZlcnNhdGlvbl9pZCwgXCJzeXN0ZW1cIiwgc3lzdGVtUHJvbXB0Q29udGVudCk7XG5cbiAgICAgICAgLy8gQWRkIHRoZSBwb3RlbnRpYWxseSBjb21iaW5lZCBzeXN0ZW0gcHJvbXB0IHRvIHRoZSBTVEFSVCBvZiB0aGUgbG9jYWwgaGlzdG9yeSBhcnJheVxuICAgICAgICBoaXN0b3J5TWVzc2FnZXMudW5zaGlmdCh7IHJvbGU6IFwic3lzdGVtXCIsIGNvbnRlbnQ6IHN5c3RlbVByb21wdENvbnRlbnQgfSk7XG5cbiAgICAgIH0gY2F0Y2ggKGNyZWF0ZUVycm9yKSB7XG4gICAgICAgICBjb25zb2xlLmVycm9yKFwiQ1JJVElDQUw6IEZhaWxlZCB0byBjcmVhdGUgY29udmVyc2F0aW9uOlwiLCBjcmVhdGVFcnJvcik7XG4gICAgICAgICBzdHJlYW1DYWxsYmFjaz8uKHsgdHlwZTogJ2Vycm9yJywgY29udGVudDogXCJGYWlsZWQgdG8gc3RhcnQgY2hhdCBzZXNzaW9uLlwiIH0pO1xuICAgICAgICAgcmV0dXJuIFwiRXJyb3I6IENvdWxkIG5vdCBzdGFydCBjaGF0IHNlc3Npb24uXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gLS0tIFByZXBhcmUgbWVzc2FnZXMgZm9yIEFQSSAtLS1cbiAgICAvLyBDcmVhdGUgYSBjb3B5IG9mIGhpc3RvcnkgbWVzc2FnZXNcbiAgICBsZXQgY3VycmVudE1lc3NhZ2VzID0gWy4uLmhpc3RvcnlNZXNzYWdlc107XG4gICAgXG4gICAgLy8gRHluYW1pY2FsbHkgaW5qZWN0IHVzZXIgcHJlZmVyZW5jZXMgaW50byBzeXN0ZW0gcHJvbXB0IGZvciBldmVyeSBBUEkgY2FsbFxuICAgIGlmIChjdXJyZW50TWVzc2FnZXMubGVuZ3RoID4gMCAmJiBjdXJyZW50TWVzc2FnZXNbMF0ucm9sZSA9PT0gXCJzeXN0ZW1cIikge1xuICAgICAgLy8gR2V0IHRoZSBiYXNlIHN5c3RlbSBwcm9tcHQgY29udGVudFxuICAgICAgbGV0IGJhc2VTeXN0ZW1Qcm9tcHQgPSBnZXRBdGhlbmFTeXN0ZW1Qcm9tcHQoKTtcbiAgICAgIFxuICAgICAgLy8gRGVidWcgbG9nIHRoZSB1c2VyIG9iamVjdCBzdHJ1Y3R1cmVcbiAgICAgIGNvbnNvbGUubG9nKFwiREVCVUc6IFVzZXIgb2JqZWN0IHN0cnVjdHVyZSBiZWZvcmUgQVBJIGNhbGw6XCIsIFxuICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgdXNlcl9pZDogdXNlci51c2VyX2lkLFxuICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICAgIGhhc1VzZXJQcmVmZXJlbmNlOiAhIXVzZXIuVXNlclByZWZlcmVuY2UsXG4gICAgICAgICAgdXNlclByZWZlcmVuY2VEYXRhVmFsdWVzOiB1c2VyLlVzZXJQcmVmZXJlbmNlID8gISF1c2VyLlVzZXJQcmVmZXJlbmNlLmRhdGFWYWx1ZXMgOiBudWxsLFxuICAgICAgICAgIHByZWZlcmVuY2VzRGF0YVJhdzogdXNlci5Vc2VyUHJlZmVyZW5jZSA/IHVzZXIuVXNlclByZWZlcmVuY2UucHJlZmVyZW5jZXNfZGF0YSA6IG51bGwsXG4gICAgICAgICAgcHJlZmVyZW5jZXNEYXRhRnJvbURhdGFWYWx1ZXM6IHVzZXIuVXNlclByZWZlcmVuY2UgPyB1c2VyLlVzZXJQcmVmZXJlbmNlLmRhdGFWYWx1ZXM/LnByZWZlcmVuY2VzX2RhdGEgOiBudWxsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgXG4gICAgICAvLyBGb3JtYXQgYW5kIGFwcGVuZCB1c2VyIHByZWZlcmVuY2VzIGlmIHRoZXkgZXhpc3RcbiAgICAgIC8vIEFjY2VzcyBwcmVmZXJlbmNlc19kYXRhIGZyb20gZGF0YVZhbHVlcyBpZiBkaXJlY3QgYWNjZXNzIGZhaWxzXG4gICAgICBjb25zdCBwcmVmZXJlbmNlc0RhdGEgPSB1c2VyLlVzZXJQcmVmZXJlbmNlPy5wcmVmZXJlbmNlc19kYXRhIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodXNlci5Vc2VyUHJlZmVyZW5jZT8uZGF0YVZhbHVlcyA/IHVzZXIuVXNlclByZWZlcmVuY2UuZGF0YVZhbHVlcy5wcmVmZXJlbmNlc19kYXRhIDogbnVsbCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAge307XG4gICAgICBcbiAgICAgIC8vIExvZyB0aGUgcmF3IFVzZXJQcmVmZXJlbmNlIG9iamVjdCB0byBoZWxwIGRpYWdub3NlIGlzc3Vlc1xuICAgICAgY29uc29sZS5sb2coXCJERUJVRzogUmF3IFVzZXJQcmVmZXJlbmNlIG9iamVjdDpcIiwgXG4gICAgICAgIHVzZXIuVXNlclByZWZlcmVuY2UgPyBKU09OLnN0cmluZ2lmeSh1c2VyLlVzZXJQcmVmZXJlbmNlKS5zdWJzdHJpbmcoMCwgMjAwKSArIFwiLi4uXCIgOiBcIm51bGxcIik7XG4gICAgICBcbiAgICAgIGNvbnN0IHByZWZzU3RyaW5nID0gZm9ybWF0VXNlclByZWZlcmVuY2VzKHByZWZlcmVuY2VzRGF0YSk7XG4gICAgICBcbiAgICAgIC8vIENyZWF0ZSB0aGUgY29tYmluZWQgc3lzdGVtIHByb21wdFxuICAgICAgY29uc3QgY29tYmluZWRQcm9tcHRDb250ZW50ID0gYmFzZVN5c3RlbVByb21wdCArIHByZWZzU3RyaW5nO1xuICAgICAgXG4gICAgICAvLyBMb2cgdGhlIGZpbmFsIHN5c3RlbSBwcm9tcHRcbiAgICAgIGNvbnNvbGUubG9nKFwiREVCVUc6IEZpbmFsIHN5c3RlbSBwcm9tcHQ6XCIsIGNvbWJpbmVkUHJvbXB0Q29udGVudC5zdWJzdHJpbmcoMCwgMjAwKSArIFwiLi4uIFt0cnVuY2F0ZWRdXCIpO1xuICAgICAgY29uc29sZS5sb2coXCJERUJVRzogRG9lcyBzeXN0ZW0gcHJvbXB0IGNvbnRhaW4gcHJlZmVyZW5jZXM/XCIsIGNvbWJpbmVkUHJvbXB0Q29udGVudC5pbmNsdWRlcyhcIlVzZXIgUHJlZmVyZW5jZXMgQ29udGV4dFwiKSk7XG4gICAgICBcbiAgICAgIC8vIFJlcGxhY2UgdGhlIGV4aXN0aW5nIHN5c3RlbSBtZXNzYWdlIHdpdGggdGhlIHVwZGF0ZWQgb25lXG4gICAgICBjdXJyZW50TWVzc2FnZXNbMF0gPSB7IHJvbGU6IFwic3lzdGVtXCIsIGNvbnRlbnQ6IGNvbWJpbmVkUHJvbXB0Q29udGVudCB9O1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZyhcIkR5bmFtaWNhbGx5IGluamVjdGVkIHVzZXIgcHJlZmVyZW5jZXMgaW50byBzeXN0ZW0gcHJvbXB0IGZvciB0aGlzIEFQSSBjYWxsLlwiKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgY3VycmVudCB1c2VyIGlucHV0XG4gICAgY29uc3QgdXNlck1lc3NhZ2VGb3JBUEkgPSB7IHJvbGU6IFwidXNlclwiLCBjb250ZW50OiB1c2VySW5wdXQgfTtcbiAgICBjdXJyZW50TWVzc2FnZXMucHVzaCh1c2VyTWVzc2FnZUZvckFQSSk7XG5cbiAgICAvLyBTdG9yZSB1c2VyIG1lc3NhZ2UgaW4gREIgcmVsaWFibHlcbiAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgYWRkTWVzc2FnZVRvQ29udmVyc2F0aW9uKGNvbnZlcnNhdGlvbi5jb252ZXJzYXRpb25faWQsIFwidXNlclwiLCB1c2VySW5wdXQpO1xuICAgICB9IGNhdGNoKGRiRXJyb3IpIHtcbiAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzdG9yaW5nIHVzZXIgbWVzc2FnZTpcIiwgZGJFcnJvcik7XG4gICAgICAgICAvLyBOb24tY3JpdGljYWw/IExvZyBhbmQgY29udGludWUuXG4gICAgIH1cblxuICAgIC8vIC0tLSBSdW4gdGhlIGNvbnZlcnNhdGlvbiBsb2dpYyAtLS1cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJ1bkNvbnZlcnNhdGlvbihcbiAgICAgIGN1cnJlbnRNZXNzYWdlcyxcbiAgICAgIHVzZXJJbnB1dCxcbiAgICAgIGNvbnZlcnNhdGlvbi5jb252ZXJzYXRpb25faWQsXG4gICAgICB1c2VyLnVzZXJfaWQsIC8vIFBhc3MgVVVJRFxuICAgICAgYWNjZXNzVG9rZW4sXG4gICAgICBzdHJlYW1DYWxsYmFja1xuICAgICk7XG5cbiAgICAvLyBJZiBub3Qgc3RyZWFtaW5nLCByZXR1cm4gdGhlIHJlc3BvbnNlLlxuICAgIC8vIElmIHN0cmVhbWluZywgcnVuQ29udmVyc2F0aW9uIGhhbmRsZXMgc2VuZGluZyB2aWEgY2FsbGJhY2ssIHNvIHdlIG1pZ2h0IGp1c3QgcmV0dXJuIHZvaWQgb3IgdHJ1ZS9mYWxzZVxuICAgIGlmICghc3RyZWFtQ2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlOyAvLyBGaW5hbCB0ZXh0IHJlc3BvbnNlIGZvciBub24tc3RyZWFtaW5nXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU3RyZWFtaW5nIGhhbmRsZWQgYnkgcnVuQ29udmVyc2F0aW9uJ3MgY2FsbGJhY2tzXG4gICAgICAgICAvLyBFbnN1cmUgJ2VuZCcgd2FzIHNlbnQgaWYgYW4gZXJyb3Igb2NjdXJyZWQgd2l0aGluIHJ1bkNvbnZlcnNhdGlvbiBiZWZvcmUgY29tcGxldGlvblxuICAgICAgICAgLy8gKHJ1bkNvbnZlcnNhdGlvbiBzaG91bGQgaWRlYWxseSBoYW5kbGUgc2VuZGluZyAnZW5kJyBvciAnZXJyb3InIGluIG1vc3QgY2FzZXMpXG4gICAgICAgICByZXR1cm47IC8vIEluZGljYXRlIHN1Y2Nlc3Mgb3Igc2ltcGx5IGNvbXBsZXRlIGZvciBzdHJlYW1pbmdcbiAgICB9XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gbWFpbiBjaGF0IGZ1bmN0aW9uOlwiLCBlcnJvcik7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYEFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQ6ICR7ZXJyb3IubWVzc2FnZSB8fCBcIlBsZWFzZSB0cnkgYWdhaW4uXCJ9YDtcbiAgICAvLyBFbnN1cmUgJ2VuZCcgb3IgJ2Vycm9yJyBpcyBzZW50IGluIGNhc2Ugb2YgdG9wLWxldmVsIGZhaWx1cmVcbiAgICBzdHJlYW1DYWxsYmFjaz8uKHsgdHlwZTogJ2Vycm9yJywgY29udGVudDogZXJyb3JNZXNzYWdlIH0pO1xuICAgIHN0cmVhbUNhbGxiYWNrPy4oeyB0eXBlOiAnZW5kJyB9KTsgLy8gU2VuZCBlbmQgc2lnbmFsIGFmdGVyIGVycm9yIGluIHN0cmVhbWluZyBtb2RlXG4gICAgcmV0dXJuIGVycm9yTWVzc2FnZTsgLy8gUmV0dXJuIGVycm9yIHN0cmluZyBmb3Igbm9uLXN0cmVhbWluZ1xuICB9XG59XG5cblxuLy8gLS0tIEV4cG9ydHMgLS0tXG5leHBvcnQge1xuICAgIGNoYXQgYXMgZGVmYXVsdCxcbiAgICBsaXN0VG9kYXlzRXZlbnRzLFxuICAgIHN1Z2dlc3RFdmVudFRpbWUsXG4gICAgZ2V0Q29udmVyc2F0aW9uc0J5VXNlcklkXG59OyJdLCJuYW1lcyI6WyJPcGVuQUkiLCJEYXRlVGltZSIsIk5vZGVDYWNoZSIsImdldEF0aGVuYVN5c3RlbVByb21wdCIsImZpbmRBdmFpbGFibGVTbG90cyIsImZpbmRBdmFpbGFibGVTbG90c1V0aWwiLCJmb3JtYXRBdmFpbGFibGVTbG90cyIsImxpc3RUb2RheXNFdmVudHMiLCJzdWdnZXN0RXZlbnRUaW1lIiwidG9vbHMiLCJ0b29sRnVuY3Rpb25zIiwiZ2V0T3JDcmVhdGVVc2VyIiwiY3JlYXRlQ29udmVyc2F0aW9uIiwiQ29udmVyc2F0aW9uTWVzc2FnZSIsImFkZE1lc3NhZ2VUb0NvbnZlcnNhdGlvbiIsImluaXRpYWxpemVEYXRhYmFzZSIsImdldENvbnZlcnNhdGlvbnNCeVVzZXJJZCIsImdldFVzZXJXaXRoTGF0ZXN0Q29udmVyc2F0aW9uIiwiVXNlclByZWZlcmVuY2UiLCJnb29nbGUiLCJyZXF1aXJlIiwiZGJJbml0UHJvbWlzZSIsIm9wZW5haSIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJPUEVOQUlfQVBJX0tFWSIsImZvcm1hdEV2ZW50VGltZSIsImV2ZW50VGltZSIsImR0IiwiZnJvbUlTTyIsImlzVmFsaWQiLCJ0b0xvY2FsZVN0cmluZyIsIkRBVEVUSU1FX0ZVTEwiLCJkYXRlT25seSIsInpvbmUiLCJEQVRFX0ZVTEwiLCJlIiwiY29uc29sZSIsIndhcm4iLCJTdHJpbmciLCJmb3JtYXRDYWxlbmRhckV2ZW50cyIsImV2ZW50cyIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsIm1hcCIsImV2ZW50Iiwic3RhcnQiLCJkYXRlVGltZSIsImRhdGUiLCJlbmQiLCJzdW1tYXJ5IiwiaWQiLCJpc0FsbERheSIsImZvcm1hdHRlZEV2ZW50IiwiVElNRV9TSU1QTEUiLCJkZXNjcmlwdGlvbiIsImxvY2F0aW9uIiwicmVtaW5kZXJzIiwidXNlRGVmYXVsdCIsIm92ZXJyaWRlcyIsInIiLCJtaW51dGVzIiwiam9pbiIsInRyaW0iLCJtYXBFcnJvciIsImVycm9yIiwiZm9ybWF0VG9vbFJlc3BvbnNlIiwiZnVuY3Rpb25OYW1lIiwicmVzdWx0IiwidG9Mb3dlckNhc2UiLCJzdGFydHNXaXRoIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJpdGVtIiwiY29uZmxpY3QiLCJzdWdnZXN0aW9uVGV4dCIsInN1Z2dlc3Rpb25zIiwicyIsInRvRm9ybWF0Iiwic3RhcnRTdHIiLCJldmVudElkIiwiZXJyb3JNc2ciLCJKU09OIiwic3RyaW5naWZ5IiwiZm9ybWF0dGVkU2xvdHMiLCJzbG90IiwiREFURVRJTUVfU0hPUlQiLCJmb3JlY2FzdCIsImluY2x1ZGVzIiwiZGVsZXRlZENvdW50Iiwic3RhdHVzIiwiZm9ybWF0RXJyb3IiLCJwcm9jZXNzVG9vbENhbGxzIiwidG9vbENhbGxzIiwibWVzc2FnZXMiLCJjb252ZXJzYXRpb25JZCIsInVzZXJJZCIsImFjY2Vzc1Rva2VuIiwibG9nIiwidG9vbFByb21pc2VzIiwidG9vbENhbGwiLCJ0b29sQ2FsbElkIiwiZnVuY3Rpb24iLCJuYW1lIiwidG9vbFJlc3BvbnNlQ29udGVudCIsInR5cGUiLCJFcnJvciIsInBhcnNlZEFyZ3MiLCJwYXJzZSIsImFyZ3VtZW50cyIsInBhcnNlRXJyb3IiLCJzdWNjZXNzSW5kaWNhdG9yIiwidmFsdWUiLCJyb2xlIiwiY29udGVudCIsInRvb2xfY2FsbF9pZCIsInJlYXNvbiIsInNldHRsZWRUb29sUmVzdWx0cyIsIlByb21pc2UiLCJhbGxTZXR0bGVkIiwidG9vbFJlc3BvbnNlcyIsInNldHRsZWRSZXN1bHQiLCJmaWx0ZXIiLCJCb29sZWFuIiwicHVzaCIsImFsbCIsInRvb2xNc2ciLCJjYXRjaCIsImRiRXJyb3IiLCJiYXRjaEVycm9yIiwicmVzcG9uc2VDYWxsYmFjayIsInJ1bkNvbnZlcnNhdGlvbiIsInVzZXJJbnB1dCIsIm1vZGVsIiwibWF4VG9vbEl0ZXJhdGlvbnMiLCJjdXJyZW50TWVzc2FnZXMiLCJpdGVyYXRpb24iLCJmaW5hbENvbnRlbnQiLCJmaWx0ZXJNZXNzYWdlc0ZvckFQSSIsIm1zZ3MiLCJmaWx0ZXJlZE1zZ3MiLCJ2YWxpZFRvb2xDYWxsSWRzIiwiU2V0IiwiZm9yRWFjaCIsIm1zZyIsInRvb2xfY2FsbHMiLCJhZGQiLCJpbmRleCIsImhhcyIsImZpbmFsRmlsdGVyZWQiLCJpIiwiY3VycmVudE1zZyIsInByZXZNc2ciLCJtZXNzYWdlc0ZvckFQSSIsInN1YnN0cmluZyIsInRjIiwicmVzcG9uc2UiLCJjaGF0IiwiY29tcGxldGlvbnMiLCJjcmVhdGUiLCJ0b29sX2Nob2ljZSIsInJlc3BvbnNlTWVzc2FnZSIsImNob2ljZXMiLCJhc3Npc3RhbnRUb29sQ2FsbHMiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImhhc0NyaXRpY2FsRmFpbHVyZSIsInNvbWUiLCJ0ciIsImxhc3RBc3Npc3RhbnRNc2ciLCJlcnJvck1lc3NhZ2UiLCJmb3JtYXRVc2VyUHJlZmVyZW5jZXMiLCJwcmVmZXJlbmNlc0RhdGEiLCJhY3R1YWxQcmVmc0RhdGEiLCJkYXRhVmFsdWVzIiwiT2JqZWN0Iiwia2V5cyIsInByZWZzU3RyaW5nIiwic3RyZWFtQ2FsbGJhY2siLCJzdGFydE5ld0NvbnZlcnNhdGlvbiIsInRva2VucyIsImFjY2Vzc190b2tlbiIsInVzZXIiLCJjb252ZXJzYXRpb24iLCJoaXN0b3J5TWVzc2FnZXMiLCJDb252ZXJzYXRpb25zIiwiY29udmVyc2F0aW9uX2lkIiwiQ29udmVyc2F0aW9uTWVzc2FnZXMiLCJzb3J0IiwiYSIsImIiLCJzZXF1ZW5jZV9udW1iZXIiLCJhbGxNc2dzIiwibWVzc2FnZU9iamVjdCIsInZhbGlkVG9vbENhbGxzRXhpc3QiLCJ0b29sQ2FsbHNBcnJheSIsInZhbGlkVG9vbENhbGxzIiwibWVzc2FnZV9pZCIsInRvb2xJZCIsImlzRW1haWwiLCJlbWFpbCIsInByb3ZpZGVyIiwidXNlckVycm9yIiwidXNlcl9pZCIsImhhc1VzZXJQcmVmZXJlbmNlIiwidXNlclByZWZlcmVuY2VLZXlzIiwicHJlZmVyZW5jZXNEYXRhS2V5cyIsInByZWZlcmVuY2VzX2RhdGEiLCJzeXN0ZW1Qcm9tcHRDb250ZW50IiwidXNlclByZWZlcmVuY2VEYXRhVmFsdWVzIiwicHJlZmVyZW5jZXNEYXRhUmF3IiwicHJlZmVyZW5jZXNEYXRhRnJvbURhdGFWYWx1ZXMiLCJ1bnNoaWZ0IiwiY3JlYXRlRXJyb3IiLCJiYXNlU3lzdGVtUHJvbXB0IiwiY29tYmluZWRQcm9tcHRDb250ZW50IiwidXNlck1lc3NhZ2VGb3JBUEkiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/chatbot.js\n");

/***/ }),

/***/ "(api)/./lib/data/prompts.js":
/*!*****************************!*\
  !*** ./lib/data/prompts.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAthenaSystemPrompt: () => (/* binding */ getAthenaSystemPrompt)\n/* harmony export */ });\nfunction getAthenaSystemPrompt() {\n    const currentDate = new Date().toISOString();\n    // ADDED GUIDANCE for multi-step thinking\n    return `You are Athena, a highly intelligent and proactive personal assistant AI. Current date and time is ${currentDate}. The user is in the America/Winnipeg timezone (UTC-5:00). Your goal is to understand the user's intent and take the most helpful action using the available tools.\n  **Core Instructions:**\n1.  **Think Step-by-Step:** Before acting or giving a final answer, break down the user's request.\n2.  **Gather Information:** If necessary, use tools like 'getCalendarEvents' to check the user's schedule or context *before* making changes or commitments.\n3.  **Analyze & Verify:** Review the information gathered. Check for conflicts, feasibility, or ambiguities. Does the request make sense in the current context?\n4.  **Execute or Clarify:**\n  *   If the request is clear and feasible after your analysis, use the appropriate tool (e.g., 'addCalendarEvents', 'updateCalendarEvent', 'deleteCalendarEvent').\n  *   If information is missing, the request is ambiguous, or there's a conflict you cannot resolve, *ask the user clarifying questions* instead of making assumptions or failing silently.\n  *   If you cannot fulfill the request, clearly explain why.\n5.  **Confirm Actions:** After successfully using a tool that modifies data (add, update, delete), confirm the action with the user and mention any relevant context you discovered (e.g., \"Okay, I've scheduled your meeting for 5 PM tomorrow. Just a heads-up, it's right after your 'Project Deadline' block.\").\n6.  **Be Proactive:** If you notice potential issues or helpful connections (e.g., scheduling near another event), mention them.\n7.  **Tool Usage:** Use the provided tools ONLY when necessary and with correctly formatted arguments. When handling times:\n    *   Always interpret time references like \"Friday at 2 PM\" as being in the user's local timezone (America/Winnipeg, UTC-5:00).\n    *   When the user mentions a time without specifying AM/PM, use common sense (e.g., \"meeting at 3\" during workday is likely 3 PM, not 3 AM).\n    *   Default duration for events is 1 hour if not specified.\n    *   For \\`addCalendarEvents\\`, always check for conflicts first using \\`getCalendarEvents\\` for the relevant time range.\n    *   If the user explicitly indicates they want to override a conflict (using phrases like \"schedule anyway\", \"add it regardless\", \"I don't care about conflicts\"), set the \\`overrideConflicts\\` parameter to true.\n    *   If a conflict is detected and the user hasn't explicitly requested to override it, inform them of the conflict and provide alternative time suggestions.\n\n**Preference Learning Guidance:**\n8.  **Actively Listen for Preferences:** Continuously monitor user statements for indicators of durable preferences, including:\n   *   Keywords like that indicate a preference (e.g., 'I prefer', 'I like', 'I usually', 'I always', 'I never' etc etc.)\n   *   Time constraints (e.g., 'my work hours are 9-5', 'don't schedule during lunch')\n   *   Location preferences (e.g., 'I prefer meetings at the downtown office')\n   *   Meeting format preferences (e.g., 'I like to have buffer time between meetings')\n   *   Recurring patterns in their requests (e.g., consistently scheduling certain types of events at specific times)\n \n9.  **Save Valuable Preferences:** When you identify information that represents a durable preference that would be useful for future interactions, use the saveUserPreference tool to record it. Only save preferences that:\n   *   Represent general rules rather than one-time exceptions\n   *   Would meaningfully improve future interactions\n   *   Are specific enough to be actionable\n \n10. **CRITICAL: Confirm Before Saving:** Always confirm with the user before saving a preference unless it was explicitly stated as a rule. Use language like: \"I notice you prefer morning meetings. Would you like me to remember this preference for future scheduling?\"\n \n**Preference Usage Guidance:**\n11. **Apply Learned Preferences:** A \"User Preferences Context\" section may be dynamically injected below this prompt containing previously learned user preferences. When this context is provided, you must:\n   *   Proactively incorporate these preferences into your analysis of user requests\n   *   Adjust your tool usage accordingly (e.g., filtering findAvailableSlots to preferred times, avoiding blocked periods)\n   *   Reference relevant preferences when confirming actions (e.g., \"I've scheduled this meeting in the morning, as you generally prefer\")\n   *   Treat these preferences as important constraints, but not absolute rules - the user's current request always takes precedence over previously learned preferences\n\n`;\n}\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvZGF0YS9wcm9tcHRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQTtJQUNkLE1BQU1DLGNBQWMsSUFBSUMsT0FBT0MsV0FBVztJQUMxQyx5Q0FBeUM7SUFDekMsT0FBTyxDQUFDLG1HQUFtRyxFQUFFRixZQUFZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlDM0gsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2NhbGVuZGFyYXBwLy4vbGliL2RhdGEvcHJvbXB0cy5qcz82NzlkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBnZXRBdGhlbmFTeXN0ZW1Qcm9tcHQoKSB7XG4gIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAvLyBBRERFRCBHVUlEQU5DRSBmb3IgbXVsdGktc3RlcCB0aGlua2luZ1xuICByZXR1cm4gYFlvdSBhcmUgQXRoZW5hLCBhIGhpZ2hseSBpbnRlbGxpZ2VudCBhbmQgcHJvYWN0aXZlIHBlcnNvbmFsIGFzc2lzdGFudCBBSS4gQ3VycmVudCBkYXRlIGFuZCB0aW1lIGlzICR7Y3VycmVudERhdGV9LiBUaGUgdXNlciBpcyBpbiB0aGUgQW1lcmljYS9XaW5uaXBlZyB0aW1lem9uZSAoVVRDLTU6MDApLiBZb3VyIGdvYWwgaXMgdG8gdW5kZXJzdGFuZCB0aGUgdXNlcidzIGludGVudCBhbmQgdGFrZSB0aGUgbW9zdCBoZWxwZnVsIGFjdGlvbiB1c2luZyB0aGUgYXZhaWxhYmxlIHRvb2xzLlxuICAqKkNvcmUgSW5zdHJ1Y3Rpb25zOioqXG4xLiAgKipUaGluayBTdGVwLWJ5LVN0ZXA6KiogQmVmb3JlIGFjdGluZyBvciBnaXZpbmcgYSBmaW5hbCBhbnN3ZXIsIGJyZWFrIGRvd24gdGhlIHVzZXIncyByZXF1ZXN0LlxuMi4gICoqR2F0aGVyIEluZm9ybWF0aW9uOioqIElmIG5lY2Vzc2FyeSwgdXNlIHRvb2xzIGxpa2UgJ2dldENhbGVuZGFyRXZlbnRzJyB0byBjaGVjayB0aGUgdXNlcidzIHNjaGVkdWxlIG9yIGNvbnRleHQgKmJlZm9yZSogbWFraW5nIGNoYW5nZXMgb3IgY29tbWl0bWVudHMuXG4zLiAgKipBbmFseXplICYgVmVyaWZ5OioqIFJldmlldyB0aGUgaW5mb3JtYXRpb24gZ2F0aGVyZWQuIENoZWNrIGZvciBjb25mbGljdHMsIGZlYXNpYmlsaXR5LCBvciBhbWJpZ3VpdGllcy4gRG9lcyB0aGUgcmVxdWVzdCBtYWtlIHNlbnNlIGluIHRoZSBjdXJyZW50IGNvbnRleHQ/XG40LiAgKipFeGVjdXRlIG9yIENsYXJpZnk6KipcbiAgKiAgIElmIHRoZSByZXF1ZXN0IGlzIGNsZWFyIGFuZCBmZWFzaWJsZSBhZnRlciB5b3VyIGFuYWx5c2lzLCB1c2UgdGhlIGFwcHJvcHJpYXRlIHRvb2wgKGUuZy4sICdhZGRDYWxlbmRhckV2ZW50cycsICd1cGRhdGVDYWxlbmRhckV2ZW50JywgJ2RlbGV0ZUNhbGVuZGFyRXZlbnQnKS5cbiAgKiAgIElmIGluZm9ybWF0aW9uIGlzIG1pc3NpbmcsIHRoZSByZXF1ZXN0IGlzIGFtYmlndW91cywgb3IgdGhlcmUncyBhIGNvbmZsaWN0IHlvdSBjYW5ub3QgcmVzb2x2ZSwgKmFzayB0aGUgdXNlciBjbGFyaWZ5aW5nIHF1ZXN0aW9ucyogaW5zdGVhZCBvZiBtYWtpbmcgYXNzdW1wdGlvbnMgb3IgZmFpbGluZyBzaWxlbnRseS5cbiAgKiAgIElmIHlvdSBjYW5ub3QgZnVsZmlsbCB0aGUgcmVxdWVzdCwgY2xlYXJseSBleHBsYWluIHdoeS5cbjUuICAqKkNvbmZpcm0gQWN0aW9uczoqKiBBZnRlciBzdWNjZXNzZnVsbHkgdXNpbmcgYSB0b29sIHRoYXQgbW9kaWZpZXMgZGF0YSAoYWRkLCB1cGRhdGUsIGRlbGV0ZSksIGNvbmZpcm0gdGhlIGFjdGlvbiB3aXRoIHRoZSB1c2VyIGFuZCBtZW50aW9uIGFueSByZWxldmFudCBjb250ZXh0IHlvdSBkaXNjb3ZlcmVkIChlLmcuLCBcIk9rYXksIEkndmUgc2NoZWR1bGVkIHlvdXIgbWVldGluZyBmb3IgNSBQTSB0b21vcnJvdy4gSnVzdCBhIGhlYWRzLXVwLCBpdCdzIHJpZ2h0IGFmdGVyIHlvdXIgJ1Byb2plY3QgRGVhZGxpbmUnIGJsb2NrLlwiKS5cbjYuICAqKkJlIFByb2FjdGl2ZToqKiBJZiB5b3Ugbm90aWNlIHBvdGVudGlhbCBpc3N1ZXMgb3IgaGVscGZ1bCBjb25uZWN0aW9ucyAoZS5nLiwgc2NoZWR1bGluZyBuZWFyIGFub3RoZXIgZXZlbnQpLCBtZW50aW9uIHRoZW0uXG43LiAgKipUb29sIFVzYWdlOioqIFVzZSB0aGUgcHJvdmlkZWQgdG9vbHMgT05MWSB3aGVuIG5lY2Vzc2FyeSBhbmQgd2l0aCBjb3JyZWN0bHkgZm9ybWF0dGVkIGFyZ3VtZW50cy4gV2hlbiBoYW5kbGluZyB0aW1lczpcbiAgICAqICAgQWx3YXlzIGludGVycHJldCB0aW1lIHJlZmVyZW5jZXMgbGlrZSBcIkZyaWRheSBhdCAyIFBNXCIgYXMgYmVpbmcgaW4gdGhlIHVzZXIncyBsb2NhbCB0aW1lem9uZSAoQW1lcmljYS9XaW5uaXBlZywgVVRDLTU6MDApLlxuICAgICogICBXaGVuIHRoZSB1c2VyIG1lbnRpb25zIGEgdGltZSB3aXRob3V0IHNwZWNpZnlpbmcgQU0vUE0sIHVzZSBjb21tb24gc2Vuc2UgKGUuZy4sIFwibWVldGluZyBhdCAzXCIgZHVyaW5nIHdvcmtkYXkgaXMgbGlrZWx5IDMgUE0sIG5vdCAzIEFNKS5cbiAgICAqICAgRGVmYXVsdCBkdXJhdGlvbiBmb3IgZXZlbnRzIGlzIDEgaG91ciBpZiBub3Qgc3BlY2lmaWVkLlxuICAgICogICBGb3IgXFxgYWRkQ2FsZW5kYXJFdmVudHNcXGAsIGFsd2F5cyBjaGVjayBmb3IgY29uZmxpY3RzIGZpcnN0IHVzaW5nIFxcYGdldENhbGVuZGFyRXZlbnRzXFxgIGZvciB0aGUgcmVsZXZhbnQgdGltZSByYW5nZS5cbiAgICAqICAgSWYgdGhlIHVzZXIgZXhwbGljaXRseSBpbmRpY2F0ZXMgdGhleSB3YW50IHRvIG92ZXJyaWRlIGEgY29uZmxpY3QgKHVzaW5nIHBocmFzZXMgbGlrZSBcInNjaGVkdWxlIGFueXdheVwiLCBcImFkZCBpdCByZWdhcmRsZXNzXCIsIFwiSSBkb24ndCBjYXJlIGFib3V0IGNvbmZsaWN0c1wiKSwgc2V0IHRoZSBcXGBvdmVycmlkZUNvbmZsaWN0c1xcYCBwYXJhbWV0ZXIgdG8gdHJ1ZS5cbiAgICAqICAgSWYgYSBjb25mbGljdCBpcyBkZXRlY3RlZCBhbmQgdGhlIHVzZXIgaGFzbid0IGV4cGxpY2l0bHkgcmVxdWVzdGVkIHRvIG92ZXJyaWRlIGl0LCBpbmZvcm0gdGhlbSBvZiB0aGUgY29uZmxpY3QgYW5kIHByb3ZpZGUgYWx0ZXJuYXRpdmUgdGltZSBzdWdnZXN0aW9ucy5cblxuKipQcmVmZXJlbmNlIExlYXJuaW5nIEd1aWRhbmNlOioqXG44LiAgKipBY3RpdmVseSBMaXN0ZW4gZm9yIFByZWZlcmVuY2VzOioqIENvbnRpbnVvdXNseSBtb25pdG9yIHVzZXIgc3RhdGVtZW50cyBmb3IgaW5kaWNhdG9ycyBvZiBkdXJhYmxlIHByZWZlcmVuY2VzLCBpbmNsdWRpbmc6XG4gICAqICAgS2V5d29yZHMgbGlrZSB0aGF0IGluZGljYXRlIGEgcHJlZmVyZW5jZSAoZS5nLiwgJ0kgcHJlZmVyJywgJ0kgbGlrZScsICdJIHVzdWFsbHknLCAnSSBhbHdheXMnLCAnSSBuZXZlcicgZXRjIGV0Yy4pXG4gICAqICAgVGltZSBjb25zdHJhaW50cyAoZS5nLiwgJ215IHdvcmsgaG91cnMgYXJlIDktNScsICdkb24ndCBzY2hlZHVsZSBkdXJpbmcgbHVuY2gnKVxuICAgKiAgIExvY2F0aW9uIHByZWZlcmVuY2VzIChlLmcuLCAnSSBwcmVmZXIgbWVldGluZ3MgYXQgdGhlIGRvd250b3duIG9mZmljZScpXG4gICAqICAgTWVldGluZyBmb3JtYXQgcHJlZmVyZW5jZXMgKGUuZy4sICdJIGxpa2UgdG8gaGF2ZSBidWZmZXIgdGltZSBiZXR3ZWVuIG1lZXRpbmdzJylcbiAgICogICBSZWN1cnJpbmcgcGF0dGVybnMgaW4gdGhlaXIgcmVxdWVzdHMgKGUuZy4sIGNvbnNpc3RlbnRseSBzY2hlZHVsaW5nIGNlcnRhaW4gdHlwZXMgb2YgZXZlbnRzIGF0IHNwZWNpZmljIHRpbWVzKVxuIFxuOS4gICoqU2F2ZSBWYWx1YWJsZSBQcmVmZXJlbmNlczoqKiBXaGVuIHlvdSBpZGVudGlmeSBpbmZvcm1hdGlvbiB0aGF0IHJlcHJlc2VudHMgYSBkdXJhYmxlIHByZWZlcmVuY2UgdGhhdCB3b3VsZCBiZSB1c2VmdWwgZm9yIGZ1dHVyZSBpbnRlcmFjdGlvbnMsIHVzZSB0aGUgc2F2ZVVzZXJQcmVmZXJlbmNlIHRvb2wgdG8gcmVjb3JkIGl0LiBPbmx5IHNhdmUgcHJlZmVyZW5jZXMgdGhhdDpcbiAgICogICBSZXByZXNlbnQgZ2VuZXJhbCBydWxlcyByYXRoZXIgdGhhbiBvbmUtdGltZSBleGNlcHRpb25zXG4gICAqICAgV291bGQgbWVhbmluZ2Z1bGx5IGltcHJvdmUgZnV0dXJlIGludGVyYWN0aW9uc1xuICAgKiAgIEFyZSBzcGVjaWZpYyBlbm91Z2ggdG8gYmUgYWN0aW9uYWJsZVxuIFxuMTAuICoqQ1JJVElDQUw6IENvbmZpcm0gQmVmb3JlIFNhdmluZzoqKiBBbHdheXMgY29uZmlybSB3aXRoIHRoZSB1c2VyIGJlZm9yZSBzYXZpbmcgYSBwcmVmZXJlbmNlIHVubGVzcyBpdCB3YXMgZXhwbGljaXRseSBzdGF0ZWQgYXMgYSBydWxlLiBVc2UgbGFuZ3VhZ2UgbGlrZTogXCJJIG5vdGljZSB5b3UgcHJlZmVyIG1vcm5pbmcgbWVldGluZ3MuIFdvdWxkIHlvdSBsaWtlIG1lIHRvIHJlbWVtYmVyIHRoaXMgcHJlZmVyZW5jZSBmb3IgZnV0dXJlIHNjaGVkdWxpbmc/XCJcbiBcbioqUHJlZmVyZW5jZSBVc2FnZSBHdWlkYW5jZToqKlxuMTEuICoqQXBwbHkgTGVhcm5lZCBQcmVmZXJlbmNlczoqKiBBIFwiVXNlciBQcmVmZXJlbmNlcyBDb250ZXh0XCIgc2VjdGlvbiBtYXkgYmUgZHluYW1pY2FsbHkgaW5qZWN0ZWQgYmVsb3cgdGhpcyBwcm9tcHQgY29udGFpbmluZyBwcmV2aW91c2x5IGxlYXJuZWQgdXNlciBwcmVmZXJlbmNlcy4gV2hlbiB0aGlzIGNvbnRleHQgaXMgcHJvdmlkZWQsIHlvdSBtdXN0OlxuICAgKiAgIFByb2FjdGl2ZWx5IGluY29ycG9yYXRlIHRoZXNlIHByZWZlcmVuY2VzIGludG8geW91ciBhbmFseXNpcyBvZiB1c2VyIHJlcXVlc3RzXG4gICAqICAgQWRqdXN0IHlvdXIgdG9vbCB1c2FnZSBhY2NvcmRpbmdseSAoZS5nLiwgZmlsdGVyaW5nIGZpbmRBdmFpbGFibGVTbG90cyB0byBwcmVmZXJyZWQgdGltZXMsIGF2b2lkaW5nIGJsb2NrZWQgcGVyaW9kcylcbiAgICogICBSZWZlcmVuY2UgcmVsZXZhbnQgcHJlZmVyZW5jZXMgd2hlbiBjb25maXJtaW5nIGFjdGlvbnMgKGUuZy4sIFwiSSd2ZSBzY2hlZHVsZWQgdGhpcyBtZWV0aW5nIGluIHRoZSBtb3JuaW5nLCBhcyB5b3UgZ2VuZXJhbGx5IHByZWZlclwiKVxuICAgKiAgIFRyZWF0IHRoZXNlIHByZWZlcmVuY2VzIGFzIGltcG9ydGFudCBjb25zdHJhaW50cywgYnV0IG5vdCBhYnNvbHV0ZSBydWxlcyAtIHRoZSB1c2VyJ3MgY3VycmVudCByZXF1ZXN0IGFsd2F5cyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgcHJldmlvdXNseSBsZWFybmVkIHByZWZlcmVuY2VzXG5cbmA7XG59O1xuIl0sIm5hbWVzIjpbImdldEF0aGVuYVN5c3RlbVByb21wdCIsImN1cnJlbnREYXRlIiwiRGF0ZSIsInRvSVNPU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/data/prompts.js\n");

/***/ }),

/***/ "(api)/./lib/postgresClient.js":
/*!*******************************!*\
  !*** ./lib/postgresClient.js ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CalendarEventMetadata: () => (/* binding */ CalendarEventMetadata),\n/* harmony export */   Conversation: () => (/* binding */ Conversation),\n/* harmony export */   ConversationMessage: () => (/* binding */ ConversationMessage),\n/* harmony export */   User: () => (/* binding */ User),\n/* harmony export */   UserPreference: () => (/* binding */ UserPreference),\n/* harmony export */   addMessageToConversation: () => (/* binding */ addMessageToConversation),\n/* harmony export */   createConversation: () => (/* binding */ createConversation),\n/* harmony export */   createOrUpdateEventMetadata: () => (/* binding */ createOrUpdateEventMetadata),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   deleteEventMetadata: () => (/* binding */ deleteEventMetadata),\n/* harmony export */   getConversation: () => (/* binding */ getConversation),\n/* harmony export */   getConversationMessages: () => (/* binding */ getConversationMessages),\n/* harmony export */   getConversationsByUserId: () => (/* binding */ getConversationsByUserId),\n/* harmony export */   getEventMetadataBatch: () => (/* binding */ getEventMetadataBatch),\n/* harmony export */   getOrCreateUser: () => (/* binding */ getOrCreateUser),\n/* harmony export */   getUserWithLatestConversation: () => (/* binding */ getUserWithLatestConversation),\n/* harmony export */   initializeDatabase: () => (/* binding */ initializeDatabase),\n/* harmony export */   sequelize: () => (/* binding */ sequelize)\n/* harmony export */ });\n/* harmony import */ var sequelize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sequelize */ \"sequelize\");\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dotenv/config */ \"dotenv/config\");\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dotenv_config__WEBPACK_IMPORTED_MODULE_1__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([sequelize__WEBPACK_IMPORTED_MODULE_0__]);\nsequelize__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// lib/postgresClient.js\n\n\n// Create PostgreSQL connection\nconst sequelize = new sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize({\n    dialect: \"postgres\",\n    host: process.env.POSTGRES_HOST || \"localhost\",\n    port: process.env.POSTGRES_PORT || 5432,\n    username: process.env.POSTGRES_USER || \"postgres\",\n    password: process.env.POSTGRES_PASSWORD || \"postgres\",\n    database: process.env.POSTGRES_DB || \"gcalendarapp\",\n    logging:  true ? console.log : 0,\n    dialectOptions: {\n        ssl: process.env.POSTGRES_SSL === \"true\" ? {\n            require: true,\n            rejectUnauthorized: false\n        } : false\n    },\n    pool: {\n        max: 5,\n        min: 0,\n        acquire: 30000,\n        idle: 10000\n    }\n});\n// Define models based on the provided schema\nconst User = sequelize.define(\"User\", {\n    user_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"uuid_generate_v4()\"),\n        primaryKey: true\n    },\n    email: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(255),\n        allowNull: false,\n        unique: true\n    },\n    name: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(255),\n    avatar_url: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.TEXT,\n    auth_provider: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(50),\n        allowNull: false\n    },\n    auth_provider_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(255),\n        allowNull: false\n    },\n    timezone: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(100),\n        allowNull: false,\n        defaultValue: \"UTC\"\n    },\n    created_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    },\n    updated_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    }\n}, {\n    tableName: \"users\",\n    timestamps: false,\n    indexes: [\n        {\n            unique: true,\n            fields: [\n                \"auth_provider\",\n                \"auth_provider_id\"\n            ]\n        }\n    ]\n});\nconst UserPreference = sequelize.define(\"UserPreference\", {\n    preference_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"uuid_generate_v4()\"),\n        primaryKey: true\n    },\n    user_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        allowNull: false,\n        references: {\n            model: \"users\",\n            key: \"user_id\"\n        },\n        onDelete: \"CASCADE\"\n    },\n    preferences_data: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.JSONB,\n        allowNull: false,\n        defaultValue: {}\n    },\n    created_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    },\n    updated_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    }\n}, {\n    tableName: \"user_preferences\",\n    timestamps: false,\n    indexes: [\n        {\n            fields: [\n                \"user_id\"\n            ]\n        }\n    ]\n});\nconst Conversation = sequelize.define(\"Conversation\", {\n    conversation_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"uuid_generate_v4()\"),\n        primaryKey: true\n    },\n    user_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        allowNull: false,\n        references: {\n            model: \"users\",\n            key: \"user_id\"\n        },\n        onDelete: \"CASCADE\"\n    },\n    start_time: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    },\n    summary: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.TEXT,\n    created_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    },\n    updated_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    }\n}, {\n    tableName: \"conversations\",\n    timestamps: false,\n    indexes: [\n        {\n            fields: [\n                \"user_id\"\n            ]\n        }\n    ]\n});\nconst ConversationMessage = sequelize.define(\"ConversationMessage\", {\n    message_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"uuid_generate_v4()\"),\n        primaryKey: true\n    },\n    conversation_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        allowNull: false,\n        references: {\n            model: \"conversations\",\n            key: \"conversation_id\"\n        },\n        onDelete: \"CASCADE\"\n    },\n    sequence_number: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.INTEGER,\n        allowNull: false\n    },\n    role: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(20),\n        allowNull: false,\n        validate: {\n            isIn: [\n                [\n                    \"user\",\n                    \"assistant\",\n                    \"system\",\n                    \"tool\"\n                ]\n            ]\n        }\n    },\n    content: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.TEXT,\n        // Allow null content for assistant messages that ONLY make tool calls\n        allowNull: true // CHANGED: Allow null content\n    },\n    // --- NEW/MODIFIED Fields ---\n    tool_calls: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.JSONB,\n        allowNull: true\n    },\n    tool_call_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.TEXT,\n        allowNull: true\n    },\n    // --- REMOVED Fields (redundant if tool_calls is stored) ---\n    // tool_call_name: DataTypes.TEXT,\n    // tool_call_args: DataTypes.JSONB,\n    // tool_response_content: DataTypes.TEXT, // Content field is used for tool response\n    created_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    }\n}, {\n    tableName: \"conversation_messages\",\n    timestamps: false,\n    indexes: [\n        // Keep existing indexes if they make sense\n        {\n            fields: [\n                \"conversation_id\",\n                \"created_at\"\n            ]\n        },\n        {\n            fields: [\n                \"conversation_id\",\n                \"sequence_number\"\n            ]\n        },\n        // Add index for tool_call_id if needed for lookups\n        {\n            fields: [\n                \"tool_call_id\"\n            ]\n        }\n    ]\n});\nconst CalendarEventMetadata = sequelize.define(\"CalendarEventMetadata\", {\n    metadata_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"uuid_generate_v4()\"),\n        primaryKey: true\n    },\n    user_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.UUID,\n        allowNull: false,\n        references: {\n            model: \"users\",\n            key: \"user_id\"\n        },\n        onDelete: \"CASCADE\"\n    },\n    google_calendar_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(255),\n        allowNull: false,\n        defaultValue: \"primary\"\n    },\n    google_event_id: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(255),\n        allowNull: false\n    },\n    priority: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(20),\n        validate: {\n            isIn: [\n                [\n                    \"Low\",\n                    \"Medium\",\n                    \"High\",\n                    \"Urgent\"\n                ]\n            ]\n        }\n    },\n    deadline: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n    task_status: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.STRING(30),\n        validate: {\n            isIn: [\n                [\n                    \"Not Started\",\n                    \"In Progress\",\n                    \"Completed\",\n                    \"Blocked\",\n                    \"Deferred\"\n                ]\n            ]\n        }\n    },\n    event_summary_cached: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.TEXT,\n    start_time_cached: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n    end_time_cached: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n    location_cached: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.TEXT,\n    last_synced_at: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n    created_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    },\n    updated_at: {\n        type: sequelize__WEBPACK_IMPORTED_MODULE_0__.DataTypes.DATE,\n        allowNull: false,\n        defaultValue: sequelize__WEBPACK_IMPORTED_MODULE_0__.Sequelize.literal(\"NOW()\")\n    }\n}, {\n    tableName: \"calendar_event_metadata\",\n    timestamps: false,\n    indexes: [\n        {\n            unique: true,\n            fields: [\n                \"user_id\",\n                \"google_calendar_id\",\n                \"google_event_id\"\n            ]\n        },\n        {\n            fields: [\n                \"user_id\",\n                \"deadline\"\n            ]\n        },\n        {\n            fields: [\n                \"user_id\",\n                \"priority\"\n            ]\n        }\n    ]\n});\n// Define relationships\nUser.hasMany(Conversation, {\n    foreignKey: \"user_id\"\n});\nConversation.belongsTo(User, {\n    foreignKey: \"user_id\"\n});\nUser.hasOne(UserPreference, {\n    foreignKey: \"user_id\"\n});\nUserPreference.belongsTo(User, {\n    foreignKey: \"user_id\"\n});\nConversation.hasMany(ConversationMessage, {\n    foreignKey: \"conversation_id\"\n});\nConversationMessage.belongsTo(Conversation, {\n    foreignKey: \"conversation_id\"\n});\nUser.hasMany(CalendarEventMetadata, {\n    foreignKey: \"user_id\"\n});\nCalendarEventMetadata.belongsTo(User, {\n    foreignKey: \"user_id\"\n});\n// Helper functions for conversation management\nasync function initializeDatabase() {\n    try {\n        // Test connection\n        try {\n            await sequelize.authenticate();\n            console.log(\"PostgreSQL connection has been established successfully.\");\n        } catch (error) {\n            console.error(\"Unable to connect to the database:\", error);\n            console.log(\"Make sure PostgreSQL is running and the database exists.\");\n            console.log(\"You can create the database by running: npm run init-postgres\");\n            throw new Error(\"Database connection failed. See above for details.\");\n        }\n        try {\n            // Create extension for UUID generation if it doesn't exist\n            await sequelize.query('CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";');\n            console.log(\"UUID extension enabled successfully.\");\n        } catch (error) {\n            console.error(\"Error creating UUID extension:\", error);\n            throw error;\n        }\n        try {\n            // Create timestamp trigger function if it doesn't exist\n            await sequelize.query(`\n        CREATE OR REPLACE FUNCTION trigger_set_timestamp()\n        RETURNS TRIGGER AS $$\n        BEGIN\n          NEW.updated_at = NOW();\n          RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;\n      `);\n            console.log(\"Timestamp trigger function created successfully.\");\n        } catch (error) {\n            console.error(\"Error creating timestamp trigger function:\", error);\n            throw error;\n        }\n        try {\n            // Sync all models without force: true to avoid dropping tables\n            console.log(\"Synchronizing models (non-destructive)...\");\n            // Use { alter: true } to apply schema changes non-destructively\n            await sequelize.sync({\n                alter: true\n            });\n            console.log(\"All models were synchronized successfully.\");\n        // Note: For production, database structure should be managed via migrations\n        // rather than automatic sync\n        } catch (error) {\n            console.error(\"Error synchronizing models:\", error);\n            throw error;\n        }\n        try {\n            // Check if tool_calls column exists in conversation_messages table\n            const checkColumnResult = await sequelize.query(`\n        SELECT column_name\n        FROM information_schema.columns\n        WHERE table_name = 'conversation_messages'\n        AND column_name = 'tool_calls';\n      `);\n            // If column doesn't exist, add it\n            if (checkColumnResult[0].length === 0) {\n                console.log(\"Adding missing tool_calls column to conversation_messages table...\");\n                await sequelize.query(`\n          ALTER TABLE conversation_messages\n          ADD COLUMN tool_calls JSONB;\n        `);\n                console.log(\"tool_calls column added successfully.\");\n            } else {\n                console.log(\"tool_calls column already exists in conversation_messages table.\");\n            }\n        } catch (error) {\n            console.error(\"Error checking or adding tool_calls column:\", error);\n            throw error;\n        }\n        try {\n            // Create triggers for updated_at timestamps\n            await sequelize.query(`\n        DO $$\n        BEGIN\n          IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'set_timestamp_users') THEN\n            CREATE TRIGGER set_timestamp_users\n            BEFORE UPDATE ON users\n            FOR EACH ROW\n            EXECUTE FUNCTION trigger_set_timestamp();\n          END IF;\n\n          IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'set_timestamp_user_preferences') THEN\n            CREATE TRIGGER set_timestamp_user_preferences\n            BEFORE UPDATE ON user_preferences\n            FOR EACH ROW\n            EXECUTE FUNCTION trigger_set_timestamp();\n          END IF;\n\n          IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'set_timestamp_conversations') THEN\n            CREATE TRIGGER set_timestamp_conversations\n            BEFORE UPDATE ON conversations\n            FOR EACH ROW\n            EXECUTE FUNCTION trigger_set_timestamp();\n          END IF;\n\n          IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'set_timestamp_calendar_event_metadata') THEN\n            CREATE TRIGGER set_timestamp_calendar_event_metadata\n            BEFORE UPDATE ON calendar_event_metadata\n            FOR EACH ROW\n            EXECUTE FUNCTION trigger_set_timestamp();\n          END IF;\n        END\n        $$;\n      `);\n            console.log(\"Database triggers created successfully.\");\n        } catch (error) {\n            console.error(\"Error creating triggers:\", error);\n            throw error;\n        }\n        console.log(\"Database initialization completed successfully.\");\n    } catch (error) {\n        console.error(\"Unable to initialize database:\", error);\n        throw error;\n    }\n}\n// Conversation management functions\nasync function getOrCreateUser(email, name, authProvider, authProviderId, avatarUrl = null) {\n    try {\n        // First try to find the user by email\n        let user = await User.findOne({\n            // Use raw: false to ensure we get Sequelize model instances\n            raw: false,\n            where: {\n                email\n            },\n            include: [\n                {\n                    model: UserPreference,\n                    // Ensure we get the full UserPreference model\n                    required: false,\n                    attributes: {\n                        include: [\n                            \"preferences_data\"\n                        ]\n                    }\n                }\n            ]\n        });\n        if (user) {\n            // User exists, check if we need to update auth provider info\n            if (user.auth_provider !== authProvider || user.auth_provider_id !== authProviderId) {\n                // Only update if the auth provider info is different\n                console.log(`User with email ${email} exists but with different auth provider. Returning existing user.`);\n            }\n            return user;\n        }\n        // User doesn't exist, create a new one\n        // Use a transaction to ensure both user and preferences are created atomically\n        const result = await sequelize.transaction(async (t)=>{\n            // Create the user\n            const newUser = await User.create({\n                email,\n                name,\n                auth_provider: authProvider,\n                auth_provider_id: authProviderId,\n                avatar_url: avatarUrl\n            }, {\n                transaction: t\n            });\n            // Create a default UserPreference record for the new user with explicit preferences_data\n            const newPref = await UserPreference.create({\n                user_id: newUser.user_id,\n                preferences_data: {}\n            }, {\n                transaction: t\n            });\n            console.log(\"DEBUG: Created default UserPreference with ID:\", newPref.preference_id);\n            // Fetch the user with UserPreference included\n            return await User.findByPk(newUser.user_id, {\n                // Use raw: false to ensure we get Sequelize model instances\n                raw: false,\n                include: [\n                    {\n                        model: UserPreference,\n                        // Ensure we get the full UserPreference model\n                        required: false,\n                        attributes: {\n                            include: [\n                                \"preferences_data\"\n                            ]\n                        }\n                    }\n                ],\n                transaction: t\n            });\n        });\n        user = result;\n        console.log(`Created new user ${email} with default preferences.`);\n        // If user exists but UserPreference doesn't, create a default one\n        if (user && !user.UserPreference) {\n            console.log(`DEBUG: New user ${email} has no UserPreference record. Creating default.`);\n            try {\n                // Create a default UserPreference record\n                const newPref = await UserPreference.create({\n                    user_id: user.user_id,\n                    preferences_data: {}\n                });\n                // Attach it to the user object\n                user.UserPreference = newPref;\n                console.log(\"DEBUG: Created and attached default UserPreference record\");\n            } catch (prefError) {\n                console.error(\"Error creating default UserPreference:\", prefError);\n            }\n        }\n        return user;\n    } catch (error) {\n        console.error(\"Error getting or creating user:\", error);\n        throw error;\n    }\n}\nasync function createConversation(userId) {\n    try {\n        // Check if userId is an email address\n        const isEmail = typeof userId === \"string\" && userId.includes(\"@\");\n        let actualUserId = userId;\n        // If userId is an email, find the user by email first to get the actual UUID\n        if (isEmail) {\n            const userByEmail = await User.findOne({\n                where: {\n                    email: userId\n                }\n            });\n            if (!userByEmail) {\n                console.log(`No user found with email: ${userId}`);\n                throw new Error(`Cannot create conversation: No user found with email: ${userId}`);\n            }\n            actualUserId = userByEmail.user_id;\n        }\n        const conversation = await Conversation.create({\n            user_id: actualUserId\n        });\n        return conversation;\n    } catch (error) {\n        console.error(\"Error creating conversation:\", error);\n        throw error;\n    }\n}\nasync function getConversation(conversationId) {\n    try {\n        return await Conversation.findByPk(conversationId, {\n            include: [\n                {\n                    model: ConversationMessage,\n                    order: [\n                        [\n                            \"sequence_number\",\n                            \"ASC\"\n                        ]\n                    ]\n                }\n            ]\n        });\n    } catch (error) {\n        console.error(\"Error getting conversation:\", error);\n        throw error;\n    }\n}\nasync function getConversationsByUserId(userId) {\n    try {\n        // Check if userId is an email address\n        const isEmail = typeof userId === \"string\" && userId.includes(\"@\");\n        let actualUserId = userId;\n        // If userId is an email, find the user by email first to get the actual UUID\n        if (isEmail) {\n            const userByEmail = await User.findOne({\n                where: {\n                    email: userId\n                }\n            });\n            if (!userByEmail) {\n                console.log(`No user found with email: ${userId}`);\n                return [];\n            }\n            actualUserId = userByEmail.user_id;\n        }\n        // Use EXPLAIN ANALYZE to understand query performance\n        if (true) {\n            const explainResult = await sequelize.query(`\n        EXPLAIN ANALYZE\n        SELECT * FROM conversations\n        WHERE user_id = '${actualUserId}'\n        ORDER BY created_at DESC\n      `);\n            console.log(\"Query execution plan:\", explainResult[0]);\n        }\n        return await Conversation.findAll({\n            where: {\n                user_id: actualUserId\n            },\n            order: [\n                [\n                    \"created_at\",\n                    \"DESC\"\n                ]\n            ]\n        });\n    } catch (error) {\n        console.error(\"Error getting conversations by user ID:\", error);\n        throw error;\n    }\n}\nasync function getConversationMessages(conversationId) {\n    try {\n        return await ConversationMessage.findAll({\n            where: {\n                conversation_id: conversationId\n            },\n            order: [\n                [\n                    \"sequence_number\",\n                    \"ASC\"\n                ]\n            ]\n        });\n    } catch (error) {\n        console.error(\"Error getting conversation messages:\", error);\n        throw error;\n    }\n}\nasync function addMessageToConversation(conversationId, role, content, { tool_calls = null, tool_call_id = null } = {} // Pass tool info as an object\n) {\n    try {\n        // Use a transaction for sequence number safety\n        const result = await sequelize.transaction(async (t)=>{\n            // Get the next sequence number within the transaction\n            const maxSequenceResult = await ConversationMessage.findOne({\n                attributes: [\n                    [\n                        sequelize.fn(\"max\", sequelize.col(\"sequence_number\")),\n                        \"maxSequence\"\n                    ]\n                ],\n                where: {\n                    conversation_id: conversationId\n                },\n                transaction: t,\n                raw: true\n            });\n            const maxSequence = maxSequenceResult?.maxSequence || 0;\n            // Create the message\n            const message = await ConversationMessage.create({\n                conversation_id: conversationId,\n                sequence_number: maxSequence + 1,\n                role,\n                content: content,\n                tool_calls: role === \"assistant\" ? tool_calls : null,\n                tool_call_id: role === \"tool\" ? tool_call_id : null\n            }, {\n                transaction: t\n            });\n            return message;\n        });\n        return result;\n    } catch (error) {\n        console.error(\"Error adding message to conversation:\", error);\n        // Log specific details if available\n        if (error.original) {\n            console.error(\"Original DB Error:\", error.original);\n        }\n        throw error; // Re-throw the error to be handled upstream\n    }\n}\n/**\n * Get user and their latest conversation in a single query\n * @param {string} userId - The user ID\n * @returns {Object} - User data with latest conversation\n */ async function getUserWithLatestConversation(userId) {\n    try {\n        // Check if userId is an email address\n        const isEmail = typeof userId === \"string\" && userId.includes(\"@\");\n        let actualUserId = userId;\n        // If userId is an email, find the user by email first to get the actual UUID\n        if (isEmail) {\n            const userByEmail = await User.findOne({\n                where: {\n                    email: userId\n                }\n            });\n            if (!userByEmail) {\n                console.log(`No user found with email: ${userId}`);\n                return null;\n            }\n            actualUserId = userByEmail.user_id;\n        }\n        // Use EXPLAIN ANALYZE to understand query performance\n        if (true) {\n            const explainResult = await sequelize.query(`\n        EXPLAIN ANALYZE\n        SELECT u.*, c.*\n        FROM users u\n        LEFT JOIN (\n          SELECT * FROM conversations\n          WHERE user_id = '${actualUserId}'\n          ORDER BY created_at DESC\n          LIMIT 1\n        ) c ON u.user_id = c.user_id\n        WHERE u.user_id = '${actualUserId}'\n      `);\n            console.log(\"Join query execution plan:\", explainResult[0]);\n        }\n        // Execute the actual query using Sequelize\n        console.log(`DEBUG: getUserWithLatestConversation - About to fetch user with ID: ${actualUserId}`);\n        const user = await User.findByPk(actualUserId, {\n            // Use raw: false to ensure we get Sequelize model instances\n            raw: false,\n            include: [\n                {\n                    model: Conversation,\n                    limit: 1,\n                    order: [\n                        [\n                            \"created_at\",\n                            \"DESC\"\n                        ]\n                    ],\n                    include: [\n                        {\n                            model: ConversationMessage,\n                            order: [\n                                [\n                                    \"sequence_number\",\n                                    \"DESC\"\n                                ]\n                            ],\n                            limit: 50,\n                            separate: true // This ensures all messages are loaded, not just one\n                        }\n                    ]\n                },\n                {\n                    model: UserPreference,\n                    // Ensure we get the full UserPreference model\n                    required: false,\n                    attributes: {\n                        include: [\n                            \"preferences_data\"\n                        ]\n                    }\n                }\n            ]\n        });\n        // Debug log the user object structure\n        console.log(\"DEBUG: getUserWithLatestConversation result:\", JSON.stringify({\n            user_id: user?.user_id || null,\n            email: user?.email || null,\n            hasUserPreference: user ? !!user.UserPreference : null,\n            userPreferenceDataValues: user?.UserPreference ? !!user.UserPreference.dataValues : null,\n            preferencesDataRaw: user?.UserPreference ? user.UserPreference.preferences_data : null,\n            preferencesDataFromDataValues: user?.UserPreference?.dataValues ? user.UserPreference.dataValues.preferences_data : null,\n            rawUserPreference: user?.UserPreference ? JSON.stringify(user.UserPreference).substring(0, 200) + \"...\" : null\n        }));\n        // If user exists but UserPreference doesn't, create a default one\n        if (user && !user.UserPreference) {\n            console.log(`DEBUG: User ${actualUserId} exists but has no UserPreference record. Creating default.`);\n            try {\n                // Create a default UserPreference record\n                const newPref = await UserPreference.create({\n                    user_id: actualUserId,\n                    preferences_data: {}\n                });\n                // Attach it to the user object\n                user.UserPreference = newPref;\n                console.log(\"DEBUG: Created and attached default UserPreference record\");\n            } catch (prefError) {\n                console.error(\"Error creating default UserPreference:\", prefError);\n            }\n        }\n        return user;\n    } catch (error) {\n        console.error(\"Error getting user with latest conversation:\", error);\n        throw error;\n    }\n}\n/**\n * Creates or updates metadata for a calendar event\n * @param {string} userId - User ID\n * @param {string} googleEventId - Google Calendar event ID\n * @param {Object} metadata - Metadata to store (priority, tags, etc.)\n * @param {string} calendarId - Calendar ID (defaults to 'primary')\n * @returns {Object} - Created or updated metadata record\n */ async function createOrUpdateEventMetadata(userId, googleEventId, metadata = {}, calendarId = \"primary\") {\n    try {\n        if (!userId || !googleEventId) {\n            throw new Error(\"User ID and Google Event ID are required\");\n        }\n        // Find existing metadata or create new record\n        const [eventMetadata, created] = await CalendarEventMetadata.findOrCreate({\n            where: {\n                user_id: userId,\n                google_calendar_id: calendarId,\n                google_event_id: googleEventId\n            },\n            defaults: {\n                user_id: userId,\n                google_calendar_id: calendarId,\n                google_event_id: googleEventId,\n                priority: metadata.priority || null,\n                tags: metadata.tags || null,\n                last_synced_at: new Date()\n            }\n        });\n        // If record exists, update it with new metadata\n        if (!created) {\n            const updateData = {};\n            // Only update fields that are provided\n            if (metadata.priority !== undefined) updateData.priority = metadata.priority;\n            if (metadata.tags !== undefined) updateData.tags = metadata.tags;\n            // Always update last_synced_at\n            updateData.last_synced_at = new Date();\n            await eventMetadata.update(updateData);\n        }\n        return eventMetadata;\n    } catch (error) {\n        console.error(\"Error creating/updating event metadata:\", error);\n        throw error;\n    }\n}\n/**\n * Delete metadata for a calendar event\n * @param {string} userId - User ID\n * @param {string} googleEventId - Google Calendar event ID\n * @param {string} calendarId - Calendar ID (defaults to 'primary')\n * @returns {boolean} - Success status\n */ async function deleteEventMetadata(userId, googleEventId, calendarId = \"primary\") {\n    try {\n        if (!userId || !googleEventId) {\n            throw new Error(\"User ID and Google Event ID are required\");\n        }\n        const result = await CalendarEventMetadata.destroy({\n            where: {\n                user_id: userId,\n                google_calendar_id: calendarId,\n                google_event_id: googleEventId\n            }\n        });\n        return result > 0;\n    } catch (error) {\n        console.error(\"Error deleting event metadata:\", error);\n        return false;\n    }\n}\n/**\n * Get metadata for multiple events in a single query\n * @param {string} userId - User ID\n * @param {Array} googleEventIds - Array of Google Calendar event IDs\n * @param {string} calendarId - Calendar ID (defaults to 'primary')\n * @returns {Array} - Array of metadata records\n */ async function getEventMetadataBatch(userId, googleEventIds, calendarId = \"primary\") {\n    try {\n        if (!userId || !Array.isArray(googleEventIds) || googleEventIds.length === 0) {\n            return [];\n        }\n        const metadata = await CalendarEventMetadata.findAll({\n            where: {\n                user_id: userId,\n                google_calendar_id: calendarId,\n                google_event_id: {\n                    [sequelize__WEBPACK_IMPORTED_MODULE_0__.Op.in]: googleEventIds\n                }\n            }\n        });\n        return metadata;\n    } catch (error) {\n        console.error(\"Error fetching event metadata batch:\", error);\n        return [];\n    }\n}\n// Export models and functions\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sequelize);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/postgresClient.js\n");

/***/ }),

/***/ "(api)/./lib/redisClient.js":
/*!****************************!*\
  !*** ./lib/redisClient.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheEventsForDateRange: () => (/* binding */ cacheEventsForDateRange),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   deleteCache: () => (/* binding */ deleteCache),\n/* harmony export */   deleteCacheByPrefix: () => (/* binding */ deleteCacheByPrefix),\n/* harmony export */   deleteConversation: () => (/* binding */ deleteConversation),\n/* harmony export */   flushCache: () => (/* binding */ flushCache),\n/* harmony export */   getCache: () => (/* binding */ getCache),\n/* harmony export */   getCachedEventsForDateRange: () => (/* binding */ getCachedEventsForDateRange),\n/* harmony export */   getConversation: () => (/* binding */ getConversation),\n/* harmony export */   invalidateDateRangeCache: () => (/* binding */ invalidateDateRangeCache),\n/* harmony export */   saveConversation: () => (/* binding */ saveConversation),\n/* harmony export */   setCache: () => (/* binding */ setCache)\n/* harmony export */ });\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ioredis */ \"ioredis\");\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ioredis__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-cache */ \"node-cache\");\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_cache__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dotenv/config */ \"dotenv/config\");\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dotenv_config__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n// Create Redis client with configuration from environment variables\n// or use default values if not provided\nconst redisClient = new (ioredis__WEBPACK_IMPORTED_MODULE_0___default())({\n    host: process.env.REDIS_HOST || \"localhost\",\n    port: process.env.REDIS_PORT || 6379,\n    password: process.env.REDIS_PASSWORD || \"\",\n    db: process.env.REDIS_DB || 0,\n    // Enable reconnect on error\n    retryStrategy: (times)=>{\n        const delay = Math.min(times * 50, 2000);\n        return delay;\n    }\n});\n// Create a very short-lived first-level buffer cache\nconst localCache = new (node_cache__WEBPACK_IMPORTED_MODULE_1___default())({\n    stdTTL: 10\n}); // 10 seconds TTL\n// Log connection events\nredisClient.on(\"connect\", ()=>{\n    console.log(\"Connected to Redis\");\n});\nredisClient.on(\"error\", (err)=>{\n    console.error(\"Redis connection error:\", err);\n});\n// Helper functions for conversation history\nconst CONVERSATION_PREFIX = \"conversation:\";\nconst CACHE_PREFIX = \"cache:\";\nconst DATE_RANGE_PREFIX = \"date_range:\";\nconst USER_PREFIX = \"user:\";\nconst DEFAULT_EXPIRY = 60 * 60 * 24 * 7; // 1 week in seconds\n/**\n * Save conversation history for a user\n * @param {string} userId - The user ID\n * @param {Array} messages - The conversation messages\n * @param {number} expiry - Expiry time in seconds (optional)\n */ async function saveConversation(userId, messages, expiry = DEFAULT_EXPIRY) {\n    try {\n        const key = `${CONVERSATION_PREFIX}${userId}`;\n        await redisClient.set(key, JSON.stringify(messages), \"EX\", expiry);\n    } catch (error) {\n        console.error(\"Error saving conversation to Redis:\", error);\n    }\n}\n/**\n * Get conversation history for a user\n * @param {string} userId - The user ID\n * @returns {Array|null} - The conversation messages or null if not found\n */ async function getConversation(userId) {\n    try {\n        const key = `${CONVERSATION_PREFIX}${userId}`;\n        // Try local cache first\n        const localData = localCache.get(key);\n        if (localData) {\n            return localData;\n        }\n        // Try Redis\n        const data = await redisClient.get(key);\n        if (data) {\n            const parsedData = JSON.parse(data);\n            // Store in local cache\n            localCache.set(key, parsedData);\n            return parsedData;\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error getting conversation from Redis:\", error);\n        return null;\n    }\n}\n/**\n * Delete conversation history for a user\n * @param {string} userId - The user ID\n */ async function deleteConversation(userId) {\n    try {\n        const key = `${CONVERSATION_PREFIX}${userId}`;\n        await redisClient.del(key);\n        localCache.del(key);\n    } catch (error) {\n        console.error(\"Error deleting conversation from Redis:\", error);\n    }\n}\n// Helper functions for caching\n/**\n * Set a value in the cache\n * @param {string} key - The cache key\n * @param {any} value - The value to cache\n * @param {number} expiry - Expiry time in seconds (optional)\n */ async function setCache(key, value, expiry = 300) {\n    try {\n        const cacheKey = `${CACHE_PREFIX}${key}`;\n        await redisClient.set(cacheKey, JSON.stringify(value), \"EX\", expiry);\n        localCache.set(cacheKey, value, 10); // 10 seconds in local cache\n    } catch (error) {\n        console.error(\"Error setting cache in Redis:\", error);\n    }\n}\n/**\n * Get a value from the cache\n * @param {string} key - The cache key\n * @returns {any|null} - The cached value or null if not found\n */ async function getCache(key) {\n    try {\n        const cacheKey = `${CACHE_PREFIX}${key}`;\n        // Try local cache first (fastest)\n        const localData = localCache.get(cacheKey);\n        if (localData) {\n            return localData;\n        }\n        // Try Redis\n        const data = await redisClient.get(cacheKey);\n        if (data) {\n            const parsedData = JSON.parse(data);\n            // Store in local cache\n            localCache.set(cacheKey, parsedData, 10); // 10 seconds\n            return parsedData;\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error getting cache from Redis:\", error);\n        return null;\n    }\n}\n/**\n * Delete a value from the cache\n * @param {string} key - The cache key\n */ async function deleteCache(key) {\n    try {\n        const cacheKey = `${CACHE_PREFIX}${key}`;\n        await redisClient.del(cacheKey);\n        localCache.del(cacheKey);\n    } catch (error) {\n        console.error(\"Error deleting cache from Redis:\", error);\n    }\n}\n/**\n * Delete all cache entries with a specific prefix\n * @param {string} prefix - The prefix to match\n */ async function deleteCacheByPrefix(prefix) {\n    try {\n        const pattern = `${CACHE_PREFIX}${prefix}*`;\n        const keys = await redisClient.keys(pattern);\n        if (keys.length > 0) {\n            await redisClient.del(...keys);\n            // Also clear from local cache\n            keys.forEach((key)=>{\n                localCache.del(key);\n            });\n        }\n    } catch (error) {\n        console.error(\"Error deleting cache by prefix from Redis:\", error);\n    }\n}\n/**\n * Cache calendar events for a specific date range\n * @param {string} userId - The user ID\n * @param {string} startDate - Start date in ISO format\n * @param {string} endDate - End date in ISO format\n * @param {Array} events - Calendar events to cache\n * @param {number} expiry - Expiry time in seconds (optional)\n */ async function cacheEventsForDateRange(userId, startDate, endDate, events, expiry = 300) {\n    try {\n        // Create a key for this specific date range\n        const rangeKey = `${USER_PREFIX}${userId}:${DATE_RANGE_PREFIX}${startDate}_${endDate}`;\n        // Store the events\n        await redisClient.set(rangeKey, JSON.stringify(events), \"EX\", expiry);\n        // Add this range to a set of all ranges for this user\n        await redisClient.sadd(`${USER_PREFIX}${userId}:${DATE_RANGE_PREFIX}all_ranges`, rangeKey);\n        // Store in local cache too\n        localCache.set(rangeKey, events, 10); // 10 seconds\n    } catch (error) {\n        console.error(\"Error caching events for date range:\", error);\n    }\n}\n/**\n * Get cached events for a specific date range\n * @param {string} userId - The user ID\n * @param {string} startDate - Start date in ISO format\n * @param {string} endDate - End date in ISO format\n * @returns {Array|null} - Cached events or null if not found\n */ async function getCachedEventsForDateRange(userId, startDate, endDate) {\n    try {\n        const rangeKey = `${USER_PREFIX}${userId}:${DATE_RANGE_PREFIX}${startDate}_${endDate}`;\n        // Try local cache first\n        const localData = localCache.get(rangeKey);\n        if (localData) {\n            return localData;\n        }\n        // Try Redis\n        const data = await redisClient.get(rangeKey);\n        if (data) {\n            const parsedData = JSON.parse(data);\n            // Store in local cache\n            localCache.set(rangeKey, parsedData, 10); // 10 seconds\n            return parsedData;\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error getting cached events for date range:\", error);\n        return null;\n    }\n}\n/**\n * Invalidate cached events for a specific date range\n * @param {string} userId - The user ID\n * @param {string} startDate - Start date in ISO format\n * @param {string} endDate - End date in ISO format\n */ async function invalidateDateRangeCache(userId, startDate, endDate) {\n    try {\n        // Get all cached ranges for this user\n        const allRanges = await redisClient.smembers(`${USER_PREFIX}${userId}:${DATE_RANGE_PREFIX}all_ranges`);\n        // Find ranges that overlap with the specified range\n        const rangesToInvalidate = [];\n        for (const rangeKey of allRanges){\n            // Extract dates from the key\n            const match = rangeKey.match(new RegExp(`${USER_PREFIX}${userId}:${DATE_RANGE_PREFIX}(.+)_(.+)$`));\n            if (match) {\n                const [, cachedStart, cachedEnd] = match;\n                // Check if ranges overlap\n                if (startDate <= cachedEnd && endDate >= cachedStart) {\n                    rangesToInvalidate.push(rangeKey);\n                }\n            }\n        }\n        // Delete the overlapping ranges\n        if (rangesToInvalidate.length > 0) {\n            await redisClient.del(...rangesToInvalidate);\n            // Remove from the set of all ranges\n            await redisClient.srem(`${USER_PREFIX}${userId}:${DATE_RANGE_PREFIX}all_ranges`, ...rangesToInvalidate);\n            // Clear from local cache too\n            rangesToInvalidate.forEach((key)=>{\n                localCache.del(key);\n            });\n            console.log(`Invalidated ${rangesToInvalidate.length} overlapping date ranges for user ${userId}`);\n        }\n    } catch (error) {\n        console.error(\"Error invalidating date range cache:\", error);\n    }\n}\n/**\n * Flush all cache entries\n */ async function flushCache() {\n    try {\n        const pattern = `${CACHE_PREFIX}*`;\n        const keys = await redisClient.keys(pattern);\n        if (keys.length > 0) {\n            await redisClient.del(...keys);\n        }\n        // Also clear date range caches\n        const dateRangePattern = `*:${DATE_RANGE_PREFIX}*`;\n        const dateRangeKeys = await redisClient.keys(dateRangePattern);\n        if (dateRangeKeys.length > 0) {\n            await redisClient.del(...dateRangeKeys);\n        }\n        // Clear local cache\n        localCache.flushAll();\n        console.log(\"Cache flushed successfully\");\n    } catch (error) {\n        console.error(\"Error flushing cache from Redis:\", error);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (redisClient);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/redisClient.js\n");

/***/ }),

/***/ "(api)/./lib/services/cacheService.js":
/*!**************************************!*\
  !*** ./lib/services/cacheService.js ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCachedEvents: () => (/* binding */ getCachedEvents),\n/* harmony export */   invalidateCache: () => (/* binding */ invalidateCache)\n/* harmony export */ });\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-cache */ \"node-cache\");\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_cache__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! luxon */ \"luxon\");\n/* harmony import */ var _tools_timeUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tools/timeUtils.js */ \"(api)/./lib/tools/timeUtils.js\");\n/* harmony import */ var _googleCalendar_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../googleCalendar.js */ \"(api)/./googleCalendar.js\");\n/* harmony import */ var _googleCalendar_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_googleCalendar_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _redisClient_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../redisClient.js */ \"(api)/./lib/redisClient.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([luxon__WEBPACK_IMPORTED_MODULE_1__, _tools_timeUtils_js__WEBPACK_IMPORTED_MODULE_2__]);\n([luxon__WEBPACK_IMPORTED_MODULE_1__, _tools_timeUtils_js__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// ES Module imports\n\n\n\n// Import the calendar function with correct name\n\n// Import Redis functions\n\n// Consider calling initializeDatabase() at application startup\n// --- Cache ---\nconst memoryCache = new (node_cache__WEBPACK_IMPORTED_MODULE_0___default())({\n    stdTTL: 300\n}); // 5 minutes TTL\n// --- Caching Logic ---\n// (Keep getCachedEvents and invalidateCache as previously defined and refined)\nasync function getCachedEvents(tokens, start_date, end_date) {\n    if (!tokens?.access_token) {\n        console.warn(\"Attempting to get events without access token. Required for calendar operations.\");\n        throw new Error(\"User authentication required to fetch calendar events.\");\n    }\n    // Ensure start_date and end_date have proper timezone information\n    const userTimezone = (0,_tools_timeUtils_js__WEBPACK_IMPORTED_MODULE_2__.getUserTimezone)();\n    const startWithTz = typeof start_date === \"string\" ? (0,_tools_timeUtils_js__WEBPACK_IMPORTED_MODULE_2__.convertToUTCISOString)(start_date, userTimezone) || start_date : start_date;\n    const endWithTz = typeof end_date === \"string\" ? (0,_tools_timeUtils_js__WEBPACK_IMPORTED_MODULE_2__.convertToUTCISOString)(end_date, userTimezone) || end_date : end_date;\n    // Derive a user-specific cache key prefix (more stable than token hash if possible)\n    // For now, using token hash as fallback\n    const tokenHash = tokens.access_token.substring(tokens.access_token.length - 10);\n    const userIdCachePrefix = `user_${tokenHash}`; // Replace with stable user ID if available\n    // Parse dates and preserve timezone information\n    const startDt = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(startWithTz);\n    const endDt = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(endWithTz);\n    // Log the original and parsed dates for debugging\n    console.log(`getCachedEvents original range: ${start_date} to ${end_date} (converted to: ${startWithTz} to ${endWithTz})`);\n    console.log(`getCachedEvents parsed range: ${startDt.toISO()} to ${endDt.toISO()}`);\n    // Use full ISO strings for cache keys to preserve timezone information\n    // This is especially important for events after 7 PM Zulu time\n    const cacheKeyStart = startDt.toISO();\n    const cacheKeyEnd = endDt.toISO();\n    if (!cacheKeyStart || !cacheKeyEnd) {\n        throw new Error(`Invalid date format for caching: ${start_date}, ${end_date}`);\n    }\n    try {\n        const cachedEvents = await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_4__.getCachedEventsForDateRange)(userIdCachePrefix, cacheKeyStart, cacheKeyEnd);\n        if (cachedEvents) {\n            console.log(`Cache HIT for events from ${cacheKeyStart} to ${cacheKeyEnd}`);\n            // Ensure it returns an array even if cache stores null/undefined mistakenly\n            return Array.isArray(cachedEvents) ? cachedEvents : [];\n        }\n        console.log(`Cache MISS for events from ${cacheKeyStart} to ${cacheKeyEnd}`);\n        // Fetch from API using the actual Calendar function\n        // Pass the exact ISO strings to preserve timezone information\n        const events = await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_3__.getCalendarEvents)(tokens, new Date(startWithTz), new Date(endWithTz));\n        if (events && Array.isArray(events)) {\n            await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_4__.cacheEventsForDateRange)(userIdCachePrefix, cacheKeyStart, cacheKeyEnd, events, 300); // 5 min TTL\n            console.log(`Stored ${events.length} events in Redis cache for range ${cacheKeyStart} to ${cacheKeyEnd}`);\n            return events;\n        } else {\n            console.warn(`No events returned or non-array from fetchGCalendarEvents for ${cacheKeyStart}-${cacheKeyEnd}`);\n            return []; // Return empty array on failure or non-array result\n        }\n    } catch (error) {\n        console.error(`Error in getCachedEvents (${cacheKeyStart} to ${cacheKeyEnd}):`, error);\n        throw new Error(`Failed to fetch or cache calendar events: ${error.message}`);\n    }\n}\nasync function invalidateCache(tokens = null, startDate = null, endDate = null) {\n    memoryCache.flushAll(); // Always flush memory cache\n    console.log(\"Memory cache invalidated\");\n    // If we have a specific date range to invalidate\n    if (tokens?.access_token && startDate && endDate) {\n        try {\n            // Ensure startDate and endDate have proper timezone information\n            const userTimezone = (0,_tools_timeUtils_js__WEBPACK_IMPORTED_MODULE_2__.getUserTimezone)();\n            const startWithTz = typeof startDate === \"string\" ? (0,_tools_timeUtils_js__WEBPACK_IMPORTED_MODULE_2__.convertToUTCISOString)(startDate, userTimezone) || startDate : startDate;\n            const endWithTz = typeof endDate === \"string\" ? (0,_tools_timeUtils_js__WEBPACK_IMPORTED_MODULE_2__.convertToUTCISOString)(endDate, userTimezone) || endDate : endDate;\n            const tokenHash = tokens.access_token.substring(tokens.access_token.length - 10);\n            const userIdCachePrefix = `user_${tokenHash}`; // Use consistent prefix\n            // Parse dates and preserve timezone information\n            const startDt = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(startWithTz);\n            const endDt = luxon__WEBPACK_IMPORTED_MODULE_1__.DateTime.fromISO(endWithTz);\n            // Log the original and parsed dates for debugging\n            console.log(`invalidateCache original range: ${startDate} to ${endDate} (converted to: ${startWithTz} to ${endWithTz})`);\n            console.log(`invalidateCache parsed range: ${startDt.toISO()} to ${endDt.toISO()}`);\n            // Use full ISO strings for cache keys to preserve timezone information\n            const startKey = startDt.toISO();\n            const endKey = endDt.toISO();\n            if (!startKey || !endKey) {\n                console.warn(`Cannot invalidate Redis: Invalid date format ${startDate}, ${endDate}`);\n                return;\n            }\n            await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_4__.invalidateDateRangeCache)(userIdCachePrefix, startKey, endKey);\n            console.log(`Invalidated Redis cache for user ${userIdCachePrefix}, exact range ${startKey} to ${endKey}`);\n        } catch (error) {\n            console.error(\"Error invalidating Redis date range cache:\", error);\n        }\n    } else {\n        console.log(\"Skipping granular Redis cache invalidation (missing token or date range)\");\n    }\n}\n// Export the functions\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/services/cacheService.js\n");

/***/ }),

/***/ "(api)/./lib/tools/checkForConflicts.js":
/*!****************************************!*\
  !*** ./lib/tools/checkForConflicts.js ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkForConflicts: () => (/* binding */ checkForConflicts)\n/* harmony export */ });\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! luxon */ \"luxon\");\n/* harmony import */ var _services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/cacheService.js */ \"(api)/./lib/services/cacheService.js\");\n/* harmony import */ var _timeUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./timeUtils.js */ \"(api)/./lib/tools/timeUtils.js\");\n/* harmony import */ var _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./schedulingUtils.js */ \"(api)/./lib/tools/schedulingUtils.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([luxon__WEBPACK_IMPORTED_MODULE_0__, _services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__, _timeUtils_js__WEBPACK_IMPORTED_MODULE_2__, _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_3__]);\n([luxon__WEBPACK_IMPORTED_MODULE_0__, _services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__, _timeUtils_js__WEBPACK_IMPORTED_MODULE_2__, _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// lib/tools/checkForConflicts.js\n\n\n\n\n// --- Conflict Checking ---\nasync function checkForConflicts(tokens, start, end, overrideConflict = false) {\n    try {\n        // Ensure start and end times have proper timezone information\n        const userTimezone = (0,_timeUtils_js__WEBPACK_IMPORTED_MODULE_2__.getUserTimezone)();\n        const startWithTz = typeof start === \"string\" ? (0,_timeUtils_js__WEBPACK_IMPORTED_MODULE_2__.convertToUTCISOString)(start, userTimezone) : start;\n        const endWithTz = typeof end === \"string\" ? (0,_timeUtils_js__WEBPACK_IMPORTED_MODULE_2__.convertToUTCISOString)(end, userTimezone) : end;\n        const checkStart = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(startWithTz);\n        const checkEnd = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(endWithTz);\n        console.log(`Checking conflicts for: ${startWithTz} to ${endWithTz}`);\n        console.log(`Parsed DateTime objects: ${checkStart.toISO()} to ${checkEnd.toISO()}`);\n        console.log(`Override conflict flag: ${overrideConflict}`);\n        if (!checkStart.isValid || !checkEnd.isValid) {\n            throw new Error(`Invalid start/end time for conflict check: start=${startWithTz}, end=${endWithTz}`);\n        }\n        // Use the exact time range instead of the whole day to avoid unnecessary conflicts\n        // This is especially important for events after 7 PM Zulu time\n        const fetchStart = checkStart.minus({\n            hours: 1\n        }).toISO(); // Buffer of 1 hour before\n        const fetchEnd = checkEnd.plus({\n            hours: 1\n        }).toISO(); // Buffer of 1 hour after\n        console.log(`Fetching events from: ${fetchStart} to ${fetchEnd}`);\n        const events = await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__.getCachedEvents)(tokens, fetchStart, fetchEnd);\n        console.log(`Found ${events.length} events in the fetch window`);\n        const conflicts = events.filter((event)=>{\n            try {\n                const eventStart = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.start?.dateTime || event.start?.date);\n                const eventEnd = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.end?.dateTime || event.end?.date);\n                // Debug log for events near the conflict time\n                console.log(`Comparing with event: \"${event.summary}\" - ${eventStart.toISO()} to ${eventEnd.toISO()}`);\n                if (!eventStart.isValid || !eventEnd.isValid) return false; // Skip invalid event data\n                // Check if this is an all-day event (has date but no dateTime)\n                const isAllDayEvent = event.start?.date && !event.start?.dateTime;\n                // Strict overlap condition - events must actually overlap in time\n                let overlaps = eventStart < checkEnd && checkStart < eventEnd;\n                // For all-day events, don't consider them as conflicts unless explicitly configured\n                // This allows regular timed events to be scheduled during all-day events\n                if (isAllDayEvent) {\n                    // Check if the event summary contains keywords that indicate it should block time\n                    const blockingKeywords = [\n                        \"meeting\",\n                        \"appointment\",\n                        \"interview\",\n                        \"call\",\n                        \"conference\"\n                    ];\n                    const shouldBlock = blockingKeywords.some((keyword)=>event.summary?.toLowerCase().includes(keyword));\n                    if (!shouldBlock) {\n                        console.log(`All-day event \"${event.summary}\" is not blocking time slots.`);\n                        overlaps = false; // Don't consider this a conflict\n                    } else {\n                        console.log(`All-day event \"${event.summary}\" is blocking time slots due to keywords.`);\n                    }\n                }\n                if (overlaps) {\n                    console.log(`CONFLICT detected with: \"${event.summary}\" - ${eventStart.toISO()} to ${eventEnd.toISO()}`);\n                }\n                return overlaps;\n            } catch  {\n                return false;\n            } // Ignore parsing errors for individual events\n        });\n        if (conflicts.length > 0 && !overrideConflict) {\n            console.log(`Conflict detected for ${startWithTz} - ${endWithTz}. Override flag: ${overrideConflict}`);\n            const duration = checkEnd.diff(checkStart, \"minutes\").minutes;\n            // Ensure findAvailableSlotsUtil handles potential errors gracefully\n            let suggestions = [];\n            try {\n                // Use a wider range for suggestions but centered around the requested time\n                const suggestStart = checkStart.minus({\n                    hours: 12\n                }).toISO();\n                const suggestEnd = checkEnd.plus({\n                    hours: 12\n                }).toISO();\n                suggestions = await (0,_schedulingUtils_js__WEBPACK_IMPORTED_MODULE_3__.findAvailableSlots)(events, duration, suggestStart, suggestEnd, \"Event\", \"any\");\n            } catch (suggestionError) {\n                console.error(\"Error finding suggestions during conflict check:\", suggestionError);\n            }\n            return {\n                conflicts: true,\n                suggestions: suggestions || []\n            };\n        } else if (conflicts.length > 0 && overrideConflict) {\n            console.log(`Conflict detected but override flag is set to true. Proceeding with event creation.`);\n            return {\n                conflicts: false,\n                overridden: true,\n                conflictCount: conflicts.length\n            };\n        }\n        return {\n            conflicts: false,\n            suggestions: []\n        };\n    } catch (error) {\n        console.error(\"Error checking for conflicts:\", error);\n        // Return conflict=true to be safe on error, prevents accidental scheduling\n        return {\n            conflicts: true,\n            suggestions: [],\n            error: `Conflict check failed: ${error.message}`\n        };\n    }\n}\n// Export the function\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/tools/checkForConflicts.js\n");

/***/ }),

/***/ "(api)/./lib/tools/eventHelpers.js":
/*!***********************************!*\
  !*** ./lib/tools/eventHelpers.js ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   listTodaysEvents: () => (/* binding */ listTodaysEvents),\n/* harmony export */   suggestEventTime: () => (/* binding */ suggestEventTime)\n/* harmony export */ });\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! luxon */ \"luxon\");\n/* harmony import */ var _services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/cacheService.js */ \"(api)/./lib/services/cacheService.js\");\n/* harmony import */ var _formatters_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatters.js */ \"(api)/./lib/tools/formatters.js\");\n/* harmony import */ var _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./schedulingUtils.js */ \"(api)/./lib/tools/schedulingUtils.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([luxon__WEBPACK_IMPORTED_MODULE_0__, _services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__, _formatters_js__WEBPACK_IMPORTED_MODULE_2__, _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_3__]);\n([luxon__WEBPACK_IMPORTED_MODULE_0__, _services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__, _formatters_js__WEBPACK_IMPORTED_MODULE_2__, _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n// --- Additional Utility Functions ---\nasync function listTodaysEvents(accessToken = null) {\n    if (!accessToken) return \"Authentication required.\";\n    try {\n        const tokens = {\n            access_token: accessToken\n        };\n        const today = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.now();\n        const startOfDay = today.startOf(\"day\").toISO();\n        const endOfDay = today.endOf(\"day\").toISO();\n        const events = await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_1__.getCachedEvents)(tokens, startOfDay, endOfDay);\n        return (0,_formatters_js__WEBPACK_IMPORTED_MODULE_2__.formatCalendarEvents)(events);\n    } catch (error) {\n        console.error(\"Failed to fetch today's events:\", error);\n        return `Failed to fetch events: ${error.message}`;\n    }\n}\nasync function suggestEventTime(duration, preferredTime = \"any\", accessToken = null, activity = \"event\") {\n    if (!accessToken) return \"Authentication required.\";\n    if (!duration || typeof duration !== \"number\" || duration <= 0) return \"Invalid duration.\";\n    try {\n        const tokens = {\n            access_token: accessToken\n        };\n        const now = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.now();\n        const startDate = now.toISO();\n        const endDate = now.plus({\n            days: 7\n        }).endOf(\"day\").toISO(); // Search next 7 days\n        const suggestions = await (0,_schedulingUtils_js__WEBPACK_IMPORTED_MODULE_3__.findAvailableSlots)([], duration, startDate, endDate, activity, preferredTime);\n        return (0,_formatters_js__WEBPACK_IMPORTED_MODULE_2__.formatToolResponse)(\"findAvailableSlots\", suggestions);\n    } catch (error) {\n        console.error(\"Failed to suggest event time:\", error);\n        return `Failed to suggest time: ${error.message}`;\n    }\n}\n// Export the functions\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvdG9vbHMvZXZlbnRIZWxwZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUNpQztBQUM2QjtBQUNhO0FBQ2pCO0FBRTFELHVDQUF1QztBQUN2QyxlQUFlSyxpQkFBaUJDLGNBQWMsSUFBSTtJQUNoRCxJQUFJLENBQUNBLGFBQWEsT0FBTztJQUN6QixJQUFJO1FBQ0YsTUFBTUMsU0FBUztZQUFFQyxjQUFjRjtRQUFZO1FBQzNDLE1BQU1HLFFBQVFULDJDQUFRQSxDQUFDVSxHQUFHO1FBQzFCLE1BQU1DLGFBQWFGLE1BQU1HLE9BQU8sQ0FBQyxPQUFPQyxLQUFLO1FBQzdDLE1BQU1DLFdBQVdMLE1BQU1NLEtBQUssQ0FBQyxPQUFPRixLQUFLO1FBQ3pDLE1BQU1HLFNBQVMsTUFBTWYsMEVBQWVBLENBQUNNLFFBQVFJLFlBQVlHO1FBQ3pELE9BQU9aLG9FQUFvQkEsQ0FBQ2M7SUFDOUIsRUFBRSxPQUFPQyxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxtQ0FBbUNBO1FBQ2pELE9BQU8sQ0FBQyx3QkFBd0IsRUFBRUEsTUFBTUUsT0FBTyxDQUFDLENBQUM7SUFDbkQ7QUFDRjtBQUVBLGVBQWVDLGlCQUFpQkMsUUFBUSxFQUFFQyxnQkFBZ0IsS0FBSyxFQUFFaEIsY0FBYyxJQUFJLEVBQUVpQixXQUFXLE9BQU87SUFDcEcsSUFBSSxDQUFDakIsYUFBYSxPQUFPO0lBQ3pCLElBQUksQ0FBQ2UsWUFBWSxPQUFPQSxhQUFhLFlBQVlBLFlBQVksR0FBRyxPQUFPO0lBQ3hFLElBQUk7UUFDRixNQUFNZCxTQUFTO1lBQUVDLGNBQWNGO1FBQVk7UUFDM0MsTUFBTUksTUFBTVYsMkNBQVFBLENBQUNVLEdBQUc7UUFDeEIsTUFBTWMsWUFBWWQsSUFBSUcsS0FBSztRQUMzQixNQUFNWSxVQUFVZixJQUFJZ0IsSUFBSSxDQUFDO1lBQUVDLE1BQU07UUFBRSxHQUFHWixLQUFLLENBQUMsT0FBT0YsS0FBSyxJQUFJLHFCQUFxQjtRQUNqRixNQUFNZSxjQUFjLE1BQU14Qix1RUFBa0JBLENBQzFDLEVBQUUsRUFDRmlCLFVBQ0FHLFdBQ0FDLFNBQ0FGLFVBQ0FEO1FBRUYsT0FBT25CLGtFQUFrQkEsQ0FBQyxzQkFBc0J5QjtJQUNsRCxFQUFFLE9BQU9YLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLGlDQUFpQ0E7UUFDL0MsT0FBTyxDQUFDLHdCQUF3QixFQUFFQSxNQUFNRSxPQUFPLENBQUMsQ0FBQztJQUNuRDtBQUNGO0FBRUEsdUJBQXVCO0FBQ3VCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2NhbGVuZGFyYXBwLy4vbGliL3Rvb2xzL2V2ZW50SGVscGVycy5qcz9jNDk1Il0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XG5pbXBvcnQgeyBnZXRDYWNoZWRFdmVudHMgfSBmcm9tICcuLi9zZXJ2aWNlcy9jYWNoZVNlcnZpY2UuanMnO1xuaW1wb3J0IHsgZm9ybWF0Q2FsZW5kYXJFdmVudHMsIGZvcm1hdFRvb2xSZXNwb25zZSB9IGZyb20gJy4vZm9ybWF0dGVycy5qcyc7XG5pbXBvcnQgeyBmaW5kQXZhaWxhYmxlU2xvdHMgfSBmcm9tICcuL3NjaGVkdWxpbmdVdGlscy5qcyc7XG5cbi8vIC0tLSBBZGRpdGlvbmFsIFV0aWxpdHkgRnVuY3Rpb25zIC0tLVxuYXN5bmMgZnVuY3Rpb24gbGlzdFRvZGF5c0V2ZW50cyhhY2Nlc3NUb2tlbiA9IG51bGwpIHtcbiAgaWYgKCFhY2Nlc3NUb2tlbikgcmV0dXJuIFwiQXV0aGVudGljYXRpb24gcmVxdWlyZWQuXCI7XG4gIHRyeSB7XG4gICAgY29uc3QgdG9rZW5zID0geyBhY2Nlc3NfdG9rZW46IGFjY2Vzc1Rva2VuIH07XG4gICAgY29uc3QgdG9kYXkgPSBEYXRlVGltZS5ub3coKTtcbiAgICBjb25zdCBzdGFydE9mRGF5ID0gdG9kYXkuc3RhcnRPZignZGF5JykudG9JU08oKTtcbiAgICBjb25zdCBlbmRPZkRheSA9IHRvZGF5LmVuZE9mKCdkYXknKS50b0lTTygpO1xuICAgIGNvbnN0IGV2ZW50cyA9IGF3YWl0IGdldENhY2hlZEV2ZW50cyh0b2tlbnMsIHN0YXJ0T2ZEYXksIGVuZE9mRGF5KTtcbiAgICByZXR1cm4gZm9ybWF0Q2FsZW5kYXJFdmVudHMoZXZlbnRzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHRvZGF5J3MgZXZlbnRzOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIGBGYWlsZWQgdG8gZmV0Y2ggZXZlbnRzOiAke2Vycm9yLm1lc3NhZ2V9YDtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBzdWdnZXN0RXZlbnRUaW1lKGR1cmF0aW9uLCBwcmVmZXJyZWRUaW1lID0gJ2FueScsIGFjY2Vzc1Rva2VuID0gbnVsbCwgYWN0aXZpdHkgPSBcImV2ZW50XCIpIHtcbiAgIGlmICghYWNjZXNzVG9rZW4pIHJldHVybiBcIkF1dGhlbnRpY2F0aW9uIHJlcXVpcmVkLlwiO1xuICAgaWYgKCFkdXJhdGlvbiB8fCB0eXBlb2YgZHVyYXRpb24gIT09ICdudW1iZXInIHx8IGR1cmF0aW9uIDw9IDApIHJldHVybiBcIkludmFsaWQgZHVyYXRpb24uXCI7XG4gIHRyeSB7XG4gICAgY29uc3QgdG9rZW5zID0geyBhY2Nlc3NfdG9rZW46IGFjY2Vzc1Rva2VuIH07XG4gICAgY29uc3Qgbm93ID0gRGF0ZVRpbWUubm93KCk7XG4gICAgY29uc3Qgc3RhcnREYXRlID0gbm93LnRvSVNPKCk7XG4gICAgY29uc3QgZW5kRGF0ZSA9IG5vdy5wbHVzKHsgZGF5czogNyB9KS5lbmRPZignZGF5JykudG9JU08oKTsgLy8gU2VhcmNoIG5leHQgNyBkYXlzXG4gICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSBhd2FpdCBmaW5kQXZhaWxhYmxlU2xvdHMoXG4gICAgICBbXSwgLy8gV2lsbCBiZSBmZXRjaGVkIGluc2lkZSBmaW5kQXZhaWxhYmxlU2xvdHNcbiAgICAgIGR1cmF0aW9uLCBcbiAgICAgIHN0YXJ0RGF0ZSwgXG4gICAgICBlbmREYXRlLCBcbiAgICAgIGFjdGl2aXR5LFxuICAgICAgcHJlZmVycmVkVGltZVxuICAgICk7XG4gICAgcmV0dXJuIGZvcm1hdFRvb2xSZXNwb25zZSgnZmluZEF2YWlsYWJsZVNsb3RzJywgc3VnZ2VzdGlvbnMpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gc3VnZ2VzdCBldmVudCB0aW1lOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIGBGYWlsZWQgdG8gc3VnZ2VzdCB0aW1lOiAke2Vycm9yLm1lc3NhZ2V9YDtcbiAgfVxufVxuXG4vLyBFeHBvcnQgdGhlIGZ1bmN0aW9uc1xuZXhwb3J0IHsgbGlzdFRvZGF5c0V2ZW50cywgc3VnZ2VzdEV2ZW50VGltZSB9O1xuIl0sIm5hbWVzIjpbIkRhdGVUaW1lIiwiZ2V0Q2FjaGVkRXZlbnRzIiwiZm9ybWF0Q2FsZW5kYXJFdmVudHMiLCJmb3JtYXRUb29sUmVzcG9uc2UiLCJmaW5kQXZhaWxhYmxlU2xvdHMiLCJsaXN0VG9kYXlzRXZlbnRzIiwiYWNjZXNzVG9rZW4iLCJ0b2tlbnMiLCJhY2Nlc3NfdG9rZW4iLCJ0b2RheSIsIm5vdyIsInN0YXJ0T2ZEYXkiLCJzdGFydE9mIiwidG9JU08iLCJlbmRPZkRheSIsImVuZE9mIiwiZXZlbnRzIiwiZXJyb3IiLCJjb25zb2xlIiwibWVzc2FnZSIsInN1Z2dlc3RFdmVudFRpbWUiLCJkdXJhdGlvbiIsInByZWZlcnJlZFRpbWUiLCJhY3Rpdml0eSIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJwbHVzIiwiZGF5cyIsInN1Z2dlc3Rpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/tools/eventHelpers.js\n");

/***/ }),

/***/ "(api)/./lib/tools/formatters.js":
/*!*********************************!*\
  !*** ./lib/tools/formatters.js ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatCalendarEvents: () => (/* binding */ formatCalendarEvents),\n/* harmony export */   formatEventTime: () => (/* binding */ formatEventTime),\n/* harmony export */   formatToolResponse: () => (/* binding */ formatToolResponse)\n/* harmony export */ });\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! luxon */ \"luxon\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([luxon__WEBPACK_IMPORTED_MODULE_0__]);\nluxon__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nfunction formatEventTime(eventTime) {\n    // ... (Keep implementation from chatbot.js) ...\n    try {\n        const dt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(eventTime);\n        if (dt.isValid) {\n            return dt.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.DATETIME_FULL);\n        }\n        const dateOnly = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(eventTime, {\n            zone: \"utc\"\n        });\n        if (dateOnly.isValid) {\n            return dateOnly.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.DATE_FULL) + \" (All day)\";\n        }\n        return eventTime;\n    } catch (e) {\n        console.warn(\"Error formatting event time:\", eventTime, e);\n        return String(eventTime); // Ensure returns string\n    }\n}\nfunction formatCalendarEvents(events) {\n    if (!events) return \"No events found or an error occurred.\";\n    if (!Array.isArray(events)) return \"An error occurred processing events.\";\n    if (events.length === 0) return \"No events found for the specified time period.\";\n    return events.map((event)=>{\n        try {\n            const start = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.start?.dateTime || event.start?.date);\n            const end = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.end?.dateTime || event.end?.date);\n            if (!start.isValid || !end.isValid) return `❓ Invalid date found for event: ${event.summary || event.id}`;\n            const isAllDay = !event.start?.dateTime;\n            // Include the event ID in the formatted output (hidden with a zero-width space for reference)\n            let formattedEvent = `📅 ${event.summary || \"(No Title)\"} [ID:​${event.id}]\\n`;\n            formattedEvent += `   📆 ${start.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.DATE_FULL)}\\n`;\n            if (!isAllDay) {\n                formattedEvent += `   🕒 ${start.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.TIME_SIMPLE)} - ${end.toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.TIME_SIMPLE)}\\n`;\n            } else {\n                formattedEvent += `   🕒 All Day\\n`;\n            }\n            if (event.description) formattedEvent += `   📝 ${event.description}\\n`;\n            if (event.location) formattedEvent += `   📍 ${event.location}\\n`;\n            if (event.reminders?.useDefault === false && Array.isArray(event.reminders.overrides)) {\n                formattedEvent += `   🔔 Reminders: ${event.reminders.overrides.map((r)=>`${r.minutes} min`).join(\", \")}\\n`;\n            }\n            // Check if the event has a priority property and display it\n            if (event.priority) {\n                formattedEvent += `   🚩 Priority: ${event.priority}\\n`;\n            }\n            // Check if the event has tags and display them\n            if (event.tags && Array.isArray(event.tags) && event.tags.length > 0) {\n                formattedEvent += `   🏷️ Tags: ${event.tags.join(\", \")}\\n`;\n            }\n            return formattedEvent.trim(); // Trim each event string\n        } catch (mapError) {\n            console.error(\"Error mapping event:\", event, mapError);\n            return `❓ Error processing event: ${event.summary || event.id}`;\n        }\n    }).join(\"\\n\\n\"); // Add space between events\n}\n// --- Formatting Tool Responses for the LLM ---\nfunction formatToolResponse(functionName, result) {\n    try {\n        // Explicitly handle null/undefined results first\n        if (result == null) {\n            console.warn(`Tool ${functionName} returned null or undefined.`);\n            return `Tool ${functionName} did not return a result. (Status: FAILED)`;\n        }\n        // Handle known error shapes returned by tool functions\n        if (typeof result === \"string\" && result.toLowerCase().startsWith(\"error:\")) return `${result} (Status: FAILED)`;\n        if (typeof result === \"object\" && result.error) return `Error executing ${functionName}: ${result.error} (Status: FAILED)`;\n        if (typeof result === \"object\" && result.success === false) return `Tool ${functionName} failed: ${result.message || \"No details.\"} (Status: FAILED)`;\n        // --- Format successful results ---\n        switch(functionName){\n            case \"saveUserPreference\":\n                return result.success ? `✅ Pref saved: ${result.message} (Status: SUCCESS)` : `❌ Pref fail: ${result.message} (Status: FAILED)`;\n            case \"addCalendarEvents\":\n                if (!Array.isArray(result)) return \"Error: Invalid response format from addCalendarEvents. (Status: FAILED)\";\n                if (result.length === 0) return \"No events were processed. (Status: NEUTRAL)\";\n                return result.map((item)=>{\n                    if (!item) return \"❓ Invalid item in result array. (Status: FAILED)\";\n                    if (item.error) {\n                        const summary = item.summary || \"?\";\n                        if (item.conflict) {\n                            // Include suggestions if available\n                            const suggestionText = item.suggestions && item.suggestions.length > 0 ? ` Suggested slots: ${item.suggestions.map((s)=>`${luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(s.start).toFormat(\"h:mma\")} - ${luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(s.end).toFormat(\"h:mma\")}`).join(\", \")}` : \"\";\n                            return `⚠️ Conflict detected for event \"${summary}\".${suggestionText} (Status: CONFLICT)`;\n                        } else {\n                            return `❌ Failed to add event \"${summary}\": ${item.error} (Status: FAILED)`;\n                        }\n                    } else if (item.id && item.summary && (item.start?.dateTime || item.start?.date)) {\n                        try {\n                            const startStr = formatEventTime(item.start.dateTime || item.start.date); // Use existing helper\n                            let successMsg = `✅ Event added: \"${item.summary}\" starting ${startStr}. (ID: ${item.id})`;\n                            // Add priority information if available\n                            if (item.priority) {\n                                successMsg += ` [Priority: ${item.priority}]`;\n                            }\n                            successMsg += \" (Status: SUCCESS)\";\n                            return successMsg;\n                        } catch (e) {\n                            console.error(\"Error formatting success message for added event:\", item, e);\n                            return `✅ Event added: \"${item.summary}\" (details unavailable). (ID: ${item.id}) (Status: SUCCESS)`;\n                        }\n                    } else {\n                        console.warn(\"Unexpected item shape in addCalendarEvents result:\", item);\n                        return `❓ Unknown outcome for an event attempt. (Status: UNKNOWN)`;\n                    }\n                }).join(\"\\n\");\n            case \"getCalendarEvents\":\n                if (typeof result === \"string\") return `🗓️ Events: ${result} (Status: ${result.toLowerCase().startsWith(\"error\") ? \"FAILED\" : \"SUCCESS\"})`;\n                // More robust handling of different response structures\n                let events = [];\n                if (Array.isArray(result)) {\n                    // Direct array of events\n                    events = result;\n                } else if (result && typeof result === \"object\") {\n                    if (Array.isArray(result.events)) {\n                        // Object with events array property\n                        events = result.events;\n                    } else if (result.success === false) {\n                        // Error object with success: false\n                        return `Error: ${result.error || \"Unknown error retrieving calendar events\"} (Status: FAILED)`;\n                    }\n                } else {\n                    return \"Error: Invalid getCalendarEvents response format. (Status: FAILED)\";\n                }\n                // Process the events array\n                if (events.length === 0) {\n                    return \"\\uD83D\\uDDD3️ No events found. (Status: SUCCESS)\";\n                } else {\n                    const priorityInfo = events.some((e)=>e.priority) ? \" (includes priority information)\" : \"\";\n                    return `🗓️ Found ${events.length} event(s)${priorityInfo}:\\n\\n${formatCalendarEvents(events)} (Status: SUCCESS)`;\n                }\n            case \"deleteCalendarEvent\":\n                return result.success ? `🗑️ Event \"${result.summary || result.eventId}\" deleted. (Status: SUCCESS)` // Use eventId if summary wasn't fetched/returned\n                 : `❌ Failed to delete event ${result.eventId || \"?\"}: ${result.error || result.message || \"?\"} (Status: FAILED)`;\n            case \"updateCalendarEvent\":\n                // Check if result has an ID, indicating success from googleCalendar update function\n                if (result && result.id) {\n                    let successMsg = `✏️ Event \"${result.summary || result.id}\" updated. (ID: ${result.id})`;\n                    // Add priority information if available\n                    if (result.priority) {\n                        successMsg += ` [Priority: ${result.priority}]`;\n                    }\n                    successMsg += \" (Status: SUCCESS)\";\n                    return successMsg;\n                } else {\n                    // Handle potential error objects passed back\n                    const errorMsg = result?.error || result?.message || JSON.stringify(result);\n                    return `❌ Failed to update event: ${errorMsg} (Status: FAILED)`;\n                }\n            case \"findAvailableSlots\":\n                if (!Array.isArray(result)) return \"Error: Invalid findAvailableSlots response. (Status: FAILED)\";\n                if (result.length === 0) return `🕒 No available slots found matching criteria. (Status: SUCCESS)`;\n                // Format slots with success status\n                const formattedSlots = result.map((slot)=>`${luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(slot.start).toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.DATETIME_SHORT)} - ${luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(slot.end).toLocaleString(luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.TIME_SIMPLE)}`).join(\"\\n\");\n                return `🕒 Found ${result.length} available slot(s):\\n\\n${formattedSlots}\\n\\n(Status: SUCCESS)`;\n            case \"getWeatherForecast\":\n                return `🌤️ Weather for ${result.location} on ${result.date}: ${result.forecast || \"N/A\"} (Status: ${result.forecast && !result.forecast.includes(\"unavailable\") ? \"SUCCESS\" : \"PARTIAL\"})`;\n            case \"deleteCalendarEventsByQuery\":\n                return result.success ? `🗑️ ${result.message} (Deleted Count: ${result.deletedCount}) (Status: SUCCESS)` : `❌ Failed bulk delete: ${result.message || result.error || \"?\"} (Status: FAILED)`;\n            default:\n                // Safely stringify other results with status indicators\n                if (typeof result === \"object\" && result !== null) {\n                    const status = result.success === true ? \"SUCCESS\" : result.success === false ? \"FAILED\" : \"UNKNOWN\";\n                    return `${JSON.stringify(result)} (Status: ${status})`;\n                } else {\n                    return `${String(result)} (Status: UNKNOWN)`;\n                }\n        }\n    } catch (formatError) {\n        console.error(`CRITICAL: Error *within* formatToolResponse for ${functionName}:`, formatError, \"Raw result:\", result);\n        // Return a guaranteed string error message\n        return `Internal Error: Failed to format the result for ${functionName}. (Status: ERROR)`;\n    }\n}\n// Export the functions\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0o7QUFFQSx1QkFBdUI7QUFDOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nY2FsZW5kYXJhcHAvLi9saWIvdG9vbHMvZm9ybWF0dGVycy5qcz81OTdlIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XG5cbmZ1bmN0aW9uIGZvcm1hdEV2ZW50VGltZShldmVudFRpbWUpIHtcbiAgICAvLyAuLi4gKEtlZXAgaW1wbGVtZW50YXRpb24gZnJvbSBjaGF0Ym90LmpzKSAuLi5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBkdCA9IERhdGVUaW1lLmZyb21JU08oZXZlbnRUaW1lKTtcbiAgICAgICAgaWYgKGR0LmlzVmFsaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBkdC50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5EQVRFVElNRV9GVUxMKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRlT25seSA9IERhdGVUaW1lLmZyb21JU08oZXZlbnRUaW1lLCB7IHpvbmU6ICd1dGMnIH0pO1xuICAgICAgICBpZiAoZGF0ZU9ubHkuaXNWYWxpZCkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGVPbmx5LnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVfRlVMTCkgKyBcIiAoQWxsIGRheSlcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnRUaW1lO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiRXJyb3IgZm9ybWF0dGluZyBldmVudCB0aW1lOlwiLCBldmVudFRpbWUsIGUpO1xuICAgICAgICByZXR1cm4gU3RyaW5nKGV2ZW50VGltZSk7IC8vIEVuc3VyZSByZXR1cm5zIHN0cmluZ1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZm9ybWF0Q2FsZW5kYXJFdmVudHMoZXZlbnRzKSB7XG4gICAgaWYgKCFldmVudHMpIHJldHVybiBcIk5vIGV2ZW50cyBmb3VuZCBvciBhbiBlcnJvciBvY2N1cnJlZC5cIjtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXZlbnRzKSkgcmV0dXJuIFwiQW4gZXJyb3Igb2NjdXJyZWQgcHJvY2Vzc2luZyBldmVudHMuXCI7XG4gICAgaWYgKGV2ZW50cy5sZW5ndGggPT09IDApIHJldHVybiBcIk5vIGV2ZW50cyBmb3VuZCBmb3IgdGhlIHNwZWNpZmllZCB0aW1lIHBlcmlvZC5cIjtcblxuICAgIHJldHVybiBldmVudHMubWFwKGV2ZW50ID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZVRpbWUuZnJvbUlTTyhldmVudC5zdGFydD8uZGF0ZVRpbWUgfHwgZXZlbnQuc3RhcnQ/LmRhdGUpO1xuICAgICAgICAgICAgY29uc3QgZW5kID0gRGF0ZVRpbWUuZnJvbUlTTyhldmVudC5lbmQ/LmRhdGVUaW1lIHx8IGV2ZW50LmVuZD8uZGF0ZSk7XG4gICAgICAgICAgICBpZiAoIXN0YXJ0LmlzVmFsaWQgfHwgIWVuZC5pc1ZhbGlkKSByZXR1cm4gYOKdkyBJbnZhbGlkIGRhdGUgZm91bmQgZm9yIGV2ZW50OiAke2V2ZW50LnN1bW1hcnkgfHwgZXZlbnQuaWR9YDtcblxuICAgICAgICAgICAgY29uc3QgaXNBbGxEYXkgPSAhZXZlbnQuc3RhcnQ/LmRhdGVUaW1lO1xuICAgICAgICAgICAgLy8gSW5jbHVkZSB0aGUgZXZlbnQgSUQgaW4gdGhlIGZvcm1hdHRlZCBvdXRwdXQgKGhpZGRlbiB3aXRoIGEgemVyby13aWR0aCBzcGFjZSBmb3IgcmVmZXJlbmNlKVxuICAgICAgICAgICAgbGV0IGZvcm1hdHRlZEV2ZW50ID0gYPCfk4UgJHtldmVudC5zdW1tYXJ5IHx8ICcoTm8gVGl0bGUpJ30gW0lEOuKAiyR7ZXZlbnQuaWR9XVxcbmA7XG4gICAgICAgICAgICBmb3JtYXR0ZWRFdmVudCArPSBgICAg8J+ThiAke3N0YXJ0LnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVfRlVMTCl9XFxuYDtcbiAgICAgICAgICAgIGlmICghaXNBbGxEYXkpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRFdmVudCArPSBgICAg8J+VkiAke3N0YXJ0LnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLlRJTUVfU0lNUExFKX0gLSAke2VuZC50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5USU1FX1NJTVBMRSl9XFxuYDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkRXZlbnQgKz0gYCAgIPCflZIgQWxsIERheVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXZlbnQuZGVzY3JpcHRpb24pIGZvcm1hdHRlZEV2ZW50ICs9IGAgICDwn5OdICR7ZXZlbnQuZGVzY3JpcHRpb259XFxuYDtcbiAgICAgICAgICAgIGlmIChldmVudC5sb2NhdGlvbikgZm9ybWF0dGVkRXZlbnQgKz0gYCAgIPCfk40gJHtldmVudC5sb2NhdGlvbn1cXG5gO1xuICAgICAgICAgICAgaWYgKGV2ZW50LnJlbWluZGVycz8udXNlRGVmYXVsdCA9PT0gZmFsc2UgJiYgQXJyYXkuaXNBcnJheShldmVudC5yZW1pbmRlcnMub3ZlcnJpZGVzKSkge1xuICAgICAgICAgICAgICAgIGZvcm1hdHRlZEV2ZW50ICs9IGAgICDwn5SUIFJlbWluZGVyczogJHtldmVudC5yZW1pbmRlcnMub3ZlcnJpZGVzLm1hcChyID0+IGAke3IubWludXRlc30gbWluYCkuam9pbignLCAnKX1cXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGV2ZW50IGhhcyBhIHByaW9yaXR5IHByb3BlcnR5IGFuZCBkaXNwbGF5IGl0XG4gICAgICAgICAgICBpZiAoZXZlbnQucHJpb3JpdHkpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRFdmVudCArPSBgICAg8J+aqSBQcmlvcml0eTogJHtldmVudC5wcmlvcml0eX1cXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGV2ZW50IGhhcyB0YWdzIGFuZCBkaXNwbGF5IHRoZW1cbiAgICAgICAgICAgIGlmIChldmVudC50YWdzICYmIEFycmF5LmlzQXJyYXkoZXZlbnQudGFncykgJiYgZXZlbnQudGFncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkRXZlbnQgKz0gYCAgIPCfj7fvuI8gVGFnczogJHtldmVudC50YWdzLmpvaW4oJywgJyl9XFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZWRFdmVudC50cmltKCk7IC8vIFRyaW0gZWFjaCBldmVudCBzdHJpbmdcbiAgICAgICAgfSBjYXRjaCAobWFwRXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBtYXBwaW5nIGV2ZW50OlwiLCBldmVudCwgbWFwRXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIGDinZMgRXJyb3IgcHJvY2Vzc2luZyBldmVudDogJHtldmVudC5zdW1tYXJ5IHx8IGV2ZW50LmlkfWA7XG4gICAgICAgIH1cbiAgICB9KS5qb2luKCdcXG5cXG4nKTsgLy8gQWRkIHNwYWNlIGJldHdlZW4gZXZlbnRzXG59XG5cblxuLy8gLS0tIEZvcm1hdHRpbmcgVG9vbCBSZXNwb25zZXMgZm9yIHRoZSBMTE0gLS0tXG5mdW5jdGlvbiBmb3JtYXRUb29sUmVzcG9uc2UoZnVuY3Rpb25OYW1lLCByZXN1bHQpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBFeHBsaWNpdGx5IGhhbmRsZSBudWxsL3VuZGVmaW5lZCByZXN1bHRzIGZpcnN0XG4gICAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBUb29sICR7ZnVuY3Rpb25OYW1lfSByZXR1cm5lZCBudWxsIG9yIHVuZGVmaW5lZC5gKTtcbiAgICAgICAgICAgIHJldHVybiBgVG9vbCAke2Z1bmN0aW9uTmFtZX0gZGlkIG5vdCByZXR1cm4gYSByZXN1bHQuIChTdGF0dXM6IEZBSUxFRClgO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIGtub3duIGVycm9yIHNoYXBlcyByZXR1cm5lZCBieSB0b29sIGZ1bmN0aW9uc1xuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycgJiYgcmVzdWx0LnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCgnZXJyb3I6JykpXG4gICAgICAgICAgICByZXR1cm4gYCR7cmVzdWx0fSAoU3RhdHVzOiBGQUlMRUQpYDtcbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnICYmIHJlc3VsdC5lcnJvcilcbiAgICAgICAgICAgIHJldHVybiBgRXJyb3IgZXhlY3V0aW5nICR7ZnVuY3Rpb25OYW1lfTogJHtyZXN1bHQuZXJyb3J9IChTdGF0dXM6IEZBSUxFRClgO1xuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcgJiYgcmVzdWx0LnN1Y2Nlc3MgPT09IGZhbHNlKVxuICAgICAgICAgICAgcmV0dXJuIGBUb29sICR7ZnVuY3Rpb25OYW1lfSBmYWlsZWQ6ICR7cmVzdWx0Lm1lc3NhZ2UgfHwgJ05vIGRldGFpbHMuJ30gKFN0YXR1czogRkFJTEVEKWA7XG5cbiAgICAgICAgLy8gLS0tIEZvcm1hdCBzdWNjZXNzZnVsIHJlc3VsdHMgLS0tXG4gICAgICAgIHN3aXRjaCAoZnVuY3Rpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlICdzYXZlVXNlclByZWZlcmVuY2UnOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuc3VjY2VzcyA/IGDinIUgUHJlZiBzYXZlZDogJHtyZXN1bHQubWVzc2FnZX0gKFN0YXR1czogU1VDQ0VTUylgIDogYOKdjCBQcmVmIGZhaWw6ICR7cmVzdWx0Lm1lc3NhZ2V9IChTdGF0dXM6IEZBSUxFRClgO1xuXG4gICAgICAgICAgICBjYXNlICdhZGRDYWxlbmRhckV2ZW50cyc6XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlc3VsdCkpIHJldHVybiBcIkVycm9yOiBJbnZhbGlkIHJlc3BvbnNlIGZvcm1hdCBmcm9tIGFkZENhbGVuZGFyRXZlbnRzLiAoU3RhdHVzOiBGQUlMRUQpXCI7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDApIHJldHVybiBcIk5vIGV2ZW50cyB3ZXJlIHByb2Nlc3NlZC4gKFN0YXR1czogTkVVVFJBTClcIjtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Lm1hcChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdGVtKSByZXR1cm4gJ+KdkyBJbnZhbGlkIGl0ZW0gaW4gcmVzdWx0IGFycmF5LiAoU3RhdHVzOiBGQUlMRUQpJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uZXJyb3IpIHsgLy8gSGFuZGxlIGV4cGxpY2l0IGVycm9ycyBmaXJzdCAoY29uZmxpY3QsIHZhbGlkYXRpb24sIEFQSSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1bW1hcnkgPSBpdGVtLnN1bW1hcnkgfHwgJz8nO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uY29uZmxpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmNsdWRlIHN1Z2dlc3Rpb25zIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25UZXh0ID0gaXRlbS5zdWdnZXN0aW9ucyAmJiBpdGVtLnN1Z2dlc3Rpb25zLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBgIFN1Z2dlc3RlZCBzbG90czogJHtpdGVtLnN1Z2dlc3Rpb25zLm1hcChzID0+IGAke0RhdGVUaW1lLmZyb21JU08ocy5zdGFydCkudG9Gb3JtYXQoJ2g6bW1hJyl9IC0gJHtEYXRlVGltZS5mcm9tSVNPKHMuZW5kKS50b0Zvcm1hdCgnaDptbWEnKX1gKS5qb2luKCcsICcpfWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYOKaoO+4jyBDb25mbGljdCBkZXRlY3RlZCBmb3IgZXZlbnQgXCIke3N1bW1hcnl9XCIuJHtzdWdnZXN0aW9uVGV4dH0gKFN0YXR1czogQ09ORkxJQ1QpYDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGDinYwgRmFpbGVkIHRvIGFkZCBldmVudCBcIiR7c3VtbWFyeX1cIjogJHtpdGVtLmVycm9yfSAoU3RhdHVzOiBGQUlMRUQpYDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLmlkICYmIGl0ZW0uc3VtbWFyeSAmJiAoaXRlbS5zdGFydD8uZGF0ZVRpbWUgfHwgaXRlbS5zdGFydD8uZGF0ZSkpIHsgLy8gQXNzdW1lIHN1Y2Nlc3MgaWYga2V5IGZpZWxkcyBleGlzdFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydFN0ciA9IGZvcm1hdEV2ZW50VGltZShpdGVtLnN0YXJ0LmRhdGVUaW1lIHx8IGl0ZW0uc3RhcnQuZGF0ZSk7IC8vIFVzZSBleGlzdGluZyBoZWxwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3VjY2Vzc01zZyA9IGDinIUgRXZlbnQgYWRkZWQ6IFwiJHtpdGVtLnN1bW1hcnl9XCIgc3RhcnRpbmcgJHtzdGFydFN0cn0uIChJRDogJHtpdGVtLmlkfSlgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBwcmlvcml0eSBpbmZvcm1hdGlvbiBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5wcmlvcml0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzTXNnICs9IGAgW1ByaW9yaXR5OiAke2l0ZW0ucHJpb3JpdHl9XWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NNc2cgKz0gXCIgKFN0YXR1czogU1VDQ0VTUylcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VjY2Vzc01zZztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZm9ybWF0dGluZyBzdWNjZXNzIG1lc3NhZ2UgZm9yIGFkZGVkIGV2ZW50OlwiLCBpdGVtLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYOKchSBFdmVudCBhZGRlZDogXCIke2l0ZW0uc3VtbWFyeX1cIiAoZGV0YWlscyB1bmF2YWlsYWJsZSkuIChJRDogJHtpdGVtLmlkfSkgKFN0YXR1czogU1VDQ0VTUylgO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBGYWxsYmFjayBmb3IgdW5leHBlY3RlZCBzaGFwZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlVuZXhwZWN0ZWQgaXRlbSBzaGFwZSBpbiBhZGRDYWxlbmRhckV2ZW50cyByZXN1bHQ6XCIsIGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGDinZMgVW5rbm93biBvdXRjb21lIGZvciBhbiBldmVudCBhdHRlbXB0LiAoU3RhdHVzOiBVTktOT1dOKWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcblxuICAgICAgICAgICAgY2FzZSAnZ2V0Q2FsZW5kYXJFdmVudHMnOlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGDwn5eT77iPIEV2ZW50czogJHtyZXN1bHR9IChTdGF0dXM6ICR7cmVzdWx0LnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCgnZXJyb3InKSA/ICdGQUlMRUQnIDogJ1NVQ0NFU1MnfSlgO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIE1vcmUgcm9idXN0IGhhbmRsaW5nIG9mIGRpZmZlcmVudCByZXNwb25zZSBzdHJ1Y3R1cmVzXG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50cyA9IFtdO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGlyZWN0IGFycmF5IG9mIGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICBldmVudHMgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0LmV2ZW50cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9iamVjdCB3aXRoIGV2ZW50cyBhcnJheSBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gcmVzdWx0LmV2ZW50cztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuc3VjY2VzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVycm9yIG9iamVjdCB3aXRoIHN1Y2Nlc3M6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYEVycm9yOiAke3Jlc3VsdC5lcnJvciB8fCAnVW5rbm93biBlcnJvciByZXRyaWV2aW5nIGNhbGVuZGFyIGV2ZW50cyd9IChTdGF0dXM6IEZBSUxFRClgO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRXJyb3I6IEludmFsaWQgZ2V0Q2FsZW5kYXJFdmVudHMgcmVzcG9uc2UgZm9ybWF0LiAoU3RhdHVzOiBGQUlMRUQpXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgdGhlIGV2ZW50cyBhcnJheVxuICAgICAgICAgICAgICAgIGlmIChldmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIvCfl5PvuI8gTm8gZXZlbnRzIGZvdW5kLiAoU3RhdHVzOiBTVUNDRVNTKVwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaW9yaXR5SW5mbyA9IGV2ZW50cy5zb21lKGUgPT4gZS5wcmlvcml0eSkgPyAnIChpbmNsdWRlcyBwcmlvcml0eSBpbmZvcm1hdGlvbiknIDogJyc7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBg8J+Xk++4jyBGb3VuZCAke2V2ZW50cy5sZW5ndGh9IGV2ZW50KHMpJHtwcmlvcml0eUluZm99OlxcblxcbiR7Zm9ybWF0Q2FsZW5kYXJFdmVudHMoZXZlbnRzKX0gKFN0YXR1czogU1VDQ0VTUylgO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSAnZGVsZXRlQ2FsZW5kYXJFdmVudCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5zdWNjZXNzXG4gICAgICAgICAgICAgICAgICAgID8gYPCfl5HvuI8gRXZlbnQgXCIke3Jlc3VsdC5zdW1tYXJ5IHx8IHJlc3VsdC5ldmVudElkfVwiIGRlbGV0ZWQuIChTdGF0dXM6IFNVQ0NFU1MpYCAvLyBVc2UgZXZlbnRJZCBpZiBzdW1tYXJ5IHdhc24ndCBmZXRjaGVkL3JldHVybmVkXG4gICAgICAgICAgICAgICAgICAgIDogYOKdjCBGYWlsZWQgdG8gZGVsZXRlIGV2ZW50ICR7cmVzdWx0LmV2ZW50SWQgfHwgJz8nfTogJHtyZXN1bHQuZXJyb3IgfHwgcmVzdWx0Lm1lc3NhZ2UgfHwgJz8nfSAoU3RhdHVzOiBGQUlMRUQpYDtcblxuICAgICAgICAgICAgY2FzZSAndXBkYXRlQ2FsZW5kYXJFdmVudCc6XG4gICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHJlc3VsdCBoYXMgYW4gSUQsIGluZGljYXRpbmcgc3VjY2VzcyBmcm9tIGdvb2dsZUNhbGVuZGFyIHVwZGF0ZSBmdW5jdGlvblxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdWNjZXNzTXNnID0gYOKcj++4jyBFdmVudCBcIiR7cmVzdWx0LnN1bW1hcnkgfHwgcmVzdWx0LmlkfVwiIHVwZGF0ZWQuIChJRDogJHtyZXN1bHQuaWR9KWA7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBwcmlvcml0eSBpbmZvcm1hdGlvbiBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5wcmlvcml0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc01zZyArPSBgIFtQcmlvcml0eTogJHtyZXN1bHQucHJpb3JpdHl9XWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc01zZyArPSBcIiAoU3RhdHVzOiBTVUNDRVNTKVwiO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VjY2Vzc01zZztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgcG90ZW50aWFsIGVycm9yIG9iamVjdHMgcGFzc2VkIGJhY2tcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNc2cgPSByZXN1bHQ/LmVycm9yIHx8IHJlc3VsdD8ubWVzc2FnZSB8fCBKU09OLnN0cmluZ2lmeShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYOKdjCBGYWlsZWQgdG8gdXBkYXRlIGV2ZW50OiAke2Vycm9yTXNnfSAoU3RhdHVzOiBGQUlMRUQpYDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgJ2ZpbmRBdmFpbGFibGVTbG90cyc6XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkVycm9yOiBJbnZhbGlkIGZpbmRBdmFpbGFibGVTbG90cyByZXNwb25zZS4gKFN0YXR1czogRkFJTEVEKVwiO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYPCflZIgTm8gYXZhaWxhYmxlIHNsb3RzIGZvdW5kIG1hdGNoaW5nIGNyaXRlcmlhLiAoU3RhdHVzOiBTVUNDRVNTKWA7XG4gICAgICAgICAgICAgICAgLy8gRm9ybWF0IHNsb3RzIHdpdGggc3VjY2VzcyBzdGF0dXNcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRTbG90cyA9IHJlc3VsdC5tYXAoc2xvdCA9PlxuICAgICAgICAgICAgICAgICAgICBgJHtEYXRlVGltZS5mcm9tSVNPKHNsb3Quc3RhcnQpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVUSU1FX1NIT1JUKX0gLSAke0RhdGVUaW1lLmZyb21JU08oc2xvdC5lbmQpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLlRJTUVfU0lNUExFKX1gXG4gICAgICAgICAgICAgICAgKS5qb2luKCdcXG4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYPCflZIgRm91bmQgJHtyZXN1bHQubGVuZ3RofSBhdmFpbGFibGUgc2xvdChzKTpcXG5cXG4ke2Zvcm1hdHRlZFNsb3RzfVxcblxcbihTdGF0dXM6IFNVQ0NFU1MpYDtcblxuICAgICAgICAgICAgY2FzZSAnZ2V0V2VhdGhlckZvcmVjYXN0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gYPCfjKTvuI8gV2VhdGhlciBmb3IgJHtyZXN1bHQubG9jYXRpb259IG9uICR7cmVzdWx0LmRhdGV9OiAke3Jlc3VsdC5mb3JlY2FzdCB8fCAnTi9BJ30gKFN0YXR1czogJHtyZXN1bHQuZm9yZWNhc3QgJiYgIXJlc3VsdC5mb3JlY2FzdC5pbmNsdWRlcygndW5hdmFpbGFibGUnKSA/ICdTVUNDRVNTJyA6ICdQQVJUSUFMJ30pYDtcblxuICAgICAgICAgICAgY2FzZSAnZGVsZXRlQ2FsZW5kYXJFdmVudHNCeVF1ZXJ5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LnN1Y2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgPyBg8J+Xke+4jyAke3Jlc3VsdC5tZXNzYWdlfSAoRGVsZXRlZCBDb3VudDogJHtyZXN1bHQuZGVsZXRlZENvdW50fSkgKFN0YXR1czogU1VDQ0VTUylgXG4gICAgICAgICAgICAgICAgICAgIDogYOKdjCBGYWlsZWQgYnVsayBkZWxldGU6ICR7cmVzdWx0Lm1lc3NhZ2UgfHwgcmVzdWx0LmVycm9yIHx8ICc/J30gKFN0YXR1czogRkFJTEVEKWA7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gU2FmZWx5IHN0cmluZ2lmeSBvdGhlciByZXN1bHRzIHdpdGggc3RhdHVzIGluZGljYXRvcnNcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcgJiYgcmVzdWx0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IHJlc3VsdC5zdWNjZXNzID09PSB0cnVlID8gJ1NVQ0NFU1MnIDogKHJlc3VsdC5zdWNjZXNzID09PSBmYWxzZSA/ICdGQUlMRUQnIDogJ1VOS05PV04nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke0pTT04uc3RyaW5naWZ5KHJlc3VsdCl9IChTdGF0dXM6ICR7c3RhdHVzfSlgO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtTdHJpbmcocmVzdWx0KX0gKFN0YXR1czogVU5LTk9XTilgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGZvcm1hdEVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYENSSVRJQ0FMOiBFcnJvciAqd2l0aGluKiBmb3JtYXRUb29sUmVzcG9uc2UgZm9yICR7ZnVuY3Rpb25OYW1lfTpgLCBmb3JtYXRFcnJvciwgXCJSYXcgcmVzdWx0OlwiLCByZXN1bHQpO1xuICAgICAgICAvLyBSZXR1cm4gYSBndWFyYW50ZWVkIHN0cmluZyBlcnJvciBtZXNzYWdlXG4gICAgICAgIHJldHVybiBgSW50ZXJuYWwgRXJyb3I6IEZhaWxlZCB0byBmb3JtYXQgdGhlIHJlc3VsdCBmb3IgJHtmdW5jdGlvbk5hbWV9LiAoU3RhdHVzOiBFUlJPUilgO1xuICAgIH1cbn1cblxuLy8gRXhwb3J0IHRoZSBmdW5jdGlvbnNcbmV4cG9ydCB7IGZvcm1hdEV2ZW50VGltZSwgZm9ybWF0Q2FsZW5kYXJFdmVudHMsIGZvcm1hdFRvb2xSZXNwb25zZSB9O1xuIl0sIm5hbWVzIjpbIkRhdGVUaW1lIiwiZm9ybWF0RXZlbnRUaW1lIiwiZXZlbnRUaW1lIiwiZHQiLCJmcm9tSVNPIiwiaXNWYWxpZCIsInRvTG9jYWxlU3RyaW5nIiwiREFURVRJTUVfRlVMTCIsImRhdGVPbmx5Iiwiem9uZSIsIkRBVEVfRlVMTCIsImUiLCJjb25zb2xlIiwid2FybiIsIlN0cmluZyIsImZvcm1hdENhbGVuZGFyRXZlbnRzIiwiZXZlbnRzIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwibWFwIiwiZXZlbnQiLCJzdGFydCIsImRhdGVUaW1lIiwiZGF0ZSIsImVuZCIsInN1bW1hcnkiLCJpZCIsImlzQWxsRGF5IiwiZm9ybWF0dGVkRXZlbnQiLCJUSU1FX1NJTVBMRSIsImRlc2NyaXB0aW9uIiwibG9jYXRpb24iLCJyZW1pbmRlcnMiLCJ1c2VEZWZhdWx0Iiwib3ZlcnJpZGVzIiwiciIsIm1pbnV0ZXMiLCJqb2luIiwicHJpb3JpdHkiLCJ0YWdzIiwidHJpbSIsIm1hcEVycm9yIiwiZXJyb3IiLCJmb3JtYXRUb29sUmVzcG9uc2UiLCJmdW5jdGlvbk5hbWUiLCJyZXN1bHQiLCJ0b0xvd2VyQ2FzZSIsInN0YXJ0c1dpdGgiLCJzdWNjZXNzIiwibWVzc2FnZSIsIml0ZW0iLCJjb25mbGljdCIsInN1Z2dlc3Rpb25UZXh0Iiwic3VnZ2VzdGlvbnMiLCJzIiwidG9Gb3JtYXQiLCJzdGFydFN0ciIsInN1Y2Nlc3NNc2ciLCJwcmlvcml0eUluZm8iLCJzb21lIiwiZXZlbnRJZCIsImVycm9yTXNnIiwiSlNPTiIsInN0cmluZ2lmeSIsImZvcm1hdHRlZFNsb3RzIiwic2xvdCIsIkRBVEVUSU1FX1NIT1JUIiwiZm9yZWNhc3QiLCJpbmNsdWRlcyIsImRlbGV0ZWRDb3VudCIsInN0YXR1cyIsImZvcm1hdEVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/tools/formatters.js\n");

/***/ }),

/***/ "(api)/./lib/tools/schedulingUtils.js":
/*!**************************************!*\
  !*** ./lib/tools/schedulingUtils.js ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findAvailableSlots: () => (/* binding */ findAvailableSlots),\n/* harmony export */   formatAvailableSlots: () => (/* binding */ formatAvailableSlots)\n/* harmony export */ });\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! luxon */ \"luxon\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([luxon__WEBPACK_IMPORTED_MODULE_0__]);\nluxon__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/**\n * Default working hours configuration\n * Can be extended to fetch from user preferences in the future\n */ const DEFAULT_WORKING_HOURS = {\n    start: 9,\n    end: 17,\n    workDays: [\n        1,\n        2,\n        3,\n        4,\n        5\n    ]\n};\n/**\n * Find available time slots for a new event\n * @param {Array} events - List of calendar events\n * @param {number} duration - Duration of the event in minutes\n * @param {string} startDate - Start date to search from in ISO format\n * @param {string} endDate - End date to search until in ISO format\n * @param {string} activity - Type of activity being scheduled\n * @param {string} timePreference - Preferred time of day (morning, afternoon, evening, any)\n * @param {Object} workingHours - Optional working hours configuration\n * @returns {Array} - List of available time slots with pros and cons\n */ function findAvailableSlots(events, duration, startDate, endDate, activity, timePreference = \"any\", workingHours = DEFAULT_WORKING_HOURS) {\n    // Convert inputs to Luxon objects\n    const start = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(startDate);\n    const end = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(endDate);\n    const durationMinutes = duration;\n    // Create a list of busy intervals from events\n    const busyIntervals = events.map((event)=>{\n        const eventStart = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.start.dateTime || event.start.date);\n        const eventEnd = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.end.dateTime || event.end.date);\n        return {\n            interval: luxon__WEBPACK_IMPORTED_MODULE_0__.Interval.fromDateTimes(eventStart, eventEnd),\n            summary: event.summary\n        };\n    });\n    // Generate potential slots\n    const slots = generatePotentialSlots(start, end, durationMinutes, busyIntervals, timePreference, workingHours);\n    // Evaluate and rank slots\n    const evaluatedSlots = evaluateSlots(slots, busyIntervals, durationMinutes, activity, timePreference);\n    // Return top slots (limited to 3)\n    return evaluatedSlots.slice(0, 3);\n}\n/**\n * Generate potential time slots based on constraints\n * @param {DateTime} start - Start date/time to search from\n * @param {DateTime} end - End date/time to search until\n * @param {number} durationMinutes - Duration in minutes\n * @param {Array} busyIntervals - List of busy time intervals\n * @param {string} timePreference - Preferred time of day\n * @param {Object} workingHours - Working hours configuration\n * @returns {Array} - List of potential time slots\n */ function generatePotentialSlots(start, end, durationMinutes, busyIntervals, timePreference, workingHours) {\n    const slots = [];\n    const slotDuration = luxon__WEBPACK_IMPORTED_MODULE_0__.Duration.fromObject({\n        minutes: durationMinutes\n    });\n    // Start from the beginning of the search period\n    let currentTime = start;\n    // Iterate through each day in the search period\n    while(currentTime < end){\n        // Check if this is a working day\n        const isWorkingDay = workingHours.workDays.includes(currentTime.weekday);\n        if (isWorkingDay) {\n            // Set start time to either current time or beginning of working hours\n            let dayStart = currentTime.set({\n                hour: workingHours.start,\n                minute: 0,\n                second: 0,\n                millisecond: 0\n            });\n            // If we're already past the working hours start for today, use current time\n            if (currentTime > dayStart) {\n                dayStart = currentTime;\n            }\n            // End of working hours for today\n            const dayEnd = currentTime.set({\n                hour: workingHours.end,\n                minute: 0,\n                second: 0,\n                millisecond: 0\n            });\n            // Generate slots for this day\n            let slotStart = dayStart;\n            // Use 30-minute increments for slot generation\n            while(slotStart.plus(slotDuration) <= dayEnd){\n                const slotEnd = slotStart.plus(slotDuration);\n                const currentSlot = luxon__WEBPACK_IMPORTED_MODULE_0__.Interval.fromDateTimes(slotStart, slotEnd);\n                // Check if this slot overlaps with any busy intervals\n                const isAvailable = !busyIntervals.some((busy)=>busy.interval.overlaps(currentSlot));\n                if (isAvailable) {\n                    // Check if this slot matches the time preference\n                    const hour = slotStart.hour;\n                    let matchesPreference = true;\n                    if (timePreference === \"morning\" && (hour < 8 || hour >= 12)) {\n                        matchesPreference = false;\n                    } else if (timePreference === \"afternoon\" && (hour < 12 || hour >= 17)) {\n                        matchesPreference = false;\n                    } else if (timePreference === \"evening\" && (hour < 17 || hour >= 21)) {\n                        matchesPreference = false;\n                    }\n                    if (matchesPreference) {\n                        slots.push({\n                            start: slotStart.toISO(),\n                            end: slotEnd.toISO(),\n                            startDateTime: slotStart,\n                            endDateTime: slotEnd\n                        });\n                    }\n                }\n                // Move to next slot (30-minute increments)\n                slotStart = slotStart.plus({\n                    minutes: 30\n                });\n            }\n        }\n        // Move to next day\n        currentTime = currentTime.plus({\n            days: 1\n        }).startOf(\"day\");\n    }\n    return slots;\n}\n/**\n * Evaluate and rank available time slots\n * @param {Array} slots - List of potential time slots\n * @param {Array} busyIntervals - List of busy time intervals\n * @param {number} durationMinutes - Duration in minutes\n * @param {string} activity - Type of activity\n * @param {string} timePreference - Preferred time of day\n * @returns {Array} - Evaluated and ranked slots with pros and cons\n */ function evaluateSlots(slots, busyIntervals, durationMinutes, activity, timePreference) {\n    return slots.map((slot)=>{\n        const slotStart = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(slot.start);\n        const slotEnd = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(slot.end);\n        const slotInterval = luxon__WEBPACK_IMPORTED_MODULE_0__.Interval.fromDateTimes(slotStart, slotEnd);\n        // Generate pros and cons\n        const { pros, cons } = generateProsAndCons(slotStart, slotEnd, busyIntervals, activity, timePreference);\n        // Calculate a score based on pros and cons\n        const score = calculateScore(slotStart, pros, cons, timePreference);\n        return {\n            start: slot.start,\n            end: slot.end,\n            pros,\n            cons,\n            score\n        };\n    })// Sort by score (highest first)\n    .sort((a, b)=>b.score - a.score);\n}\n/**\n * Generate pros and cons for a time slot\n * @param {DateTime} slotStart - Start time of the slot\n * @param {DateTime} slotEnd - End time of the slot\n * @param {Array} busyIntervals - List of busy time intervals\n * @param {string} activity - Type of activity\n * @param {string} timePreference - Preferred time of day\n * @returns {Object} - Object containing pros and cons arrays\n */ function generateProsAndCons(slotStart, slotEnd, busyIntervals, activity, timePreference) {\n    const pros = [];\n    const cons = [];\n    // Time of day factors\n    const hour = slotStart.hour;\n    // Check if slot is during preferred time\n    if (timePreference === \"morning\" && hour >= 8 && hour < 12) {\n        pros.push(\"Matches your morning time preference\");\n    } else if (timePreference === \"afternoon\" && hour >= 12 && hour < 17) {\n        pros.push(\"Matches your afternoon time preference\");\n    } else if (timePreference === \"evening\" && hour >= 17 && hour < 21) {\n        pros.push(\"Matches your evening time preference\");\n    } else if (timePreference !== \"any\") {\n        cons.push(`Outside your preferred ${timePreference} time`);\n    }\n    // Early morning/late evening factors\n    if (hour < 8) {\n        cons.push(\"Early morning slot may be difficult to attend\");\n    } else if (hour >= 20) {\n        cons.push(\"Late evening slot may interfere with personal time\");\n    }\n    // Ideal working hours\n    if (hour >= 9 && hour < 17) {\n        pros.push(\"During standard working hours\");\n    }\n    // Lunch time\n    if (hour >= 12 && hour < 14) {\n        if (activity.toLowerCase().includes(\"lunch\") || activity.toLowerCase().includes(\"meal\") || activity.toLowerCase().includes(\"eat\")) {\n            pros.push(\"Ideal time for a meal\");\n        } else {\n            cons.push(\"May conflict with lunch time\");\n        }\n    }\n    // Proximity to other events\n    const bufferTime = luxon__WEBPACK_IMPORTED_MODULE_0__.Duration.fromObject({\n        minutes: 30\n    });\n    let hasEventBefore = false;\n    let hasEventAfter = false;\n    for (const busy of busyIntervals){\n        const busyEnd = busy.interval.end;\n        const busyStart = busy.interval.start;\n        // Check if there's an event ending right before this slot\n        if (busyEnd <= slotStart && busyEnd.plus(bufferTime) >= slotStart) {\n            hasEventBefore = true;\n            pros.push(`Convenient timing after \"${busy.summary}\"`);\n        }\n        // Check if there's an event starting right after this slot\n        if (busyStart >= slotEnd && busyStart.minus(bufferTime) <= slotEnd) {\n            hasEventAfter = true;\n            pros.push(`Convenient timing before \"${busy.summary}\"`);\n        }\n    }\n    // If the slot is sandwiched between events\n    if (hasEventBefore && hasEventAfter) {\n        pros.push(\"Efficiently uses gap between events\");\n    }\n    // Day of week factors\n    const dayOfWeek = slotStart.weekday;\n    if (dayOfWeek === 1) {\n        if (hour < 11) {\n            cons.push(\"Early Monday morning may be busy with weekly planning\");\n        } else {\n            pros.push(\"Good for setting the tone for the week\");\n        }\n    } else if (dayOfWeek === 5) {\n        if (hour >= 15) {\n            cons.push(\"Late Friday may conflict with weekend plans\");\n        } else {\n            pros.push(\"Good for wrapping up the week\");\n        }\n    } else if (dayOfWeek === 6 || dayOfWeek === 7) {\n        if (activity.toLowerCase().includes(\"work\") || activity.toLowerCase().includes(\"meeting\") || activity.toLowerCase().includes(\"call\")) {\n            cons.push(\"Weekend slot for work-related activity\");\n        } else {\n            pros.push(\"Weekend slot good for personal activities\");\n        }\n    }\n    // Activity-specific factors\n    if (activity.toLowerCase().includes(\"exercise\") || activity.toLowerCase().includes(\"workout\") || activity.toLowerCase().includes(\"gym\")) {\n        if (hour >= 6 && hour < 9) {\n            pros.push(\"Morning exercise can boost energy for the day\");\n        } else if (hour >= 17 && hour < 20) {\n            pros.push(\"Evening exercise can help unwind after work\");\n        }\n    }\n    // Ensure we have at least one pro and con\n    if (pros.length === 0) {\n        pros.push(\"Available time slot that fits your schedule\");\n    }\n    if (cons.length === 0) {\n        // Look for any minor drawback\n        if (slotStart.minute !== 0 && slotStart.minute !== 30) {\n            cons.push(\"Starts at an unusual time\");\n        } else if (dayOfWeek >= 1 && dayOfWeek <= 5 && (hour < 9 || hour >= 17)) {\n            cons.push(\"Outside standard working hours\");\n        } else {\n            cons.push(\"No significant drawbacks identified\");\n        }\n    }\n    return {\n        pros,\n        cons\n    };\n}\n/**\n * Calculate a score for ranking time slots\n * @param {DateTime} slotStart - Start time of the slot\n * @param {Array} pros - List of pros\n * @param {Array} cons - List of cons\n * @param {string} timePreference - Preferred time of day\n * @returns {number} - Score for ranking\n */ function calculateScore(slotStart, pros, cons, timePreference) {\n    let score = 0;\n    // Base score from pros and cons count\n    score += pros.length * 10;\n    score -= cons.length * 8;\n    // Preferred time bonus\n    const hour = slotStart.hour;\n    if (timePreference === \"morning\" && hour >= 8 && hour < 12) {\n        score += 15;\n    } else if (timePreference === \"afternoon\" && hour >= 12 && hour < 17) {\n        score += 15;\n    } else if (timePreference === \"evening\" && hour >= 17 && hour < 21) {\n        score += 15;\n    }\n    // Ideal working hours bonus\n    if (hour >= 9 && hour < 17) {\n        score += 5;\n    }\n    // Prefer earlier slots when all else is equal (for consistent sorting)\n    score -= slotStart.hour * 0.1;\n    return score;\n}\n/**\n * Format available slots for display\n * @param {Array} slots - List of available slots with pros and cons\n * @returns {string} - Formatted string for display\n */ function formatAvailableSlots(slots) {\n    if (!slots || slots.length === 0) {\n        return \"No available slots found.\";\n    }\n    let result = \"Available time slots:\\n\\n\";\n    slots.forEach((slot, index)=>{\n        const start = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(slot.start);\n        const end = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(slot.end);\n        result += `Option ${index + 1}: ${start.toFormat(\"ccc, LLL d\")} from ${start.toFormat(\"h:mm a\")} to ${end.toFormat(\"h:mm a\")}\\n`;\n        result += \"Pros:\\n\";\n        slot.pros.forEach((pro)=>{\n            result += `- ${pro}\\n`;\n        });\n        result += \"Cons:\\n\";\n        slot.cons.forEach((con)=>{\n            result += `- ${con}\\n`;\n        });\n        if (index < slots.length - 1) {\n            result += \"\\n\";\n        }\n    });\n    return result;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/tools/schedulingUtils.js\n");

/***/ }),

/***/ "(api)/./lib/tools/timeUtils.js":
/*!********************************!*\
  !*** ./lib/tools/timeUtils.js ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToUTCISOString: () => (/* binding */ convertToUTCISOString),\n/* harmony export */   getUserTimezone: () => (/* binding */ getUserTimezone)\n/* harmony export */ });\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! luxon */ \"luxon\");\n/* harmony import */ var chrono_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! chrono-node */ \"chrono-node\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([luxon__WEBPACK_IMPORTED_MODULE_0__, chrono_node__WEBPACK_IMPORTED_MODULE_1__]);\n([luxon__WEBPACK_IMPORTED_MODULE_0__, chrono_node__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n/**\n * Gets the user's configured timezone.\n * In a real application, this should ideally fetch from user database preferences\n * or potentially derive from the user's session/request context.\n *\n * @returns {string} - User's IANA timezone string (e.g., \"America/Winnipeg\"). Defaults to 'UTC'.\n */ function getUserTimezone() {\n    try {\n        // --- PLACEHOLDER: Replace with actual logic ---\n        // Option 1: Fetch from User Preferences (requires passing userId or context)\n        // const userPrefs = await fetchUserPreferences(userId);\n        // if (userPrefs?.timezone) return userPrefs.timezone;\n        // Option 2: Get from environment/config (less flexible)\n        // if (process.env.DEFAULT_USER_TIMEZONE) return process.env.DEFAULT_USER_TIMEZONE;\n        // Fallback for this example (as used previously)\n        const defaultTimezone = \"America/Winnipeg\"; // Or load from .env\n        console.log(`DEBUG: Using timezone: ${defaultTimezone}`); // Add log for visibility\n        return defaultTimezone;\n    // --- End Placeholder ---\n    } catch (error) {\n        console.error(\"Error getting user timezone:\", error);\n        return \"UTC\"; // Safe fallback\n    }\n}\n/**\n * Converts a potentially natural language date/time string into a standardized\n * ISO 8601 UTC string (YYYY-MM-DDTHH:mm:ssZ).\n * It uses chrono-node for parsing and Luxon for timezone handling and formatting.\n * Interprets ambiguous times relative to the user's local timezone.\n *\n * @param {string} timeString - The date/time string from user/LLM (e.g., \"Friday at 2 PM\", \"tomorrow morning\", \"2025-04-04T14:00:00\").\n * @param {string} [userTimezone] - Optional. The user's IANA timezone (e.g., \"America/Winnipeg\"). If not provided, getUserTimezone() is called.\n * @returns {string | null} - The date/time in ISO 8601 UTC format (ending in 'Z'), or null if parsing fails.\n */ function convertToUTCISOString(timeString, userTimezone) {\n    if (!timeString) {\n        console.error(\"convertToUTCISOString received empty timeString.\");\n        return null;\n    }\n    const tz = userTimezone || getUserTimezone();\n    try {\n        // --- Step 1: Handle if input is ALREADY a valid ISO string ---\n        // Basic check first to avoid unnecessary chrono parsing\n        if (typeof timeString === \"string\" && timeString.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/)) {\n            const dtFromISO = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(timeString, {\n                zone: \"keepLocalTime\"\n            }); // Try parsing first\n            if (dtFromISO.isValid) {\n                let finalDt;\n                // Check if the original string had timezone info (Z or offset)\n                if (timeString.includes(\"Z\") || timeString.includes(\"+\") || timeString.match(/-\\d{2}:\\d{2}$/)) {\n                    // It has timezone info, use it directly but ensure it's DateTime object\n                    finalDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(timeString, {\n                        setZone: true\n                    }); // Let Luxon handle the provided zone/offset\n                    console.log(`DEBUG: Parsed existing ISO with TZ: ${timeString} -> ${finalDt.toISO()}`);\n                } else {\n                    // No timezone info, assume it's in the user's local timezone\n                    finalDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(timeString, {\n                        zone: tz\n                    }); // Interpret in user's zone\n                    console.log(`DEBUG: Parsed existing ISO (assumed local ${tz}): ${timeString} -> ${finalDt.toISO()}`);\n                }\n                // Ensure the final result is valid and convert to UTC ISO\n                if (finalDt.isValid) {\n                    return finalDt.toUTC().set({\n                        millisecond: 0\n                    }).toISO(); // Convert to UTC\n                } else {\n                    console.warn(`convertToUTCISOString: Luxon deemed parsed ISO invalid: ${timeString}`);\n                    // Fall through to chrono parsing as a last resort maybe? Or return null? Let's return null for now.\n                    return null;\n                }\n            }\n            // If Luxon couldn't parse it as ISO, let chrono try below\n            console.log(`DEBUG: Input looked like ISO but failed Luxon parse, trying chrono: ${timeString}`);\n        }\n        // --- Step 2: Use chrono-node for natural language parsing ---\n        // Create a reference date (\"now\") in the user's timezone for chrono's context\n        const referenceDate = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.now().setZone(tz).toJSDate();\n        // Use chrono.parseDate which returns a single Date object or null\n        // 'forwardDate: true' helps interpret ambiguous dates (like \"Friday\") as upcoming\n        const parsedDate = chrono_node__WEBPACK_IMPORTED_MODULE_1__.parseDate(timeString, referenceDate, {\n            forwardDate: true\n        });\n        if (!parsedDate) {\n            console.warn(`convertToUTCISOString: chrono-node could not parse: \"${timeString}\" with reference timezone ${tz}`);\n            return null; // Parsing failed\n        }\n        // --- Step 3: Convert the JS Date (interpreted relative to user TZ) to UTC ISO ---\n        // Wrap the JS Date in Luxon, explicitly state it represents time in the user's zone, then convert to UTC\n        const finalDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromJSDate(parsedDate, {\n            zone: tz\n        });\n        if (!finalDt.isValid) {\n            console.error(`convertToUTCISOString: Luxon failed to create valid DateTime from chrono result for \"${timeString}\"`);\n            return null;\n        }\n        console.log(`DEBUG: Parsed NL \"${timeString}\" (ref: ${tz}) -> ${finalDt.toISO()}`);\n        // Convert to UTC and format as ISO 8601 string, removing milliseconds\n        const utcIsoString = finalDt.toUTC().set({\n            millisecond: 0\n        }).toISO();\n        console.log(`DEBUG: Converted \"${timeString}\" to UTC ISO: ${utcIsoString}`);\n        return utcIsoString;\n    } catch (error) {\n        console.error(`Error converting time string \"${timeString}\" to UTC ISO with timezone ${tz}:`, error);\n        return null; // Return null on error\n    }\n} // Example Usage (for testing, not part of the export usually):\n /*\nconst userTZ = getUserTimezone(); // e.g., \"America/Winnipeg\"\nconsole.log(\"User Timezone:\", userTZ);\nconsole.log(\"--- Examples ---\");\nconsole.log(`\"Friday at 2 PM\" ->`, convertToUTCISOString(\"Friday at 2 PM\", userTZ));\nconsole.log(`\"tomorrow morning\" ->`, convertToUTCISOString(\"tomorrow morning\", userTZ)); // Chrono defaults morning to ~9 AM\nconsole.log(`\"next monday 10:30am\" ->`, convertToUTCISOString(\"next monday 10:30am\", userTZ));\nconsole.log(`\"2025-04-04T14:00:00\" ->`, convertToUTCISOString(\"2025-04-04T14:00:00\", userTZ)); // Assumes local time\nconsole.log(`\"2025-04-04T19:00:00-05:00\" ->`, convertToUTCISOString(\"2025-04-04T19:00:00-05:00\", userTZ)); // Has offset\nconsole.log(`\"2025-04-04T19:00:00Z\" ->`, convertToUTCISOString(\"2025-04-04T19:00:00Z\", userTZ)); // Already UTC\nconsole.log(`\"gibberish\" ->`, convertToUTCISOString(\"gibberish\", userTZ));\n*/ \n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TyxNQUFNLGlCQUFpQjtRQUNoQztRQUVBLG1GQUFtRjtRQUNuRix5R0FBeUc7UUFDekcsTUFBTU0sVUFBVWhCLDJDQUFRQSxDQUFDOEIsVUFBVSxDQUFDSCxZQUFZO1lBQUViLE1BQU1KO1FBQUc7UUFFM0QsSUFBSSxDQUFDTSxRQUFRRCxPQUFPLEVBQUU7WUFDbEJYLFFBQVFFLEtBQUssQ0FBQyxDQUFDLHFGQUFxRixFQUFFRSxXQUFXLENBQUMsQ0FBQztZQUNuSCxPQUFPO1FBQ1g7UUFFQUosUUFBUUMsR0FBRyxDQUFDLENBQUMsa0JBQWtCLEVBQUVHLFdBQVcsUUFBUSxFQUFFRSxHQUFHLEtBQUssRUFBRU0sUUFBUUcsS0FBSyxHQUFHLENBQUM7UUFFakYsc0VBQXNFO1FBQ3RFLE1BQU1ZLGVBQWVmLFFBQVFJLEtBQUssR0FBR0MsR0FBRyxDQUFDO1lBQUVDLGFBQWE7UUFBRSxHQUFHSCxLQUFLO1FBQ2xFZixRQUFRQyxHQUFHLENBQUMsQ0FBQyxrQkFBa0IsRUFBRUcsV0FBVyxjQUFjLEVBQUV1QixhQUFhLENBQUM7UUFFMUUsT0FBT0E7SUFFVCxFQUFFLE9BQU96QixPQUFPO1FBQ2RGLFFBQVFFLEtBQUssQ0FBQyxDQUFDLDhCQUE4QixFQUFFRSxXQUFXLDJCQUEyQixFQUFFRSxHQUFHLENBQUMsQ0FBQyxFQUFFSjtRQUM5RixPQUFPLE1BQU0sdUJBQXVCO0lBQ3RDO0FBQ0YsRUFFQSwrREFBK0Q7Q0FDL0Q7Ozs7Ozs7Ozs7O0FBV0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nY2FsZW5kYXJhcHAvLi9saWIvdG9vbHMvdGltZVV0aWxzLmpzPzRmMWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XG5pbXBvcnQgKiBhcyBjaHJvbm8gZnJvbSAnY2hyb25vLW5vZGUnO1xuXG4vKipcbiAqIEdldHMgdGhlIHVzZXIncyBjb25maWd1cmVkIHRpbWV6b25lLlxuICogSW4gYSByZWFsIGFwcGxpY2F0aW9uLCB0aGlzIHNob3VsZCBpZGVhbGx5IGZldGNoIGZyb20gdXNlciBkYXRhYmFzZSBwcmVmZXJlbmNlc1xuICogb3IgcG90ZW50aWFsbHkgZGVyaXZlIGZyb20gdGhlIHVzZXIncyBzZXNzaW9uL3JlcXVlc3QgY29udGV4dC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIFVzZXIncyBJQU5BIHRpbWV6b25lIHN0cmluZyAoZS5nLiwgXCJBbWVyaWNhL1dpbm5pcGVnXCIpLiBEZWZhdWx0cyB0byAnVVRDJy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJUaW1lem9uZSgpIHtcbiAgdHJ5IHtcbiAgICAvLyAtLS0gUExBQ0VIT0xERVI6IFJlcGxhY2Ugd2l0aCBhY3R1YWwgbG9naWMgLS0tXG4gICAgLy8gT3B0aW9uIDE6IEZldGNoIGZyb20gVXNlciBQcmVmZXJlbmNlcyAocmVxdWlyZXMgcGFzc2luZyB1c2VySWQgb3IgY29udGV4dClcbiAgICAvLyBjb25zdCB1c2VyUHJlZnMgPSBhd2FpdCBmZXRjaFVzZXJQcmVmZXJlbmNlcyh1c2VySWQpO1xuICAgIC8vIGlmICh1c2VyUHJlZnM/LnRpbWV6b25lKSByZXR1cm4gdXNlclByZWZzLnRpbWV6b25lO1xuXG4gICAgLy8gT3B0aW9uIDI6IEdldCBmcm9tIGVudmlyb25tZW50L2NvbmZpZyAobGVzcyBmbGV4aWJsZSlcbiAgICAvLyBpZiAocHJvY2Vzcy5lbnYuREVGQVVMVF9VU0VSX1RJTUVaT05FKSByZXR1cm4gcHJvY2Vzcy5lbnYuREVGQVVMVF9VU0VSX1RJTUVaT05FO1xuXG4gICAgLy8gRmFsbGJhY2sgZm9yIHRoaXMgZXhhbXBsZSAoYXMgdXNlZCBwcmV2aW91c2x5KVxuICAgIGNvbnN0IGRlZmF1bHRUaW1lem9uZSA9ICdBbWVyaWNhL1dpbm5pcGVnJzsgLy8gT3IgbG9hZCBmcm9tIC5lbnZcbiAgICBjb25zb2xlLmxvZyhgREVCVUc6IFVzaW5nIHRpbWV6b25lOiAke2RlZmF1bHRUaW1lem9uZX1gKTsgLy8gQWRkIGxvZyBmb3IgdmlzaWJpbGl0eVxuICAgIHJldHVybiBkZWZhdWx0VGltZXpvbmU7XG4gICAgLy8gLS0tIEVuZCBQbGFjZWhvbGRlciAtLS1cblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgdXNlciB0aW1lem9uZTonLCBlcnJvcik7XG4gICAgcmV0dXJuICdVVEMnOyAvLyBTYWZlIGZhbGxiYWNrXG4gIH1cbn1cblxuXG4vKipcbiAqIENvbnZlcnRzIGEgcG90ZW50aWFsbHkgbmF0dXJhbCBsYW5ndWFnZSBkYXRlL3RpbWUgc3RyaW5nIGludG8gYSBzdGFuZGFyZGl6ZWRcbiAqIElTTyA4NjAxIFVUQyBzdHJpbmcgKFlZWVktTU0tRERUSEg6bW06c3NaKS5cbiAqIEl0IHVzZXMgY2hyb25vLW5vZGUgZm9yIHBhcnNpbmcgYW5kIEx1eG9uIGZvciB0aW1lem9uZSBoYW5kbGluZyBhbmQgZm9ybWF0dGluZy5cbiAqIEludGVycHJldHMgYW1iaWd1b3VzIHRpbWVzIHJlbGF0aXZlIHRvIHRoZSB1c2VyJ3MgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRpbWVTdHJpbmcgLSBUaGUgZGF0ZS90aW1lIHN0cmluZyBmcm9tIHVzZXIvTExNIChlLmcuLCBcIkZyaWRheSBhdCAyIFBNXCIsIFwidG9tb3Jyb3cgbW9ybmluZ1wiLCBcIjIwMjUtMDQtMDRUMTQ6MDA6MDBcIikuXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VzZXJUaW1lem9uZV0gLSBPcHRpb25hbC4gVGhlIHVzZXIncyBJQU5BIHRpbWV6b25lIChlLmcuLCBcIkFtZXJpY2EvV2lubmlwZWdcIikuIElmIG5vdCBwcm92aWRlZCwgZ2V0VXNlclRpbWV6b25lKCkgaXMgY2FsbGVkLlxuICogQHJldHVybnMge3N0cmluZyB8IG51bGx9IC0gVGhlIGRhdGUvdGltZSBpbiBJU08gODYwMSBVVEMgZm9ybWF0IChlbmRpbmcgaW4gJ1onKSwgb3IgbnVsbCBpZiBwYXJzaW5nIGZhaWxzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvVVRDSVNPU3RyaW5nKHRpbWVTdHJpbmcsIHVzZXJUaW1lem9uZSkge1xuICBpZiAoIXRpbWVTdHJpbmcpIHtcbiAgICBjb25zb2xlLmVycm9yKCdjb252ZXJ0VG9VVENJU09TdHJpbmcgcmVjZWl2ZWQgZW1wdHkgdGltZVN0cmluZy4nKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHR6ID0gdXNlclRpbWV6b25lIHx8IGdldFVzZXJUaW1lem9uZSgpO1xuXG4gIHRyeSB7XG4gICAgLy8gLS0tIFN0ZXAgMTogSGFuZGxlIGlmIGlucHV0IGlzIEFMUkVBRFkgYSB2YWxpZCBJU08gc3RyaW5nIC0tLVxuICAgIC8vIEJhc2ljIGNoZWNrIGZpcnN0IHRvIGF2b2lkIHVubmVjZXNzYXJ5IGNocm9ubyBwYXJzaW5nXG4gICAgaWYgKHR5cGVvZiB0aW1lU3RyaW5nID09PSAnc3RyaW5nJyAmJiB0aW1lU3RyaW5nLm1hdGNoKC9eXFxkezR9LVxcZHsyfS1cXGR7Mn1UXFxkezJ9OlxcZHsyfTpcXGR7Mn0vKSkge1xuICAgICAgICBjb25zdCBkdEZyb21JU08gPSBEYXRlVGltZS5mcm9tSVNPKHRpbWVTdHJpbmcsIHsgem9uZTogJ2tlZXBMb2NhbFRpbWUnIH0pOyAvLyBUcnkgcGFyc2luZyBmaXJzdFxuXG4gICAgICAgIGlmIChkdEZyb21JU08uaXNWYWxpZCkge1xuICAgICAgICAgICAgbGV0IGZpbmFsRHQ7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgb3JpZ2luYWwgc3RyaW5nIGhhZCB0aW1lem9uZSBpbmZvIChaIG9yIG9mZnNldClcbiAgICAgICAgICAgIGlmICh0aW1lU3RyaW5nLmluY2x1ZGVzKCdaJykgfHwgdGltZVN0cmluZy5pbmNsdWRlcygnKycpIHx8IHRpbWVTdHJpbmcubWF0Y2goLy1cXGR7Mn06XFxkezJ9JC8pKSB7XG4gICAgICAgICAgICAgICAgIC8vIEl0IGhhcyB0aW1lem9uZSBpbmZvLCB1c2UgaXQgZGlyZWN0bHkgYnV0IGVuc3VyZSBpdCdzIERhdGVUaW1lIG9iamVjdFxuICAgICAgICAgICAgICAgICBmaW5hbER0ID0gRGF0ZVRpbWUuZnJvbUlTTyh0aW1lU3RyaW5nLCB7IHNldFpvbmU6IHRydWUgfSk7IC8vIExldCBMdXhvbiBoYW5kbGUgdGhlIHByb3ZpZGVkIHpvbmUvb2Zmc2V0XG4gICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBERUJVRzogUGFyc2VkIGV4aXN0aW5nIElTTyB3aXRoIFRaOiAke3RpbWVTdHJpbmd9IC0+ICR7ZmluYWxEdC50b0lTTygpfWApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgLy8gTm8gdGltZXpvbmUgaW5mbywgYXNzdW1lIGl0J3MgaW4gdGhlIHVzZXIncyBsb2NhbCB0aW1lem9uZVxuICAgICAgICAgICAgICAgICBmaW5hbER0ID0gRGF0ZVRpbWUuZnJvbUlTTyh0aW1lU3RyaW5nLCB7IHpvbmU6IHR6IH0pOyAvLyBJbnRlcnByZXQgaW4gdXNlcidzIHpvbmVcbiAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYERFQlVHOiBQYXJzZWQgZXhpc3RpbmcgSVNPIChhc3N1bWVkIGxvY2FsICR7dHp9KTogJHt0aW1lU3RyaW5nfSAtPiAke2ZpbmFsRHQudG9JU08oKX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRW5zdXJlIHRoZSBmaW5hbCByZXN1bHQgaXMgdmFsaWQgYW5kIGNvbnZlcnQgdG8gVVRDIElTT1xuICAgICAgICAgICAgaWYgKGZpbmFsRHQuaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gZmluYWxEdC50b1VUQygpLnNldCh7IG1pbGxpc2Vjb25kOiAwIH0pLnRvSVNPKCk7IC8vIENvbnZlcnQgdG8gVVRDXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYGNvbnZlcnRUb1VUQ0lTT1N0cmluZzogTHV4b24gZGVlbWVkIHBhcnNlZCBJU08gaW52YWxpZDogJHt0aW1lU3RyaW5nfWApO1xuICAgICAgICAgICAgICAgICAvLyBGYWxsIHRocm91Z2ggdG8gY2hyb25vIHBhcnNpbmcgYXMgYSBsYXN0IHJlc29ydCBtYXliZT8gT3IgcmV0dXJuIG51bGw/IExldCdzIHJldHVybiBudWxsIGZvciBub3cuXG4gICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICAvLyBJZiBMdXhvbiBjb3VsZG4ndCBwYXJzZSBpdCBhcyBJU08sIGxldCBjaHJvbm8gdHJ5IGJlbG93XG4gICAgICAgICBjb25zb2xlLmxvZyhgREVCVUc6IElucHV0IGxvb2tlZCBsaWtlIElTTyBidXQgZmFpbGVkIEx1eG9uIHBhcnNlLCB0cnlpbmcgY2hyb25vOiAke3RpbWVTdHJpbmd9YCk7XG4gICAgfVxuXG5cbiAgICAvLyAtLS0gU3RlcCAyOiBVc2UgY2hyb25vLW5vZGUgZm9yIG5hdHVyYWwgbGFuZ3VhZ2UgcGFyc2luZyAtLS1cbiAgICAvLyBDcmVhdGUgYSByZWZlcmVuY2UgZGF0ZSAoXCJub3dcIikgaW4gdGhlIHVzZXIncyB0aW1lem9uZSBmb3IgY2hyb25vJ3MgY29udGV4dFxuICAgIGNvbnN0IHJlZmVyZW5jZURhdGUgPSBEYXRlVGltZS5ub3coKS5zZXRab25lKHR6KS50b0pTRGF0ZSgpO1xuXG4gICAgLy8gVXNlIGNocm9uby5wYXJzZURhdGUgd2hpY2ggcmV0dXJucyBhIHNpbmdsZSBEYXRlIG9iamVjdCBvciBudWxsXG4gICAgLy8gJ2ZvcndhcmREYXRlOiB0cnVlJyBoZWxwcyBpbnRlcnByZXQgYW1iaWd1b3VzIGRhdGVzIChsaWtlIFwiRnJpZGF5XCIpIGFzIHVwY29taW5nXG4gICAgY29uc3QgcGFyc2VkRGF0ZSA9IGNocm9uby5wYXJzZURhdGUodGltZVN0cmluZywgcmVmZXJlbmNlRGF0ZSwgeyBmb3J3YXJkRGF0ZTogdHJ1ZSB9KTtcblxuICAgIGlmICghcGFyc2VkRGF0ZSkge1xuICAgICAgY29uc29sZS53YXJuKGBjb252ZXJ0VG9VVENJU09TdHJpbmc6IGNocm9uby1ub2RlIGNvdWxkIG5vdCBwYXJzZTogXCIke3RpbWVTdHJpbmd9XCIgd2l0aCByZWZlcmVuY2UgdGltZXpvbmUgJHt0en1gKTtcbiAgICAgIHJldHVybiBudWxsOyAvLyBQYXJzaW5nIGZhaWxlZFxuICAgIH1cblxuICAgIC8vIC0tLSBTdGVwIDM6IENvbnZlcnQgdGhlIEpTIERhdGUgKGludGVycHJldGVkIHJlbGF0aXZlIHRvIHVzZXIgVFopIHRvIFVUQyBJU08gLS0tXG4gICAgLy8gV3JhcCB0aGUgSlMgRGF0ZSBpbiBMdXhvbiwgZXhwbGljaXRseSBzdGF0ZSBpdCByZXByZXNlbnRzIHRpbWUgaW4gdGhlIHVzZXIncyB6b25lLCB0aGVuIGNvbnZlcnQgdG8gVVRDXG4gICAgY29uc3QgZmluYWxEdCA9IERhdGVUaW1lLmZyb21KU0RhdGUocGFyc2VkRGF0ZSwgeyB6b25lOiB0eiB9KTtcblxuICAgIGlmICghZmluYWxEdC5pc1ZhbGlkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYGNvbnZlcnRUb1VUQ0lTT1N0cmluZzogTHV4b24gZmFpbGVkIHRvIGNyZWF0ZSB2YWxpZCBEYXRlVGltZSBmcm9tIGNocm9ubyByZXN1bHQgZm9yIFwiJHt0aW1lU3RyaW5nfVwiYCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGBERUJVRzogUGFyc2VkIE5MIFwiJHt0aW1lU3RyaW5nfVwiIChyZWY6ICR7dHp9KSAtPiAke2ZpbmFsRHQudG9JU08oKX1gKTtcblxuICAgIC8vIENvbnZlcnQgdG8gVVRDIGFuZCBmb3JtYXQgYXMgSVNPIDg2MDEgc3RyaW5nLCByZW1vdmluZyBtaWxsaXNlY29uZHNcbiAgICBjb25zdCB1dGNJc29TdHJpbmcgPSBmaW5hbER0LnRvVVRDKCkuc2V0KHsgbWlsbGlzZWNvbmQ6IDAgfSkudG9JU08oKTtcbiAgICBjb25zb2xlLmxvZyhgREVCVUc6IENvbnZlcnRlZCBcIiR7dGltZVN0cmluZ31cIiB0byBVVEMgSVNPOiAke3V0Y0lzb1N0cmluZ31gKTtcblxuICAgIHJldHVybiB1dGNJc29TdHJpbmc7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGBFcnJvciBjb252ZXJ0aW5nIHRpbWUgc3RyaW5nIFwiJHt0aW1lU3RyaW5nfVwiIHRvIFVUQyBJU08gd2l0aCB0aW1lem9uZSAke3R6fTpgLCBlcnJvcik7XG4gICAgcmV0dXJuIG51bGw7IC8vIFJldHVybiBudWxsIG9uIGVycm9yXG4gIH1cbn1cblxuLy8gRXhhbXBsZSBVc2FnZSAoZm9yIHRlc3RpbmcsIG5vdCBwYXJ0IG9mIHRoZSBleHBvcnQgdXN1YWxseSk6XG4vKlxuY29uc3QgdXNlclRaID0gZ2V0VXNlclRpbWV6b25lKCk7IC8vIGUuZy4sIFwiQW1lcmljYS9XaW5uaXBlZ1wiXG5jb25zb2xlLmxvZyhcIlVzZXIgVGltZXpvbmU6XCIsIHVzZXJUWik7XG5jb25zb2xlLmxvZyhcIi0tLSBFeGFtcGxlcyAtLS1cIik7XG5jb25zb2xlLmxvZyhgXCJGcmlkYXkgYXQgMiBQTVwiIC0+YCwgY29udmVydFRvVVRDSVNPU3RyaW5nKFwiRnJpZGF5IGF0IDIgUE1cIiwgdXNlclRaKSk7XG5jb25zb2xlLmxvZyhgXCJ0b21vcnJvdyBtb3JuaW5nXCIgLT5gLCBjb252ZXJ0VG9VVENJU09TdHJpbmcoXCJ0b21vcnJvdyBtb3JuaW5nXCIsIHVzZXJUWikpOyAvLyBDaHJvbm8gZGVmYXVsdHMgbW9ybmluZyB0byB+OSBBTVxuY29uc29sZS5sb2coYFwibmV4dCBtb25kYXkgMTA6MzBhbVwiIC0+YCwgY29udmVydFRvVVRDSVNPU3RyaW5nKFwibmV4dCBtb25kYXkgMTA6MzBhbVwiLCB1c2VyVFopKTtcbmNvbnNvbGUubG9nKGBcIjIwMjUtMDQtMDRUMTQ6MDA6MDBcIiAtPmAsIGNvbnZlcnRUb1VUQ0lTT1N0cmluZyhcIjIwMjUtMDQtMDRUMTQ6MDA6MDBcIiwgdXNlclRaKSk7IC8vIEFzc3VtZXMgbG9jYWwgdGltZVxuY29uc29sZS5sb2coYFwiMjAyNS0wNC0wNFQxOTowMDowMC0wNTowMFwiIC0+YCwgY29udmVydFRvVVRDSVNPU3RyaW5nKFwiMjAyNS0wNC0wNFQxOTowMDowMC0wNTowMFwiLCB1c2VyVFopKTsgLy8gSGFzIG9mZnNldFxuY29uc29sZS5sb2coYFwiMjAyNS0wNC0wNFQxOTowMDowMFpcIiAtPmAsIGNvbnZlcnRUb1VUQ0lTT1N0cmluZyhcIjIwMjUtMDQtMDRUMTk6MDA6MDBaXCIsIHVzZXJUWikpOyAvLyBBbHJlYWR5IFVUQ1xuY29uc29sZS5sb2coYFwiZ2liYmVyaXNoXCIgLT5gLCBjb252ZXJ0VG9VVENJU09TdHJpbmcoXCJnaWJiZXJpc2hcIiwgdXNlclRaKSk7XG4qLyJdLCJuYW1lcyI6WyJEYXRlVGltZSIsImNocm9ubyIsImdldFVzZXJUaW1lem9uZSIsImRlZmF1bHRUaW1lem9uZSIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImNvbnZlcnRUb1VUQ0lTT1N0cmluZyIsInRpbWVTdHJpbmciLCJ1c2VyVGltZXpvbmUiLCJ0eiIsIm1hdGNoIiwiZHRGcm9tSVNPIiwiZnJvbUlTTyIsInpvbmUiLCJpc1ZhbGlkIiwiZmluYWxEdCIsImluY2x1ZGVzIiwic2V0Wm9uZSIsInRvSVNPIiwidG9VVEMiLCJzZXQiLCJtaWxsaXNlY29uZCIsIndhcm4iLCJyZWZlcmVuY2VEYXRlIiwibm93IiwidG9KU0RhdGUiLCJwYXJzZWREYXRlIiwicGFyc2VEYXRlIiwiZm9yd2FyZERhdGUiLCJmcm9tSlNEYXRlIiwidXRjSXNvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/tools/timeUtils.js\n");

/***/ }),

/***/ "(api)/./lib/tools/toolIndex.js":
/*!********************************!*\
  !*** ./lib/tools/toolIndex.js ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toolFunctions: () => (/* binding */ toolFunctions),\n/* harmony export */   tools: () => (/* binding */ tools)\n/* harmony export */ });\n/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! luxon */ \"luxon\");\n/* harmony import */ var googleapis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! googleapis */ \"googleapis\");\n/* harmony import */ var googleapis__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(googleapis__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../googleCalendar.js */ \"(api)/./googleCalendar.js\");\n/* harmony import */ var _googleCalendar_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _redisClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../redisClient.js */ \"(api)/./lib/redisClient.js\");\n/* harmony import */ var _services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/cacheService.js */ \"(api)/./lib/services/cacheService.js\");\n/* harmony import */ var _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./schedulingUtils.js */ \"(api)/./lib/tools/schedulingUtils.js\");\n/* harmony import */ var _checkForConflicts_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./checkForConflicts.js */ \"(api)/./lib/tools/checkForConflicts.js\");\n/* harmony import */ var _timeUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./timeUtils.js */ \"(api)/./lib/tools/timeUtils.js\");\n/* harmony import */ var _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../postgresClient.js */ \"(api)/./lib/postgresClient.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([luxon__WEBPACK_IMPORTED_MODULE_0__, _services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__, _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_5__, _checkForConflicts_js__WEBPACK_IMPORTED_MODULE_6__, _timeUtils_js__WEBPACK_IMPORTED_MODULE_7__, _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__]);\n([luxon__WEBPACK_IMPORTED_MODULE_0__, _services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__, _schedulingUtils_js__WEBPACK_IMPORTED_MODULE_5__, _checkForConflicts_js__WEBPACK_IMPORTED_MODULE_6__, _timeUtils_js__WEBPACK_IMPORTED_MODULE_7__, _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// lib/tools/index.js\n// Purpose: Defines the tools (schema) available to the LLM and maps them\n//          to their corresponding implementation functions. Also includes\n//          helper functions for processing tool calls.\n// --- IMPORTS ---\n\n // Used for get/update event before calling specific functions\n// Import from googleCalendar.js\n\n// Import from redisClient.js\n\n// Import from cacheService.js\n\n// Import from schedulingUtils.js\n // Renamed to avoid conflict with tool name\n// Import from checkForConflicts.js\n\n// Import from timeUtils.js\n\n// Import from formatters.js - Assuming these might be used by the caller, not directly here\n// import { formatEventTime, formatCalendarEvents, formatToolResponse } from './formatters.js';\n// Import from postgresClient.js\n\n// --- Tool Schema Definitions (for OpenAI) ---\nconst tools = [\n    {\n        type: \"function\",\n        function: {\n            name: \"saveUserPreference\",\n            description: \"Save a user preference for future reference. Use this when you identify important user preferences (like preferred meeting times, locations, activity types, scheduling constraints) that should be remembered long-term.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    category: {\n                        type: \"string\",\n                        description: \"The broad category of the preference (e.g., 'scheduling', 'location', 'activity').\"\n                    },\n                    key: {\n                        type: \"string\",\n                        description: \"The specific preference key within the category (e.g., 'preferredMeetingHours', 'defaultCity', 'favoriteWorkout').\"\n                    },\n                    value: {\n                        oneOf: [\n                            {\n                                type: \"string\"\n                            },\n                            {\n                                type: \"number\"\n                            },\n                            {\n                                type: \"boolean\"\n                            },\n                            {\n                                type: \"array\",\n                                items: {}\n                            },\n                            {\n                                type: \"object\"\n                            }\n                        ],\n                        description: \"The value of the preference (e.g., '9am-12pm', 'New York', 'running'). Can be string, number, boolean, array, or object.\"\n                    },\n                    context: {\n                        type: \"string\",\n                        description: \"Optional: Additional context about when or why this preference applies (e.g., 'work meetings', 'weekends').\"\n                    }\n                },\n                required: [\n                    \"category\",\n                    \"key\",\n                    \"value\"\n                ]\n            }\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"addCalendarEvents\",\n            description: \"Creates one or more new events directly in the user's primary Google Calendar based on their request. Extracts details like title, location, and resolves start/end times (using current time context for relative references like 'tomorrow 4pm') into absolute ISO 8601 format. Assumes a 1-hour duration if not specified. Checks for conflicts before adding.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    events: {\n                        type: \"array\",\n                        description: \"An array of one or more event objects to create.\",\n                        items: {\n                            type: \"object\",\n                            properties: {\n                                summary: {\n                                    type: \"string\",\n                                    description: \"The title/summary of the event (e.g., 'Meeting with Clyde').\"\n                                },\n                                start: {\n                                    type: \"string\",\n                                    description: \"The start date and time of the event in STRICT ISO 8601 format including timezone offset (e.g., '2025-04-01T16:00:00-07:00'). Resolve relative times (like 'tomorrow 4pm') based on current time context before calling.\"\n                                },\n                                end: {\n                                    type: \"string\",\n                                    description: \"The end date and time of the event in STRICT ISO 8601 format including timezone offset (e.g., '2025-04-01T17:00:00-07:00'). Resolve relative times; assume 1hr duration from start if end time is not specified.\"\n                                },\n                                description: {\n                                    type: \"string\",\n                                    description: \"Optional description or notes for the event.\"\n                                },\n                                location: {\n                                    type: \"string\",\n                                    description: \"Optional location for the event (e.g., 'Starbucks Main St', 'Zoom Link').\"\n                                },\n                                reminders: {\n                                    type: \"array\",\n                                    items: {\n                                        type: \"number\"\n                                    },\n                                    description: \"Optional reminder times in minutes before the event start (e.g., [10, 30]).\"\n                                },\n                                priority: {\n                                    type: \"string\",\n                                    enum: [\n                                        \"Low\",\n                                        \"Medium\",\n                                        \"High\",\n                                        \"Urgent\"\n                                    ],\n                                    description: \"Optional priority level for the event.\"\n                                },\n                                tags: {\n                                    type: \"array\",\n                                    items: {\n                                        type: \"string\"\n                                    },\n                                    description: \"Optional tags to categorize the event.\"\n                                },\n                                overrideConflicts: {\n                                    type: \"boolean\",\n                                    description: \"Optional flag to override conflicts and add the event anyway. Default is false.\"\n                                }\n                            },\n                            required: [\n                                \"summary\",\n                                \"start\",\n                                \"end\"\n                            ]\n                        }\n                    }\n                },\n                required: [\n                    \"events\"\n                ]\n            }\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"getCalendarEvents\",\n            description: \"Retrieves events from the user's primary Google Calendar within a specified date range.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    start_date: {\n                        type: \"string\",\n                        description: \"The start date/time for the query range in ISO 8601 format (e.g., '2025-04-01T00:00:00Z' or '2025-04-01').\"\n                    },\n                    end_date: {\n                        type: \"string\",\n                        description: \"The end date/time for the query range in ISO 8601 format (e.g., '2025-04-02T00:00:00Z' or '2025-04-02').\"\n                    }\n                },\n                required: [\n                    \"start_date\",\n                    \"end_date\"\n                ]\n            }\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"deleteCalendarEvent\",\n            description: \"Deletes a specific event from the user's primary Google Calendar using its unique event ID. Retrieves event details first to invalidate specific cache range.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    eventId: {\n                        type: \"string\",\n                        description: \"The unique ID of the event to delete (e.g., '8ut3a6eol1ov5ovv23v85osssg'). The user might provide the event title/time, use getCalendarEvents first if ID is unknown.\"\n                    }\n                },\n                required: [\n                    \"eventId\"\n                ]\n            }\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"updateCalendarEvent\",\n            description: \"Updates details (like time, title, location, description) of an existing event in the user's primary Google Calendar using its ID.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    eventId: {\n                        type: \"string\",\n                        description: \"The unique ID of the event to update (e.g., '8ut3a6eol1ov5ovv23v85osssg'). The user might provide the event title/time, use getCalendarEvents first if ID is unknown.\"\n                    },\n                    updates: {\n                        type: \"object\",\n                        properties: {\n                            summary: {\n                                type: \"string\",\n                                description: \"New title/summary for the event.\"\n                            },\n                            description: {\n                                type: \"string\",\n                                description: \"New description for the event.\"\n                            },\n                            location: {\n                                type: \"string\",\n                                description: \"New location for the event.\"\n                            },\n                            start: {\n                                type: \"string\",\n                                description: \"New start time in ISO 8601 format (e.g., '2025-04-01T16:30:00-07:00').\"\n                            },\n                            end: {\n                                type: \"string\",\n                                description: \"New end time in ISO 8601 format (e.g., '2025-04-01T17:00:00-07:00').\"\n                            },\n                            priority: {\n                                type: \"string\",\n                                enum: [\n                                    \"Low\",\n                                    \"Medium\",\n                                    \"High\",\n                                    \"Urgent\"\n                                ],\n                                description: \"Optional priority level for the event.\"\n                            },\n                            tags: {\n                                type: \"array\",\n                                items: {\n                                    type: \"string\"\n                                },\n                                description: \"Optional tags to categorize the event.\"\n                            }\n                        },\n                        description: \"Object containing AT LEAST ONE field to update. Include only fields that are changing.\",\n                        minProperties: 1 // Ensure at least one update is provided\n                    }\n                },\n                required: [\n                    \"eventId\",\n                    \"updates\"\n                ]\n            }\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"findAvailableSlots\",\n            description: \"Finds multiple available time slots in the user's calendar suitable for scheduling a new event. Considers existing events.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    duration: {\n                        type: \"number\",\n                        description: \"Required duration of the event in minutes (e.g., 30, 60).\"\n                    },\n                    startDate: {\n                        type: \"string\",\n                        description: \"The start date/time to search from, in ISO 8601 format. Defaults to the current time if not provided.\"\n                    },\n                    endDate: {\n                        type: \"string\",\n                        description: \"The end date/time to search until, in ISO 8601 format. Defaults to 7 days from startDate if not provided.\"\n                    },\n                    timePreference: {\n                        type: \"string\",\n                        enum: [\n                            \"morning\",\n                            \"afternoon\",\n                            \"evening\",\n                            \"any\"\n                        ],\n                        description: \"Optional preferred time of day (defaults to 'any'). Morning (~9am-12pm), Afternoon (~12pm-5pm), Evening (~5pm-9pm).\"\n                    },\n                    activity: {\n                        type: \"string\",\n                        description: \"Optional: The type of activity being scheduled (e.g., 'meeting', 'workout', 'call') to potentially influence suggestions or check constraints.\"\n                    }\n                },\n                required: [\n                    \"duration\"\n                ]\n            }\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"getWeatherForecast\",\n            description: \"Gets the weather forecast for a specific location and date.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    location: {\n                        type: \"string\",\n                        description: \"The city and state, or zip code for the weather forecast (e.g., 'San Francisco, CA', '94107').\"\n                    },\n                    date: {\n                        type: \"string\",\n                        description: \"The date for the forecast in ISO 8601 format (YYYY-MM-DD). Defaults to today if not specified.\"\n                    }\n                },\n                required: [\n                    \"location\"\n                ]\n            }\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"deleteCalendarEventsByQuery\",\n            description: \"Deletes multiple calendar events within a specified date range that match a search query in their title/summary. Use with caution.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    query: {\n                        type: \"string\",\n                        description: \"The search query to match against event summaries (e.g., 'gym', 'meeting with project X'). Case-insensitive.\"\n                    },\n                    start_date: {\n                        type: \"string\",\n                        description: \"The start date/time for the search range in ISO 8601 format (e.g., '2025-04-01'). Required.\"\n                    },\n                    end_date: {\n                        type: \"string\",\n                        description: \"The end date/time for the search range in ISO 8601 format (e.g., '2025-04-30'). Required.\"\n                    }\n                },\n                required: [\n                    \"query\",\n                    \"start_date\",\n                    \"end_date\"\n                ]\n            }\n        }\n    }\n];\n// --- Tool Function Implementations ---\n// Maps tool names (from schema) to the actual functions that execute them.\nconst toolFunctions = {\n    saveUserPreference: async (args, userId = \"default\", accessToken = null)=>{\n        if (!userId || userId === \"default\") return {\n            success: false,\n            message: \"Error: User ID is missing.\"\n        };\n        console.log(`DEBUG: saveUserPreference called with userId=${userId}, args:`, JSON.stringify(args));\n        const { category, key, value, context } = args;\n        // Basic validation\n        if (!category || !key || value === undefined) {\n            return {\n                success: false,\n                message: \"Error: Missing required fields (category, key, value) for preference.\"\n            };\n        }\n        try {\n            // First, find or create the UserPreference record\n            const [userPref, created] = await _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.UserPreference.findOrCreate({\n                where: {\n                    user_id: userId\n                },\n                defaults: {\n                    user_id: userId,\n                    preferences_data: {}\n                }\n            });\n            console.log(`DEBUG: UserPreference record ${created ? \"created\" : \"found\"} for user ${userId}`);\n            // Get the current preferences data\n            const currentPrefs = created ? {} : userPref.preferences_data || {};\n            console.log(\"DEBUG: Current preferences_data:\", JSON.stringify(currentPrefs));\n            // Create a new preferences object with the updated values\n            const updatedPrefs = {\n                ...currentPrefs\n            };\n            // Ensure category exists\n            if (!updatedPrefs[category]) updatedPrefs[category] = {};\n            // Update the value\n            updatedPrefs[category][key] = value;\n            // Handle context if provided\n            if (context !== undefined) {\n                const contextKey = `${category}_context`;\n                if (!updatedPrefs[contextKey]) updatedPrefs[contextKey] = {};\n                updatedPrefs[contextKey][key] = context;\n            }\n            console.log(\"DEBUG: Updated preferences_data to be saved:\", JSON.stringify(updatedPrefs));\n            // Use UPDATE instead of save() to ensure the JSONB field is properly updated\n            // This is the key change to fix the issue with Sequelize not detecting changes to JSONB fields\n            const [updateCount] = await _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.UserPreference.update({\n                preferences_data: updatedPrefs\n            }, {\n                where: {\n                    user_id: userId\n                }\n            });\n            console.log(`DEBUG: Update result: ${updateCount} rows affected`);\n            // Verify the update by fetching the record again\n            const verifyPref = await _postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.UserPreference.findOne({\n                where: {\n                    user_id: userId\n                }\n            });\n            console.log(\"DEBUG: Verified preferences_data after update:\", JSON.stringify(verifyPref.preferences_data));\n            return {\n                success: true,\n                message: `Preference saved: ${category}.${key} = ${JSON.stringify(value)}`,\n                updateCount: updateCount\n            };\n        } catch (error) {\n            console.error(`Error saving preference for user ${userId}:`, error);\n            return {\n                success: false,\n                message: `Failed to save preference: ${error.message}`\n            };\n        }\n    },\n    addCalendarEvents: async (args, userId = \"default\", accessToken = null)=>{\n        if (!accessToken) return {\n            error: \"User not authenticated.\",\n            success: false\n        };\n        const tokens = {\n            access_token: accessToken\n        };\n        const { events } = args;\n        if (!Array.isArray(events) || events.length === 0) return {\n            message: \"No event data provided.\",\n            success: false\n        };\n        const results = [];\n        const affectedDateRanges = [];\n        for (const event of events){\n            if (!event.summary || !event.start || !event.end) {\n                results.push({\n                    summary: event.summary || \"?\",\n                    error: \"Missing required fields (summary, start, end).\",\n                    success: false\n                });\n                continue;\n            }\n            // Get user timezone\n            const userTimezone = (0,_timeUtils_js__WEBPACK_IMPORTED_MODULE_7__.getUserTimezone)();\n            try {\n                // Convert start and end times to UTC ISO strings with proper timezone handling\n                const startUtc = (0,_timeUtils_js__WEBPACK_IMPORTED_MODULE_7__.convertToUTCISOString)(event.start, userTimezone);\n                const endUtc = (0,_timeUtils_js__WEBPACK_IMPORTED_MODULE_7__.convertToUTCISOString)(event.end, userTimezone);\n                if (!startUtc || !endUtc) {\n                    throw new Error(\"Failed to convert time strings to UTC ISO format\");\n                }\n                // Update event with properly converted times\n                event.start = startUtc;\n                event.end = endUtc;\n                const startDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(startUtc);\n                const endDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(endUtc);\n                if (!startDt.isValid || !endDt.isValid) throw new Error(\"Invalid date format\");\n                if (startDt >= endDt) throw new Error(\"Start time must be before end time\");\n            } catch (e) {\n                results.push({\n                    summary: event.summary,\n                    error: `Invalid date format or logic: ${e.message}. Use ISO 8601 format.`,\n                    success: false\n                });\n                continue;\n            }\n            try {\n                // Check for conflicts before attempting to add\n                const conflictCheckResult = await (0,_checkForConflicts_js__WEBPACK_IMPORTED_MODULE_6__.checkForConflicts)(tokens, event.start, event.end, event.overrideConflicts === true);\n                if (conflictCheckResult.conflicts) {\n                    console.warn(`Conflict detected for event: ${event.summary}`);\n                    results.push({\n                        summary: event.summary,\n                        conflict: true,\n                        suggestions: conflictCheckResult.suggestions || [],\n                        error: conflictCheckResult.error || `Event conflicts with existing schedule.`,\n                        success: false\n                    });\n                } else if (conflictCheckResult.overridden) {\n                    console.log(`Conflict detected for event: ${event.summary} but override flag is set. Proceeding with event creation.`);\n                    // Add the event despite conflict\n                    const addedEvent = await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.addCalendarEvent)(tokens, event.summary, event.start, event.end, event.description, event.location, event.reminders);\n                    // Store metadata if priority or tags are provided\n                    const hasMetadata = event.priority !== undefined || event.tags && event.tags.length > 0;\n                    if (hasMetadata) {\n                        try {\n                            await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.createOrUpdateEventMetadata)(userId, addedEvent.id, {\n                                priority: event.priority,\n                                tags: event.tags // Will be null if undefined or empty\n                            });\n                            console.log(`Metadata saved for event \"${event.summary}\" (ID: ${addedEvent.id})`);\n                        } catch (metadataError) {\n                            console.error(`Error saving metadata for event \"${event.summary}\" (ID: ${addedEvent.id}):`, metadataError);\n                            // Log error but don't fail the entire event addition\n                            addedEvent.metadataError = `Failed to save metadata: ${metadataError.message}`;\n                        }\n                    }\n                    // Add a note about the conflict being overridden\n                    addedEvent.conflictOverridden = true;\n                    addedEvent.conflictCount = conflictCheckResult.conflictCount;\n                    // Assuming addGCalendarEventInternal returns the created event object on success\n                    results.push({\n                        ...addedEvent,\n                        success: true\n                    }); // Add success flag\n                    affectedDateRanges.push({\n                        start: event.start,\n                        end: event.end\n                    });\n                    console.log(`Event added despite conflicts: ${event.summary} (ID: ${addedEvent.id})`);\n                } else {\n                    // Add the event\n                    const addedEvent = await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.addCalendarEvent)(tokens, event.summary, event.start, event.end, event.description, event.location, event.reminders);\n                    // Store metadata if priority or tags are provided\n                    const hasMetadata = event.priority !== undefined || event.tags && event.tags.length > 0;\n                    if (hasMetadata) {\n                        try {\n                            await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.createOrUpdateEventMetadata)(userId, addedEvent.id, {\n                                priority: event.priority,\n                                tags: event.tags // Will be null if undefined or empty\n                            });\n                            console.log(`Metadata saved for event \"${event.summary}\" (ID: ${addedEvent.id})`);\n                        } catch (metadataError) {\n                            console.error(`Error saving metadata for event \"${event.summary}\" (ID: ${addedEvent.id}):`, metadataError);\n                            // Log error but don't fail the entire event addition\n                            addedEvent.metadataError = `Failed to save metadata: ${metadataError.message}`;\n                        }\n                    }\n                    // Assuming addGCalendarEventInternal returns the created event object on success\n                    results.push({\n                        ...addedEvent,\n                        success: true\n                    }); // Add success flag\n                    affectedDateRanges.push({\n                        start: event.start,\n                        end: event.end\n                    });\n                    console.log(`Event added: ${event.summary} (ID: ${addedEvent.id})`);\n                }\n            } catch (addError) {\n                console.error(`Error adding event \"${event.summary}\" during conflict check or API call:`, addError);\n                results.push({\n                    summary: event.summary,\n                    error: `Failed to process event: ${addError.message}`,\n                    success: false\n                });\n            }\n        }\n        // Invalidate cache for all ranges where events were successfully added\n        // Use invalidateCache from cacheService\n        for (const range of affectedDateRanges){\n            try {\n                await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__.invalidateCache)(tokens, range.start, range.end);\n                console.log(`Invalidated cache for range: ${range.start} - ${range.end}`);\n            } catch (cacheError) {\n                console.error(\"Error invalidating cache after add:\", cacheError);\n            }\n        }\n        return results; // Return array of result objects (with success flags/errors)\n    },\n    getCalendarEvents: async (args, userId = \"default\", accessToken = null)=>{\n        if (!accessToken) return {\n            error: \"User not authenticated.\",\n            success: false,\n            events: []\n        }; // Return structured error\n        const tokens = {\n            access_token: accessToken\n        };\n        const { start_date, end_date } = args;\n        // Validate dates\n        if (!start_date || !end_date) {\n            return {\n                error: \"Both start_date and end_date are required.\",\n                success: false,\n                events: []\n            };\n        }\n        const startDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(start_date);\n        const endDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(end_date);\n        if (!startDt.isValid || !endDt.isValid) {\n            return {\n                error: `Invalid date format. Please use ISO 8601 (e.g., YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ). Received: start=${start_date}, end=${end_date}`,\n                success: false,\n                events: []\n            };\n        }\n        if (startDt >= endDt) {\n            return {\n                error: \"Start date must be before end date.\",\n                success: false,\n                events: []\n            };\n        }\n        let finalEvents = []; // Initialize events array\n        try {\n            // Define cache keys using daily granularity for broader cache hits\n            const cacheKeyStart = startDt.startOf(\"day\").toISODate();\n            const cacheKeyEnd = endDt.endOf(\"day\").toISODate(); // Inclusive end day for key\n            const tokenHash = accessToken.substring(accessToken.length - 10); // Simple hash\n            const userIdCachePrefix = `user_${tokenHash}`; // Or use actual stable userId\n            // Attempt to fetch from cache first\n            let cachedEvents = await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_3__.getCachedEventsForDateRange)(userIdCachePrefix, cacheKeyStart, cacheKeyEnd);\n            if (cachedEvents) {\n                console.log(`Cache HIT for events ${cacheKeyStart} to ${cacheKeyEnd}`);\n                // Filter cached events based on the *exact* start/end time requested by the user\n                finalEvents = cachedEvents.filter((event)=>{\n                    const eventStart = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.start?.dateTime || event.start?.date);\n                    const eventEnd = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.end?.dateTime || event.end?.date);\n                    // Ensure valid dates before comparison\n                    if (!eventStart.isValid || !eventEnd.isValid) return false;\n                    // Event overlaps with the requested range [startDt, endDt)\n                    return eventStart < endDt && eventEnd > startDt;\n                });\n                console.log(`Filtered ${cachedEvents.length} cached events down to ${finalEvents.length} for exact range.`);\n            } else {\n                console.log(`Cache MISS for events ${cacheKeyStart} to ${cacheKeyEnd}`);\n                // Fetch from Google Calendar API for the *exact* requested range\n                const apiEvents = await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.getCalendarEvents)(tokens, startDt.toJSDate(), endDt.toJSDate()); // Fetch exact range\n                if (apiEvents && Array.isArray(apiEvents)) {\n                    finalEvents = apiEvents; // Use the precisely fetched events\n                    console.log(`Fetched ${finalEvents.length} events from API for range ${startDt.toISO()} - ${endDt.toISO()}.`);\n                    // Cache the result using the daily range key for potential future broader queries\n                    // Cache the events fetched for the *exact* range, but use the *daily* key\n                    // This means subsequent wider queries might hit cache, but specific narrow queries within the day will still filter\n                    await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_3__.cacheEventsForDateRange)(userIdCachePrefix, cacheKeyStart, cacheKeyEnd, finalEvents, 300); // 5 min TTL\n                    console.log(`Stored ${finalEvents.length} events in Redis cache under key range ${cacheKeyStart} to ${cacheKeyEnd}`);\n                } else {\n                    console.warn(`No events returned or non-array from fetchGCalendarEventsInternal for ${startDt.toISO()}-${endDt.toISO()}`);\n                    finalEvents = []; // Ensure it's an empty array on failure or no results\n                }\n            }\n            // Enrich events with metadata if there are any events\n            if (finalEvents.length > 0 && userId !== \"default\") {\n                try {\n                    // Extract all Google event IDs\n                    const googleEventIds = finalEvents.map((event)=>event.id).filter((id)=>id); // Filter out potential null/undefined IDs\n                    if (googleEventIds.length > 0) {\n                        // Fetch metadata for all events in a single batch query\n                        const metadataRecords = await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.getEventMetadataBatch)(userId, googleEventIds);\n                        // Create a lookup map for efficient access\n                        const metadataMap = new Map();\n                        metadataRecords.forEach((record)=>{\n                            metadataMap.set(record.google_event_id, record);\n                        });\n                        // Enrich events with metadata\n                        finalEvents = finalEvents.map((event)=>{\n                            const metadata = metadataMap.get(event.id);\n                            if (metadata) {\n                                // Add only non-null metadata fields\n                                const enrichment = {};\n                                if (metadata.priority !== null) enrichment.priority = metadata.priority;\n                                if (metadata.tags !== null && metadata.tags.length > 0) enrichment.tags = metadata.tags;\n                                return {\n                                    ...event,\n                                    ...enrichment\n                                };\n                            }\n                            return event; // Return original event if no metadata found\n                        });\n                        console.log(`Enriched ${metadataMap.size} events with metadata.`);\n                    }\n                } catch (metadataError) {\n                    console.error(`Error fetching or merging event metadata:`, metadataError);\n                // Proceed without metadata, but log the error\n                }\n            }\n            console.log(\"DEBUG: toolFunctions.getCalendarEvents is returning:\", JSON.stringify(finalEvents, null, 2)); // Keep debug log\n            return finalEvents; // Return just the events array\n        } catch (error) {\n            console.error(`Error in getCalendarEvents tool (${start_date} to ${end_date}):`, error);\n            // Provide a user-friendly structured error message\n            throw new Error(`Failed to fetch calendar events: ${error.message}. Check connection or permissions.`);\n        }\n    },\n    deleteCalendarEvent: async (args, userId = \"default\", accessToken = null)=>{\n        if (!accessToken) return {\n            error: \"User not authenticated.\",\n            success: false,\n            eventId: args.eventId\n        };\n        const tokens = {\n            access_token: accessToken\n        };\n        const { eventId } = args;\n        if (!eventId) return {\n            error: \"Event ID is required.\",\n            success: false\n        };\n        let originalStartDate, originalEndDate, eventSummary = eventId; // Default summary to ID\n        try {\n            // 1. Get the event details first for cache invalidation and user feedback\n            const oauth2Client = (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.createOAuth2Client)(tokens);\n            const calendar = googleapis__WEBPACK_IMPORTED_MODULE_1__.google.calendar({\n                version: \"v3\",\n                auth: oauth2Client\n            });\n            try {\n                console.log(`Fetching event details for deletion: ${eventId}`);\n                const event = await calendar.events.get({\n                    calendarId: \"primary\",\n                    eventId: eventId\n                });\n                originalStartDate = event.data.start?.dateTime || event.data.start?.date;\n                originalEndDate = event.data.end?.dateTime || event.data.end?.date;\n                eventSummary = event.data.summary || eventId;\n                console.log(`Found event \"${eventSummary}\" starting ${originalStartDate} for deletion.`);\n            } catch (getError) {\n                if (getError.code === 404) {\n                    console.log(`Event ${eventId} not found for deletion (may already be deleted).`);\n                    // Consider this a \"success\" in the sense that the desired state (event gone) is achieved.\n                    return {\n                        success: true,\n                        message: `Event ${eventId} not found (already deleted?).`,\n                        eventId: eventId,\n                        summary: eventSummary\n                    };\n                }\n                // Rethrow other errors during get\n                throw new Error(`Failed to retrieve event details before delete: ${getError.message}`);\n            }\n            // 2. Delete the event via internal function\n            console.log(`Attempting to delete event: ${eventId}`);\n            await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.deleteCalendarEvent)(tokens, eventId); // Assumes this throws on API error\n            console.log(`Successfully deleted event from Google Calendar: ${eventId}`);\n            // 3. Delete associated metadata\n            if (userId !== \"default\") {\n                try {\n                    await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.deleteEventMetadata)(userId, eventId);\n                    console.log(`Successfully deleted metadata for event: ${eventId}`);\n                } catch (metadataError) {\n                    console.error(`Error deleting metadata for event ${eventId} (proceeding anyway):`, metadataError);\n                // Log error but don't fail the overall deletion if calendar delete succeeded\n                }\n            }\n            // 4. Invalidate cache for the event's date range\n            if (originalStartDate && originalEndDate) {\n                try {\n                    await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__.invalidateCache)(tokens, originalStartDate, originalEndDate);\n                    console.log(`Invalidated cache for range: ${originalStartDate} - ${originalEndDate}`);\n                } catch (cacheError) {\n                    console.error(\"Error invalidating cache after delete:\", cacheError);\n                }\n            } else {\n                console.warn(`Could not determine date range for event ${eventId}, invalidating token cache.`);\n                try {\n                    await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__.invalidateCache)(tokens); // Invalidate broader cache associated with token\n                } catch (cacheError) {\n                    console.error(\"Error invalidating cache after delete (fallback):\", cacheError);\n                }\n            }\n            return {\n                success: true,\n                message: `Successfully deleted event: \"${eventSummary}\"`,\n                eventId: eventId,\n                summary: eventSummary\n            }; // Return success object\n        } catch (error) {\n            console.error(`Error deleting event ${eventId}:`, error);\n            // Don't invalidate cache on error here, as the state is uncertain\n            return {\n                success: false,\n                error: `Failed to delete event ${eventId} (${eventSummary}): ${error.message}`,\n                eventId: eventId,\n                summary: eventSummary // Include summary if retrieved\n            };\n        }\n    },\n    updateCalendarEvent: async (args, userId = \"default\", accessToken = null)=>{\n        if (!accessToken) return {\n            error: \"User not authenticated.\",\n            success: false,\n            eventId: args.eventId\n        };\n        const tokens = {\n            access_token: accessToken\n        };\n        const { eventId, updates } = args;\n        if (!eventId || !updates || typeof updates !== \"object\" || Object.keys(updates).length === 0) {\n            return {\n                error: \"Event ID and a non-empty updates object are required.\",\n                success: false,\n                eventId: eventId\n            };\n        }\n        // Validate update values (basic check for ISO dates if provided)\n        let updateStartDt, updateEndDt;\n        try {\n            if (updates.start) {\n                updateStartDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(updates.start);\n                if (!updateStartDt.isValid) throw new Error(\"Invalid start date format\");\n            }\n            if (updates.end) {\n                updateEndDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(updates.end);\n                if (!updateEndDt.isValid) throw new Error(\"Invalid end date format\");\n            }\n        // Use retrieved original times if only one end of the date is provided in updates\n        // (This requires getting the original event *first*)\n        // We will perform this check after fetching the original event.\n        } catch (validationError) {\n            return {\n                error: `Invalid update data: ${validationError.message}. Use ISO 8601 format.`,\n                success: false,\n                eventId: eventId\n            };\n        }\n        let originalStartDate, originalEndDate, originalSummary = eventId;\n        try {\n            // 1. Get original event times for cache invalidation and potential date logic\n            const oauth2Client = (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.createOAuth2Client)(tokens);\n            const calendar = googleapis__WEBPACK_IMPORTED_MODULE_1__.google.calendar({\n                version: \"v3\",\n                auth: oauth2Client\n            });\n            let originalEventData;\n            try {\n                console.log(`Fetching event details for update: ${eventId}`);\n                const eventResponse = await calendar.events.get({\n                    calendarId: \"primary\",\n                    eventId: eventId\n                });\n                originalEventData = eventResponse.data;\n                originalStartDate = originalEventData.start?.dateTime || originalEventData.start?.date;\n                originalEndDate = originalEventData.end?.dateTime || originalEventData.end?.date;\n                originalSummary = originalEventData.summary || eventId;\n                console.log(`Found event \"${originalSummary}\" starting ${originalStartDate} for update.`);\n            } catch (getError) {\n                if (getError.code === 404) {\n                    return {\n                        success: false,\n                        error: `Event ${eventId} not found for update.`,\n                        eventId: eventId\n                    };\n                }\n                throw new Error(`Failed to retrieve event details before update: ${getError.message}`);\n            }\n            // Refined Date Validation: Check start < end using original dates if needed\n            const finalStart = updates.start ? updateStartDt : luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(originalStartDate);\n            const finalEnd = updates.end ? updateEndDt : luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(originalEndDate);\n            if (finalStart.isValid && finalEnd.isValid && finalStart >= finalEnd) {\n                throw new Error(\"Start time must be before end time after updates are applied.\");\n            }\n            // 2. Update the event via internal function\n            console.log(`Attempting to update event: ${eventId} with updates:`, updates);\n            // Pass only the fields present in the 'updates' object\n            const updatePayload = {\n                ...updates\n            }; // Shallow copy\n            const updatedEvent = await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.updateCalendarEvent)(tokens, eventId, updatePayload); // Assume throws on API error\n            console.log(`Successfully updated event in Google Calendar: ${eventId}`);\n            // 3. Update metadata if priority or tags are provided in the updates\n            const hasMetadataUpdate = updates.priority !== undefined || updates.tags !== undefined;\n            if (hasMetadataUpdate && userId !== \"default\") {\n                try {\n                    // We only update the fields provided in the 'updates' object.\n                    // createOrUpdateEventMetadata handles merging/overwriting correctly.\n                    await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.createOrUpdateEventMetadata)(userId, eventId, {\n                        priority: updates.priority,\n                        tags: updates.tags // Will be null if undefined, handled by DB function\n                    });\n                    console.log(`Metadata updated for event ${eventId}.`);\n                } catch (metadataError) {\n                    console.error(`Error updating metadata for event ${eventId} (proceeding anyway):`, metadataError);\n                    // Attach metadata error info to the result, but don't fail the update\n                    updatedEvent.metadataError = `Failed to update metadata: ${metadataError.message}`;\n                }\n            }\n            // 4. Invalidate cache for both original and new ranges\n            const rangesToInvalidate = [];\n            if (originalStartDate && originalEndDate) rangesToInvalidate.push({\n                start: originalStartDate,\n                end: originalEndDate\n            });\n            // Use updated event data for the new range\n            const newStartDate = updatedEvent.start?.dateTime || updatedEvent.start?.date;\n            const newEndDate = updatedEvent.end?.dateTime || updatedEvent.end?.date;\n            if (newStartDate && newEndDate) rangesToInvalidate.push({\n                start: newStartDate,\n                end: newEndDate\n            });\n            if (rangesToInvalidate.length > 0) {\n                // Deduplicate ranges before invalidating\n                const uniqueRanges = [\n                    ...new Set(rangesToInvalidate.map((r)=>`${r.start}|${r.end}`))\n                ].map((s)=>{\n                    const [start, end] = s.split(\"|\");\n                    return {\n                        start,\n                        end\n                    };\n                });\n                console.log(\"Invalidating cache ranges:\", uniqueRanges);\n                for (const range of uniqueRanges){\n                    try {\n                        await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__.invalidateCache)(tokens, range.start, range.end);\n                        console.log(`Invalidated cache for range: ${range.start} - ${range.end}`);\n                    } catch (cacheError) {\n                        console.error(`Error invalidating cache range ${range.start}-${range.end}:`, cacheError);\n                    }\n                }\n            } else {\n                console.warn(`Could not determine date range(s) for event ${eventId} update, invalidating token cache.`);\n                try {\n                    await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__.invalidateCache)(tokens); // Fallback invalidate\n                } catch (cacheError) {\n                    console.error(\"Error invalidating cache after update (fallback):\", cacheError);\n                }\n            }\n            // Return the updated event object from the API, adding a success flag\n            return {\n                ...updatedEvent,\n                success: true\n            };\n        } catch (error) {\n            console.error(`Error updating event ${eventId}:`, error);\n            return {\n                success: false,\n                error: `Failed to update event ${eventId} (${originalSummary || eventId}): ${error.message}`,\n                eventId: eventId,\n                summary: originalSummary // Include original summary if retrieved\n            };\n        }\n    },\n    findAvailableSlots: async (args, userId = \"default\", accessToken = null)=>{\n        if (!accessToken) return {\n            error: \"User not authenticated.\",\n            success: false,\n            slots: []\n        };\n        const tokens = {\n            access_token: accessToken\n        };\n        const { duration, startDate: reqStartDate, endDate: reqEndDate, timePreference = \"any\", activity = \"event\" } = args;\n        if (!duration || typeof duration !== \"number\" || duration <= 0) {\n            return {\n                error: \"Valid duration (in minutes) is required.\",\n                success: false,\n                slots: []\n            };\n        }\n        // Define search range with defaults\n        const now = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.now();\n        const startDate = reqStartDate ? luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(reqStartDate) : now;\n        // Default end date is 7 days from the resolved start date\n        const endDate1 = reqEndDate ? luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(reqEndDate) : startDate.plus({\n            days: 7\n        });\n        if (!startDate.isValid || !endDate1.isValid) {\n            return {\n                error: `Invalid date format. Use ISO 8601. Received start=${reqStartDate}, end=${reqEndDate}`,\n                success: false,\n                slots: []\n            };\n        }\n        if (startDate >= endDate1) {\n            return {\n                error: \"Start date must be before end date.\",\n                success: false,\n                slots: []\n            };\n        }\n        let fetchedEvents = []; // Initialize events array\n        try {\n            // Fetch events for the *entire* potential search range first (cache-aware)\n            // Use daily granularity for cache keys\n            const cacheKeyStart = startDate.startOf(\"day\").toISODate();\n            const cacheKeyEnd = endDate1.endOf(\"day\").toISODate(); // Inclusive end day for key\n            const tokenHash = accessToken.substring(accessToken.length - 10);\n            const userIdCachePrefix = `user_${tokenHash}`;\n            let cachedEvents = await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_3__.getCachedEventsForDateRange)(userIdCachePrefix, cacheKeyStart, cacheKeyEnd);\n            if (cachedEvents) {\n                console.log(`Cache HIT for slot search events ${cacheKeyStart} to ${cacheKeyEnd}`);\n                fetchedEvents = cachedEvents; // Use cached events (will be filtered later)\n            } else {\n                console.log(`Cache MISS for slot search events ${cacheKeyStart} to ${cacheKeyEnd}`);\n                // Fetch events covering the *broadest* possible range (start of start day to end of end day) for caching\n                const apiEvents = await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.getCalendarEvents)(tokens, startDate.startOf(\"day\").toJSDate(), endDate1.endOf(\"day\").toJSDate());\n                if (apiEvents && Array.isArray(apiEvents)) {\n                    fetchedEvents = apiEvents;\n                    await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_3__.cacheEventsForDateRange)(userIdCachePrefix, cacheKeyStart, cacheKeyEnd, fetchedEvents, 300); // Cache the broad fetch\n                    console.log(`Fetched and cached ${fetchedEvents.length} events for slot search.`);\n                } else {\n                    fetchedEvents = []; // Assume no events if fetch fails\n                    console.warn(`No events returned or fetch failed for slot search range.`);\n                }\n            }\n            // Filter the fetched events (from cache or API) to the precise requested time window *before* finding slots\n            const relevantEvents = fetchedEvents.filter((event)=>{\n                const eventStart = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.start?.dateTime || event.start?.date);\n                const eventEnd = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.end?.dateTime || event.end?.date);\n                // Check overlap with the *precise* user-requested range [startDate, endDate)\n                return eventStart.isValid && eventEnd.isValid && eventStart < endDate1 && eventEnd > startDate;\n            });\n            console.log(`Filtered ${fetchedEvents.length} events down to ${relevantEvents.length} relevant for the precise slot search window.`);\n            // Use the imported utility function (renamed to avoid conflict)\n            const slotsResult = await (0,_schedulingUtils_js__WEBPACK_IMPORTED_MODULE_5__.findAvailableSlots)(relevantEvents, duration, startDate.toISO(), endDate1.toISO(), timePreference, activity // Pass activity directly\n            );\n            // findAvailableSlotsUtil should return an object like { slots: [...] } or { error: ..., slots: [] }\n            // Return the result directly, adding a success flag based on whether an error occurred within the util\n            // Return the slots array directly\n            if (slotsResult.error) {\n                throw new Error(slotsResult.error);\n            }\n            return slotsResult.slots || [];\n        } catch (error) {\n            console.error(`Error in findAvailableSlots tool (${duration}min, ${startDate.toISO()} to ${endDate1.toISO()}):`, error);\n            // Return a structured error object\n            throw new Error(`Failed to find available slots: ${error.message}`);\n        }\n    },\n    getWeatherForecast: async (args, userId = \"default\", accessToken = null)=>{\n        // Placeholder - requires actual weather API integration\n        const { location, date: dateString } = args;\n        if (!location) return {\n            error: \"Location is required for weather forecast.\",\n            success: false\n        };\n        // Default to today if date is missing or invalid\n        let forecastDate = dateString ? luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(dateString) : luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.now();\n        if (!forecastDate.isValid) {\n            console.warn(`Invalid date provided for weather forecast: ${dateString}. Defaulting to today.`);\n            forecastDate = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.now();\n        }\n        const formattedDate = forecastDate.toISODate(); // YYYY-MM-DD\n        console.log(`Placeholder: Fetching weather for ${location} on ${formattedDate}`);\n        try {\n            // --- Replace with actual weather API call ---\n            // Example: const weatherData = await getWeatherData(location, formattedDate);\n            // return { ...weatherData, success: true };\n            // --- Placeholder response ---\n            return {\n                success: false,\n                location: location,\n                date: formattedDate,\n                forecast: `Weather data for ${location} on ${formattedDate} is currently unavailable (feature not implemented).`,\n                error: \"Weather API integration is pending.\"\n            };\n        } catch (error) {\n            console.error(`Error fetching weather for ${location}, ${formattedDate}:`, error);\n            return {\n                success: false,\n                location: location,\n                date: formattedDate,\n                error: `Failed to get weather forecast: ${error.message}`\n            };\n        }\n    },\n    deleteCalendarEventsByQuery: async (args, userId = \"default\", accessToken = null)=>{\n        if (!accessToken) {\n            return {\n                error: \"User not authenticated.\",\n                success: false,\n                deletedCount: 0\n            };\n        }\n        const tokens = {\n            access_token: accessToken\n        };\n        const { query, start_date, end_date } = args;\n        if (!query || !start_date || !end_date) {\n            return {\n                error: \"Query, start date, and end date are required.\",\n                success: false,\n                deletedCount: 0\n            };\n        }\n        const startDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(start_date);\n        const endDt = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(end_date);\n        if (!startDt.isValid || !endDt.isValid) {\n            return {\n                error: `Invalid date format. Use ISO 8601.`,\n                success: false,\n                deletedCount: 0\n            };\n        }\n        if (startDt >= endDt) {\n            return {\n                error: \"Start date must be before end date.\",\n                success: false,\n                deletedCount: 0\n            };\n        }\n        console.log(`Attempting to delete events matching \"${query}\" between ${startDt.toISO()} and ${endDt.toISO()}`);\n        let fetchedEvents = []; // Initialize events array\n        try {\n            // 1. Get all events potentially in the range (use cache)\n            const cacheKeyStart = startDt.startOf(\"day\").toISODate();\n            const cacheKeyEnd = endDt.endOf(\"day\").toISODate(); // Inclusive end day\n            const tokenHash = accessToken.substring(accessToken.length - 10);\n            const userIdCachePrefix = `user_${tokenHash}`;\n            let cachedEvents = await (0,_redisClient_js__WEBPACK_IMPORTED_MODULE_3__.getCachedEventsForDateRange)(userIdCachePrefix, cacheKeyStart, cacheKeyEnd);\n            if (cachedEvents) {\n                console.log(`Cache HIT for bulk delete search ${cacheKeyStart} to ${cacheKeyEnd}`);\n                fetchedEvents = cachedEvents;\n            } else {\n                console.log(`Cache MISS for bulk delete search ${cacheKeyStart} to ${cacheKeyEnd}`);\n                // Fetch broadly for potential caching benefit if deletion fails or is partial\n                const apiEvents = await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.getCalendarEvents)(tokens, startDt.startOf(\"day\").toJSDate(), endDate.endOf(\"day\").toJSDate());\n                fetchedEvents = Array.isArray(apiEvents) ? apiEvents : [];\n                // Don't cache here immediately, as we might delete many. Cache might get invalidated anyway.\n                console.log(`Fetched ${fetchedEvents.length} potential events for bulk delete query.`);\n            }\n            // 2. Filter fetched events precisely by requested time *and* query\n            const queryLower = query.toLowerCase();\n            const matchingEvents = fetchedEvents.filter((event)=>{\n                const eventStart = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.start?.dateTime || event.start?.date);\n                const eventEnd = luxon__WEBPACK_IMPORTED_MODULE_0__.DateTime.fromISO(event.end?.dateTime || event.end?.date);\n                const summaryLower = event.summary?.toLowerCase() || \"\";\n                return eventStart.isValid && eventEnd.isValid && eventStart < endDt && eventEnd > startDt && // Check time overlap with precise range\n                summaryLower.includes(queryLower); // Check summary match\n            });\n            if (matchingEvents.length === 0) {\n                console.log(`No events matching \"${query}\" found in the specified range.`);\n                return {\n                    success: true,\n                    message: `No events matching \"${query}\" found.`,\n                    deletedCount: 0\n                };\n            }\n            console.log(`Found ${matchingEvents.length} events matching query. Proceeding with deletion...`);\n            // 3. Delete each matching event and invalidate cache individually\n            const deleteResults = [];\n            const failedDeletes = [];\n            const invalidatedRanges = new Set(); // Track ranges to invalidate efficiently\n            for (const event of matchingEvents){\n                try {\n                    // Delete from Google Calendar\n                    await (0,_googleCalendar_js__WEBPACK_IMPORTED_MODULE_2__.deleteCalendarEvent)(tokens, event.id);\n                    console.log(`Successfully deleted event from Google Calendar: ${event.id} (\"${event.summary}\")`);\n                    // Delete associated metadata\n                    if (userId !== \"default\") {\n                        try {\n                            await (0,_postgresClient_js__WEBPACK_IMPORTED_MODULE_8__.deleteEventMetadata)(userId, event.id);\n                            console.log(`Successfully deleted metadata for event: ${event.id}`);\n                        } catch (metadataError) {\n                            console.error(`Error deleting metadata for event ${event.id} during bulk delete (proceeding):`, metadataError);\n                        // Log but don't count as a primary failure\n                        }\n                    }\n                    deleteResults.push({\n                        id: event.id,\n                        summary: event.summary\n                    });\n                    // Add event's range to the set for cache invalidation\n                    const eventStartIso = event.start?.dateTime || event.start?.date;\n                    const eventEndIso = event.end?.dateTime || event.end?.date;\n                    if (eventStartIso && eventEndIso) {\n                        invalidatedRanges.add(`${eventStartIso}|${eventEndIso}`);\n                    }\n                } catch (deleteError) {\n                    console.error(`Failed to delete event ${event.id} (\"${event.summary}\") during bulk operation:`, deleteError);\n                    failedDeletes.push({\n                        id: event.id,\n                        summary: event.summary,\n                        error: deleteError.message\n                    });\n                }\n            }\n            // 4. Invalidate cache for all affected ranges\n            if (invalidatedRanges.size > 0) {\n                console.log(`Invalidating cache for ${invalidatedRanges.size} unique date ranges.`);\n                for (const rangeString of invalidatedRanges){\n                    const [start, end] = rangeString.split(\"|\");\n                    try {\n                        await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__.invalidateCache)(tokens, start, end);\n                        console.log(`Invalidated cache range: ${start} - ${end}`);\n                    } catch (cacheError) {\n                        console.error(`Cache invalidation error during bulk delete for range ${start}-${end}:`, cacheError);\n                    }\n                }\n            } else if (deleteResults.length > 0) {\n                // If deletes succeeded but ranges couldn't be determined, invalidate broadly\n                console.warn(\"Could not determine specific ranges for cache invalidation during bulk delete, invalidating token cache.\");\n                try {\n                    await (0,_services_cacheService_js__WEBPACK_IMPORTED_MODULE_4__.invalidateCache)(tokens);\n                } catch (cacheError) {\n                    console.error(\"Error invalidating cache after bulk delete (fallback):\", cacheError);\n                }\n            }\n            // 5. Compile and return result\n            const successCount = deleteResults.length;\n            let message = `Successfully deleted ${successCount} event(s) matching \"${query}\".`;\n            if (failedDeletes.length > 0) {\n                message += ` Failed to delete ${failedDeletes.length} event(s). Check logs for details.`;\n                console.warn(\"Failures during bulk delete:\", failedDeletes);\n            }\n            return {\n                success: failedDeletes.length === 0,\n                message: message,\n                deletedCount: successCount,\n                deletedItems: deleteResults,\n                failedItems: failedDeletes // List failures\n            };\n        } catch (error) {\n            console.error(`Critical error during deleteCalendarEventsByQuery (${query}, ${start_date}-${end_date}):`, error);\n            return {\n                success: false,\n                error: `An unexpected error occurred during the bulk delete operation: ${error.message}`,\n                deletedCount: 0\n            };\n        }\n    }\n};\n// --- Exports ---\n// Export the schema and the implementation map\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/tools/toolIndex.js\n");

/***/ }),

/***/ "(api)/./pages/api/auth/[...nextauth].js":
/*!*****************************************!*\
  !*** ./pages/api/auth/[...nextauth].js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"next-auth\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/google */ \"next-auth/providers/google\");\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst authOptions = {\n    providers: [\n        next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1___default()({\n            clientId: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n            authorization: {\n                params: {\n                    scope: \"https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/calendar\",\n                    access_type: \"offline\",\n                    prompt: \"consent\"\n                }\n            }\n        })\n    ],\n    callbacks: {\n        async jwt ({ token, account, user }) {\n            // Initial sign in\n            if (account && user) {\n                return {\n                    accessToken: account.access_token,\n                    refreshToken: account.refresh_token,\n                    accessTokenExpires: account.expires_at * 1000,\n                    user\n                };\n            }\n            // Return previous token if the access token has not expired yet\n            if (Date.now() < token.accessTokenExpires) {\n                return token;\n            }\n            // Access token has expired, try to refresh it\n            try {\n                const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n                    headers: {\n                        \"Content-Type\": \"application/x-www-form-urlencoded\"\n                    },\n                    body: new URLSearchParams({\n                        client_id: process.env.GOOGLE_CLIENT_ID,\n                        client_secret: process.env.GOOGLE_CLIENT_SECRET,\n                        grant_type: \"refresh_token\",\n                        refresh_token: token.refreshToken\n                    }),\n                    method: \"POST\"\n                });\n                const refreshedTokens = await response.json();\n                if (!response.ok) {\n                    throw refreshedTokens;\n                }\n                return {\n                    ...token,\n                    accessToken: refreshedTokens.access_token,\n                    accessTokenExpires: Date.now() + refreshedTokens.expires_in * 1000,\n                    // Fall back to old refresh token, but note that\n                    // many providers may only allow using a refresh token once\n                    refreshToken: refreshedTokens.refresh_token ?? token.refreshToken\n                };\n            } catch (error) {\n                console.error(\"Error refreshing access token\", error);\n                // The error property will be used client-side to handle the refresh token error\n                return {\n                    ...token,\n                    error: \"RefreshAccessTokenError\"\n                };\n            }\n        },\n        async session ({ session, token }) {\n            session.user = token.user;\n            session.accessToken = token.accessToken;\n            session.error = token.error;\n            return session;\n        }\n    },\n    // Enable debug messages in the console if you are having problems\n    debug: \"development\" === \"development\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (next_auth__WEBPACK_IMPORTED_MODULE_0___default()(authOptions));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpQztBQUN1QjtBQUVqRCxNQUFNRSxjQUFjO0lBQ3pCQyxXQUFXO1FBQ1RGLGlFQUFjQSxDQUFDO1lBQ2JHLFVBQVVDLFFBQVFDLEdBQUcsQ0FBQ0MsZ0JBQWdCO1lBQ3RDQyxjQUFjSCxRQUFRQyxHQUFHLENBQUNHLG9CQUFvQjtZQUM5Q0MsZUFBZTtnQkFDYkMsUUFBUTtvQkFDTkMsT0FBTztvQkFDUEMsYUFBYTtvQkFDYkMsUUFBUTtnQkFDVjtZQUNGO1FBQ0Y7S0FDRDtJQUNEQyxXQUFXO1FBQ1QsTUFBTUMsS0FBSSxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRUMsSUFBSSxFQUFFO1lBQ2hDLGtCQUFrQjtZQUNsQixJQUFJRCxXQUFXQyxNQUFNO2dCQUNuQixPQUFPO29CQUNMQyxhQUFhRixRQUFRRyxZQUFZO29CQUNqQ0MsY0FBY0osUUFBUUssYUFBYTtvQkFDbkNDLG9CQUFvQk4sUUFBUU8sVUFBVSxHQUFHO29CQUN6Q047Z0JBQ0Y7WUFDRjtZQUVBLGdFQUFnRTtZQUNoRSxJQUFJTyxLQUFLQyxHQUFHLEtBQUtWLE1BQU1PLGtCQUFrQixFQUFFO2dCQUN6QyxPQUFPUDtZQUNUO1lBRUEsOENBQThDO1lBQzlDLElBQUk7Z0JBQ0YsTUFBTVcsV0FBVyxNQUFNQyxNQUFNLHVDQUF1QztvQkFDbEVDLFNBQVM7d0JBQUUsZ0JBQWdCO29CQUFvQztvQkFDL0RDLE1BQU0sSUFBSUMsZ0JBQWdCO3dCQUN4QkMsV0FBVzVCLFFBQVFDLEdBQUcsQ0FBQ0MsZ0JBQWdCO3dCQUN2QzJCLGVBQWU3QixRQUFRQyxHQUFHLENBQUNHLG9CQUFvQjt3QkFDL0MwQixZQUFZO3dCQUNaWixlQUFlTixNQUFNSyxZQUFZO29CQUNuQztvQkFDQWMsUUFBUTtnQkFDVjtnQkFFQSxNQUFNQyxrQkFBa0IsTUFBTVQsU0FBU1UsSUFBSTtnQkFFM0MsSUFBSSxDQUFDVixTQUFTVyxFQUFFLEVBQUU7b0JBQ2hCLE1BQU1GO2dCQUNSO2dCQUVBLE9BQU87b0JBQ0wsR0FBR3BCLEtBQUs7b0JBQ1JHLGFBQWFpQixnQkFBZ0JoQixZQUFZO29CQUN6Q0csb0JBQW9CRSxLQUFLQyxHQUFHLEtBQUtVLGdCQUFnQkcsVUFBVSxHQUFHO29CQUM5RCxnREFBZ0Q7b0JBQ2hELDJEQUEyRDtvQkFDM0RsQixjQUFjZSxnQkFBZ0JkLGFBQWEsSUFBSU4sTUFBTUssWUFBWTtnQkFDbkU7WUFDRixFQUFFLE9BQU9tQixPQUFPO2dCQUNkQyxRQUFRRCxLQUFLLENBQUMsaUNBQWlDQTtnQkFDL0MsZ0ZBQWdGO2dCQUNoRixPQUFPO29CQUFFLEdBQUd4QixLQUFLO29CQUFFd0IsT0FBTztnQkFBMEI7WUFDdEQ7UUFDRjtRQUNBLE1BQU1FLFNBQVEsRUFBRUEsT0FBTyxFQUFFMUIsS0FBSyxFQUFFO1lBQzlCMEIsUUFBUXhCLElBQUksR0FBR0YsTUFBTUUsSUFBSTtZQUN6QndCLFFBQVF2QixXQUFXLEdBQUdILE1BQU1HLFdBQVc7WUFDdkN1QixRQUFRRixLQUFLLEdBQUd4QixNQUFNd0IsS0FBSztZQUMzQixPQUFPRTtRQUNUO0lBQ0Y7SUFDQSxrRUFBa0U7SUFDbEVDLE9BQU92QyxrQkFBeUI7QUFDbEMsRUFBRTtBQUVGLGlFQUFlTCxnREFBUUEsQ0FBQ0UsWUFBWUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2djYWxlbmRhcmFwcC8uL3BhZ2VzL2FwaS9hdXRoL1suLi5uZXh0YXV0aF0uanM/NTI3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTmV4dEF1dGggZnJvbSAnbmV4dC1hdXRoJztcbmltcG9ydCBHb29nbGVQcm92aWRlciBmcm9tICduZXh0LWF1dGgvcHJvdmlkZXJzL2dvb2dsZSc7XG5cbmV4cG9ydCBjb25zdCBhdXRoT3B0aW9ucyA9IHtcbiAgcHJvdmlkZXJzOiBbXG4gICAgR29vZ2xlUHJvdmlkZXIoe1xuICAgICAgY2xpZW50SWQ6IHByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfSUQsXG4gICAgICBjbGllbnRTZWNyZXQ6IHByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfU0VDUkVULFxuICAgICAgYXV0aG9yaXphdGlvbjoge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBzY29wZTogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvdXNlcmluZm8ucHJvZmlsZSBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3VzZXJpbmZvLmVtYWlsIGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2FsZW5kYXInLFxuICAgICAgICAgIGFjY2Vzc190eXBlOiAnb2ZmbGluZScsXG4gICAgICAgICAgcHJvbXB0OiAnY29uc2VudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLFxuICBdLFxuICBjYWxsYmFja3M6IHtcbiAgICBhc3luYyBqd3QoeyB0b2tlbiwgYWNjb3VudCwgdXNlciB9KSB7XG4gICAgICAvLyBJbml0aWFsIHNpZ24gaW5cbiAgICAgIGlmIChhY2NvdW50ICYmIHVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhY2Nlc3NUb2tlbjogYWNjb3VudC5hY2Nlc3NfdG9rZW4sXG4gICAgICAgICAgcmVmcmVzaFRva2VuOiBhY2NvdW50LnJlZnJlc2hfdG9rZW4sXG4gICAgICAgICAgYWNjZXNzVG9rZW5FeHBpcmVzOiBhY2NvdW50LmV4cGlyZXNfYXQgKiAxMDAwLCAvLyBDb252ZXJ0IHRvIG1pbGxpc2Vjb25kc1xuICAgICAgICAgIHVzZXJcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIHByZXZpb3VzIHRva2VuIGlmIHRoZSBhY2Nlc3MgdG9rZW4gaGFzIG5vdCBleHBpcmVkIHlldFxuICAgICAgaWYgKERhdGUubm93KCkgPCB0b2tlbi5hY2Nlc3NUb2tlbkV4cGlyZXMpIHtcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfVxuXG4gICAgICAvLyBBY2Nlc3MgdG9rZW4gaGFzIGV4cGlyZWQsIHRyeSB0byByZWZyZXNoIGl0XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbicsIHtcbiAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyB9LFxuICAgICAgICAgIGJvZHk6IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgICAgICAgY2xpZW50X2lkOiBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX0lELFxuICAgICAgICAgICAgY2xpZW50X3NlY3JldDogcHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9TRUNSRVQsXG4gICAgICAgICAgICBncmFudF90eXBlOiAncmVmcmVzaF90b2tlbicsXG4gICAgICAgICAgICByZWZyZXNoX3Rva2VuOiB0b2tlbi5yZWZyZXNoVG9rZW4sXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlZnJlc2hlZFRva2VucyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgdGhyb3cgcmVmcmVzaGVkVG9rZW5zO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi50b2tlbixcbiAgICAgICAgICBhY2Nlc3NUb2tlbjogcmVmcmVzaGVkVG9rZW5zLmFjY2Vzc190b2tlbixcbiAgICAgICAgICBhY2Nlc3NUb2tlbkV4cGlyZXM6IERhdGUubm93KCkgKyByZWZyZXNoZWRUb2tlbnMuZXhwaXJlc19pbiAqIDEwMDAsXG4gICAgICAgICAgLy8gRmFsbCBiYWNrIHRvIG9sZCByZWZyZXNoIHRva2VuLCBidXQgbm90ZSB0aGF0XG4gICAgICAgICAgLy8gbWFueSBwcm92aWRlcnMgbWF5IG9ubHkgYWxsb3cgdXNpbmcgYSByZWZyZXNoIHRva2VuIG9uY2VcbiAgICAgICAgICByZWZyZXNoVG9rZW46IHJlZnJlc2hlZFRva2Vucy5yZWZyZXNoX3Rva2VuID8/IHRva2VuLnJlZnJlc2hUb2tlbixcbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlZnJlc2hpbmcgYWNjZXNzIHRva2VuJywgZXJyb3IpO1xuICAgICAgICAvLyBUaGUgZXJyb3IgcHJvcGVydHkgd2lsbCBiZSB1c2VkIGNsaWVudC1zaWRlIHRvIGhhbmRsZSB0aGUgcmVmcmVzaCB0b2tlbiBlcnJvclxuICAgICAgICByZXR1cm4geyAuLi50b2tlbiwgZXJyb3I6ICdSZWZyZXNoQWNjZXNzVG9rZW5FcnJvcicgfTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHNlc3Npb24oeyBzZXNzaW9uLCB0b2tlbiB9KSB7XG4gICAgICBzZXNzaW9uLnVzZXIgPSB0b2tlbi51c2VyO1xuICAgICAgc2Vzc2lvbi5hY2Nlc3NUb2tlbiA9IHRva2VuLmFjY2Vzc1Rva2VuO1xuICAgICAgc2Vzc2lvbi5lcnJvciA9IHRva2VuLmVycm9yO1xuICAgICAgcmV0dXJuIHNlc3Npb247XG4gICAgfVxuICB9LFxuICAvLyBFbmFibGUgZGVidWcgbWVzc2FnZXMgaW4gdGhlIGNvbnNvbGUgaWYgeW91IGFyZSBoYXZpbmcgcHJvYmxlbXNcbiAgZGVidWc6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTmV4dEF1dGgoYXV0aE9wdGlvbnMpOyJdLCJuYW1lcyI6WyJOZXh0QXV0aCIsIkdvb2dsZVByb3ZpZGVyIiwiYXV0aE9wdGlvbnMiLCJwcm92aWRlcnMiLCJjbGllbnRJZCIsInByb2Nlc3MiLCJlbnYiLCJHT09HTEVfQ0xJRU5UX0lEIiwiY2xpZW50U2VjcmV0IiwiR09PR0xFX0NMSUVOVF9TRUNSRVQiLCJhdXRob3JpemF0aW9uIiwicGFyYW1zIiwic2NvcGUiLCJhY2Nlc3NfdHlwZSIsInByb21wdCIsImNhbGxiYWNrcyIsImp3dCIsInRva2VuIiwiYWNjb3VudCIsInVzZXIiLCJhY2Nlc3NUb2tlbiIsImFjY2Vzc190b2tlbiIsInJlZnJlc2hUb2tlbiIsInJlZnJlc2hfdG9rZW4iLCJhY2Nlc3NUb2tlbkV4cGlyZXMiLCJleHBpcmVzX2F0IiwiRGF0ZSIsIm5vdyIsInJlc3BvbnNlIiwiZmV0Y2giLCJoZWFkZXJzIiwiYm9keSIsIlVSTFNlYXJjaFBhcmFtcyIsImNsaWVudF9pZCIsImNsaWVudF9zZWNyZXQiLCJncmFudF90eXBlIiwibWV0aG9kIiwicmVmcmVzaGVkVG9rZW5zIiwianNvbiIsIm9rIiwiZXhwaXJlc19pbiIsImVycm9yIiwiY29uc29sZSIsInNlc3Npb24iLCJkZWJ1ZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/auth/[...nextauth].js\n");

/***/ }),

/***/ "(api)/./pages/api/chat-stream.js":
/*!**********************************!*\
  !*** ./pages/api/chat-stream.js ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_chatbot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/chatbot */ \"(api)/./lib/chatbot.js\");\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/next */ \"next-auth/next\");\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_next__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _api_auth_nextauth___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/auth/[...nextauth] */ \"(api)/./pages/api/auth/[...nextauth].js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_chatbot__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_chatbot__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst config = {\n    api: {\n        responseLimit: false\n    }\n};\nasync function handler(req, res) {\n    // This endpoint only accepts GET requests for SSE\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const session = await (0,next_auth_next__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(req, res, _api_auth_nextauth___WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        const { message, startNew } = req.query; // Read startNew query param\n        const startNewConversation = startNew === \"true\"; // Convert to boolean\n        if (!message) {\n            return res.status(400).json({\n                error: \"Message is required\"\n            });\n        }\n        // Check if user is authenticated\n        if (!session) {\n            return res.status(401).json({\n                error: \"Authentication required\"\n            });\n        }\n        // Check if token has an error (failed refresh)\n        if (session.error === \"RefreshAccessTokenError\") {\n            return res.status(401).json({\n                error: \"Your session has expired. Please sign in again.\"\n            });\n        }\n        // Get user ID from session\n        const userId = session.user?.email || \"default\";\n        // Get access token from session\n        const accessToken = session.accessToken;\n        // Set up Server-Sent Events\n        res.writeHead(200, {\n            \"Content-Type\": \"text/event-stream\",\n            \"Cache-Control\": \"no-cache, no-transform, no-store\",\n            \"Connection\": \"keep-alive\",\n            \"X-Accel-Buffering\": \"no\" // Disable buffering in Nginx\n        });\n        // Send initial message\n        res.write(`data: ${JSON.stringify({\n            type: \"start\"\n        })}\\n\\n`);\n        // Force flush the initial message\n        if (res.flush) {\n            try {\n                res.flush();\n            } catch (flushError) {\n                console.warn(\"Error flushing initial message:\", flushError);\n            }\n        }\n        // Create a callback function to handle streaming chunks\n        const streamCallback = (chunk)=>{\n            try {\n                const chunkData = JSON.stringify(chunk);\n                res.write(`data: ${chunkData}\\n\\n`);\n            } catch (writeError) {\n                console.error(\"Error writing chunk to response:\", writeError);\n            }\n            // Flush the response to ensure chunks are sent immediately\n            if (res.flush) {\n                try {\n                    res.flush();\n                } catch (flushError) {\n                    console.warn(\"Error flushing response:\", flushError);\n                }\n            }\n        };\n        try {\n            // Call the chatbot with streaming enabled\n            await (0,_lib_chatbot__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(message, userId, accessToken, streamCallback, startNewConversation);\n            // Add a small delay before sending the end message\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n            // Send completion message\n            const endMessage = JSON.stringify({\n                type: \"end\"\n            });\n            res.write(`data: ${endMessage}\\n\\n`);\n            // Final flush before ending\n            if (res.flush) {\n                try {\n                    res.flush();\n                } catch (flushError) {\n                    console.warn(\"Error flushing final response:\", flushError);\n                }\n            }\n            // Add another small delay before ending the response\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            res.end();\n        } catch (error) {\n            // Send error message\n            console.error(\"Error in chat-stream processing:\", error);\n            res.write(`data: ${JSON.stringify({\n                type: \"error\",\n                content: error.message\n            })}\\n\\n`);\n            // Flush error message\n            if (res.flush) {\n                try {\n                    res.flush();\n                } catch (flushError) {\n                    console.warn(\"Error flushing error response:\", flushError);\n                }\n            }\n            res.end();\n        }\n    } catch (error) {\n        console.error(\"Error in chat-stream API:\", error);\n        return res.status(500).json({\n            error: \"An error occurred while processing your request\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/chat-stream.js\n");

/***/ }),

/***/ "(api)/./credentials.json":
/*!**************************!*\
  !*** ./credentials.json ***!
  \**************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"web":{"client_id":"1067969091630-i858c64u30bsfafv6803adcbropoiqpl.apps.googleusercontent.com","project_id":"gcalendarmate","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_secret":"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","redirect_uris":["http://localhost:3000/auth/google/callback","https://gcalendarapp.vercel.app/auth/google","https://gcalendarapp.vercel.app/auth/google/callback","http://localhost:3000/api/auth/callback/google"],"javascript_origins":["http://localhost:3000","https://gcalendarapp.vercel.app"]}}');

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat-stream&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fchat-stream.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();